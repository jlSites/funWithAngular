{
  "id": "guide/set-document-title",
  "title": "Set the Document Title",
  "contents": "\n<div class=\"content\">\n<a id=\"top\"></a>\n<h1 id=\"set-the-document-title\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/set-document-title#set-the-document-title\"><i class=\"material-icons\">link</i></a>Set the Document Title</h1>\n<p>Your app should be able to make the browser title bar say whatever you want it to say.\nThis cookbook explains how to do it.</p>\n<p>See the <live-example name=\"set-document-title\"></live-example>.</p>\n<div class=\"l-sub-section\">\n  <img src=\"generated/images/plunker/plunker-switch-to-editor-button.png\" alt=\"pop out the window\" class=\"right\" width=\"200\" height=\"70\">\n  <img src=\"generated/images/plunker/plunker-separate-window-button.png\" alt=\"pop out the window\" class=\"right\" width=\"200\" height=\"47\">\n<p>  To see the browser title bar change in the live example,\nopen it again in the Plunker editor by clicking the icon in the upper right,\nthen pop out the preview window by clicking the blue 'X' button in the upper right corner.</p>\n</div>\n<h2 id=\"the-problem-with-title\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/set-document-title#the-problem-with-title\"><i class=\"material-icons\">link</i></a>The problem with <em>&#x3C;title></em></h2>\n<p>The obvious approach is to bind a property of the component to the HTML <code>&#x3C;title></code> like this:</p>\n<code-example format=\"\">\n  &#x3C;title>{{This_Does_Not_Work}}&#x3C;/title>\n</code-example>\n<p>Sorry but that won't work.\nThe root component of the application is an element contained within the <code>&#x3C;body></code> tag.\nThe HTML <code>&#x3C;title></code> is in the document <code>&#x3C;head></code>, outside the body, making it inaccessible to Angular data binding.</p>\n<p>You could grab the browser <code>document</code> object and set the title manually.\nThat's dirty and undermines your chances of running the app outside of a browser someday.</p>\n<div class=\"l-sub-section\">\n<p>  Running your app outside a browser means that you can take advantage of server-side\npre-rendering for near-instant first app render times and for SEO.  It means you could run from\ninside a Web Worker to improve your app's responsiveness by using multiple threads.  And it\nmeans that you could run your app inside Electron.js or Windows Universal to deliver it to the desktop.</p>\n</div>\n<h2 id=\"use-the-title-service\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/set-document-title#use-the-title-service\"><i class=\"material-icons\">link</i></a>Use the <code><a href=\"api/platform-browser/Title\">Title</a></code> service</h2>\n<p>Fortunately, Angular bridges the gap by providing a <code><a href=\"api/platform-browser/Title\">Title</a></code> service as part of the <em>Browser platform</em>.\nThe <a href=\"api/platform-browser/Title\">Title</a> service is a simple class that provides an API\nfor getting and setting the current HTML document title:</p>\n<ul>\n<li><code>getTitle() : string</code>—Gets the title of the current HTML document.</li>\n<li><code>setTitle( newTitle : string )</code>—Sets the title of the current HTML document.</li>\n</ul>\n<p>You can inject the <code><a href=\"api/platform-browser/Title\">Title</a></code> service into the root <code>AppComponent</code> and expose a bindable <code>setTitle</code> method that calls it:</p>\n<code-example path=\"set-document-title/src/app/app.component.ts\" region=\"class\" title=\"src/app/app.component.ts (class)\" linenums=\"false\">\nexport class AppComponent {\n  public constructor(private titleService: Title ) { }\n\n  public setTitle( newTitle: string) {\n    this.titleService.setTitle( newTitle );\n  }\n}\n\n</code-example>\n<p>Bind that method to three anchor tags and voilà!</p>\n<figure>\n  <img src=\"generated/images/guide/set-document-title/set-title-anim.gif\" alt=\"Set title\" width=\"596\" height=\"316\">\n</figure>\n<p>Here's the complete solution:</p>\n<code-tabs>\n  <code-pane title=\"src/main.ts\" path=\"set-document-title/src/main.ts\">\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n\n</code-pane>\n  <code-pane title=\"src/app/app.module.ts\" path=\"set-document-title/src/app/app.module.ts\">\nimport { NgModule } from '@angular/core';\nimport { BrowserModule, Title }  from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  imports: [\n    BrowserModule\n  ],\n  declarations: [\n    AppComponent\n  ],\n  providers: [\n    Title\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-pane>\n  <code-pane title=\"src/app/app.component.ts\" path=\"set-document-title/src/app/app.component.ts\">\n// Import the native Angular services.\nimport { Component } from '@angular/core';\nimport { Title }     from '@angular/platform-browser';\n\n@Component({\nselector: 'my-app',\ntemplate:\n  `&#x3C;p>\n    Select a title to set on the current HTML document:\n  &#x3C;/p>\n\n  &#x3C;ul>\n    &#x3C;li>&#x3C;a (click)=\"setTitle( 'Good morning!' )\">Good morning&#x3C;/a>.&#x3C;/li>\n    &#x3C;li>&#x3C;a (click)=\"setTitle( 'Good afternoon!' )\">Good afternoon&#x3C;/a>.&#x3C;/li>\n    &#x3C;li>&#x3C;a (click)=\"setTitle( 'Good evening!' )\">Good evening&#x3C;/a>.&#x3C;/li>\n  &#x3C;/ul>\n  `\n})\nexport class AppComponent {\n  public constructor(private titleService: Title ) { }\n\n  public setTitle( newTitle: string) {\n    this.titleService.setTitle( newTitle );\n  }\n}\n\n\n</code-pane>\n</code-tabs>\n<h2 id=\"why-provide-the-title-service-in-bootstrap\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/set-document-title#why-provide-the-title-service-in-bootstrap\"><i class=\"material-icons\">link</i></a>Why provide the <code><a href=\"api/platform-browser/Title\">Title</a></code> service in <code>bootstrap</code></h2>\n<p>Generally you want to provide application-wide services in the root application component, <code>AppComponent</code>.</p>\n<p>This cookbook recommends registering the title service during bootstrapping,\na location you reserve for configuring the runtime Angular environment.</p>\n<p>That's exactly what you're doing.\nThe <code><a href=\"api/platform-browser/Title\">Title</a></code> service is part of the Angular <em>browser platform</em>.\nIf you bootstrap your application into a different platform,\nyou'll have to provide a different <code><a href=\"api/platform-browser/Title\">Title</a></code> service that understands\nthe concept of a \"document title\" for that specific platform.\nIdeally, the application itself neither knows nor cares about the runtime environment.</p>\n<p><a href=\"guide/set-document-title#top\">Back to top</a></p>\n\n</div>"
}