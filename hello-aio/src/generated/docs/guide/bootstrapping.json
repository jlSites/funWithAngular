{
  "id": "guide/bootstrapping",
  "title": "Bootstrapping",
  "contents": "\n<div class=\"content\">\n<h1 id=\"bootstrapping\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/bootstrapping#bootstrapping\"><i class=\"material-icons\">link</i></a>Bootstrapping</h1>\n<p>An NgModule class describes how the application parts fit together.\nEvery application has at least one NgModule, the <em>root</em> module\nthat you <a href=\"guide/appmodule#main\">bootstrap</a> to launch the application.\nYou can call it anything you want. The conventional name is <code>AppModule</code>.</p>\n<p>The <a href=\"guide/setup\">setup</a> instructions produce a new project with the following minimal <code>AppModule</code>.\nYou'll evolve this module as your application grows.</p>\n<code-example path=\"setup/src/app/app.module.ts\" title=\"src/app/app.module.ts\" linenums=\"false\">\nimport { NgModule }      from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AppComponent }  from './app.component';\n\n@NgModule({\n  imports:      [ BrowserModule ],\n  declarations: [ AppComponent ],\n  bootstrap:    [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-example>\n<p>After the <code>import</code> statements, you come to a class adorned with the\n<strong><code>@NgModule</code></strong> <a href=\"guide/glossary#decorator\" title=\"&#x22;Decorator&#x22; explained\"><em>decorator</em></a>.</p>\n<p>The <code>@NgModule</code> decorator identifies <code>AppModule</code> as an <code><a href=\"api/core/NgModule\">NgModule</a></code> class.\n<code>@NgModule</code> takes a <em>metadata</em> object that tells Angular how to compile and launch the application.</p>\n<ul>\n<li><strong><em>imports</em></strong> — the <code><a href=\"api/platform-browser/BrowserModule\">BrowserModule</a></code> that this and every application needs to run in a browser.</li>\n<li><strong><em>declarations</em></strong> — the application's lone component, which is also ...</li>\n<li><strong><em>bootstrap</em></strong> — the <em>root</em> component that Angular creates and inserts into the <code>index.html</code> host web page.</li>\n</ul>\n<p>The <a href=\"guide/ngmodule\">NgModules</a> guide dives deeply into the details of NgModules.\nAll you need to know at the moment is a few basics about these three properties.  </p>\n<a id=\"imports\"></a>\n<h3 id=\"the-imports-array\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/bootstrapping#the-imports-array\"><i class=\"material-icons\">link</i></a>The <em>imports</em> array</h3>\n<p>NgModules are a way to consolidate features that belong together into discrete units.\nMany features of Angular itself are organized as NgModules.\nHTTP services are in the <code><a href=\"api/http/HttpModule\">HttpModule</a></code>. The router is in the <code><a href=\"api/router/RouterModule\">RouterModule</a></code>.\nEventually you may create a feature module.</p>\n<p>Add a module to the <code>imports</code> array when the application requires its features.</p>\n<p><em>This</em> application, like most applications, executes in a browser.\nEvery application that executes in a browser needs the <code><a href=\"api/platform-browser/BrowserModule\">BrowserModule</a></code> from <code>@angular/platform-browser</code>.\nSo every such application includes the <code><a href=\"api/platform-browser/BrowserModule\">BrowserModule</a></code> in its <em>root</em> <code>AppModule</code>'s <code>imports</code> array.\nOther guide and cookbook pages will tell you when you need to add additional modules to this array.</p>\n<div class=\"alert is-important\">\n<p><strong>Only <code><a href=\"api/core/NgModule\">NgModule</a></code> classes</strong> go in the <code>imports</code> array. Do not put any other kind of class in <code>imports</code>.</p>\n</div>\n<div class=\"l-sub-section\">\n<p>The <code>import</code> statements at the top of the file and the NgModule's <code>imports</code> array\nare unrelated and have completely different jobs.</p>\n<p>The <em>JavaScript</em> <code>import</code> statements give you access to symbols <em>exported</em> by other files\nso you can reference them within <em>this</em> file.\nYou add <code>import</code> statements to almost every application file.\nThey have nothing to do with Angular and Angular knows nothing about them.</p>\n<p>The <em>module's</em> <code>imports</code> array appears <em>exclusively</em> in the <code>@NgModule</code> metadata object.\nIt tells Angular about specific <em>other</em> NgModules—all of them classes decorated\nwith <code>@NgModule</code>—that the application needs to function properly.</p>\n</div>\n<a id=\"declarations\"></a>\n<h3 id=\"the-declarations-array\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/bootstrapping#the-declarations-array\"><i class=\"material-icons\">link</i></a>The <em>declarations</em> array</h3>\n<p>You tell Angular which components belong to the <code>AppModule</code> by listing it in the module's <code>declarations</code> array.\nAs you create more components, you'll add them to <code>declarations</code>.</p>\n<p>You must declare <em>every</em> component in an <code><a href=\"api/core/NgModule\">NgModule</a></code> class.\nIf you use a component without declaring it, you'll see a clear error message in the browser console.</p>\n<p>You'll learn to create two other kinds of classes —\n<a href=\"guide/attribute-directives\">directives</a> and <a href=\"guide/pipes\">pipes</a> —\nthat you must also add to the <code>declarations</code> array.</p>\n<div class=\"alert is-important\">\n<p><strong>Only <em>declarables</em></strong> — <em>components</em>, <em>directives</em> and <em>pipes</em> — belong in the <code>declarations</code> array.\nDo not put any other kind of class in <code>declarations</code>; <em>not</em> <code><a href=\"api/core/NgModule\">NgModule</a></code> classes, <em>not</em> service classes, <em>not</em> model classes.</p>\n</div>\n<a id=\"bootstrap-array\"></a>\n<h3 id=\"the-bootstrap-array\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/bootstrapping#the-bootstrap-array\"><i class=\"material-icons\">link</i></a>The <em>bootstrap</em> array</h3>\n<p>You launch the application by <a href=\"guide/bootstrapping#main\"><em>bootstrapping</em></a> the root <code>AppModule</code>.\nAmong other things, the <em>bootstrapping</em> process creates the component(s) listed in the <code>bootstrap</code> array\nand inserts each one into the browser DOM.</p>\n<p>Each bootstrapped component is the base of its own tree of components.\nInserting a bootstrapped component usually triggers a cascade of component creations that fill out that tree.</p>\n<p>While you can put more than one component tree on a host web page, that's not typical.\nMost applications have only one component tree and they bootstrap a single <em>root</em> component.</p>\n<p>You can call the one <em>root</em> component anything you want but most developers call it <code>AppComponent</code>.</p>\n<p>Which brings us to the <em>bootstrapping</em> process itself.</p>\n<a id=\"main\"></a>\n<l-main-section>\n</l-main-section>\n<h2 id=\"bootstrap-in-maints\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/bootstrapping#bootstrap-in-maints\"><i class=\"material-icons\">link</i></a>Bootstrap in <em>main.ts</em></h2>\n<p>There are many ways to bootstrap an application.\nThe variations depend upon how you want to compile the application and where you want to run it.</p>\n<p>In the beginning, you will compile the application dynamically with the <em>Just-in-Time (JIT)</em> compiler\nand you'll run it in a browser. You can learn about other options later.</p>\n<p>The recommended place to bootstrap a JIT-compiled browser application is in a separate file\nin the <code>src</code> folder named <code>src/main.ts</code></p>\n<code-example path=\"setup/src/main.ts\" title=\"src/main.ts\" linenums=\"false\">\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { AppModule }              from './app/app.module';\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n\n</code-example>\n<p>This code creates a browser platform for dynamic (JIT) compilation and\nbootstraps the <code>AppModule</code> described above.</p>\n<p>The <em>bootstrapping</em> process sets up the execution environment,\ndigs the <em>root</em> <code>AppComponent</code> out of the module's <code>bootstrap</code> array,\ncreates an instance of the component and inserts it within the element tag identified by the component's <code>selector</code>.</p>\n<p>The <code>AppComponent</code> selector — here and in most documentation samples — is <code>my-app</code>\nso Angular looks for a <code>&#x3C;my-app></code> tag in the <code>index.html</code> like this one ...</p>\n<code-example path=\"setup/src/index.html\" region=\"my-app\" title=\"setup/src/index.html\" linenums=\"false\">\n&#x3C;my-app>&#x3C;!-- content managed by Angular -->&#x3C;/my-app>\n\n</code-example>\n<p>... and displays the <code>AppComponent</code> there.</p>\n<p>This file is very stable. Once you've set it up, you may never change it again.</p>\n<l-main-section>\n</l-main-section>\n<h2 id=\"more-about-ngmodules\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/bootstrapping#more-about-ngmodules\"><i class=\"material-icons\">link</i></a>More about NgModules</h2>\n<p>Your initial app has only a single module, the <em>root</em> module.\nAs your app grows, you'll consider subdividing it into multiple \"feature\" modules,\nsome of which can be loaded later (\"lazy loaded\") if and when the user chooses\nto visit those features.</p>\n<p>When you're ready to explore these possibilities, visit the <a href=\"guide/ngmodule\">NgModules</a> guide.</p>\n\n</div>"
}