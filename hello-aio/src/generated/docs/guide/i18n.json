{
  "id": "guide/i18n",
  "title": "Internationalization (i18n)",
  "contents": "\n<div class=\"content\">\n<h1 id=\"internationalization-i18n\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#internationalization-i18n\"><i class=\"material-icons\">link</i></a>Internationalization (i18n)</h1>\n<p>Angular's <em>internationalization</em> (<em>i18n</em>) tools help make your app available in multiple languages.</p>\n<p>Try this <live-example name=\"i18n\" title=\"i18n Example in Spanish\">live example</live-example>\nof a JIT-compiled app, translated into Spanish.</p>\n<a id=\"angular-i18n\"></a>\n<h2 id=\"angular-and-i18n-template-translation\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#angular-and-i18n-template-translation\"><i class=\"material-icons\">link</i></a>Angular and <em>i18n</em> template translation</h2>\n<p>Application internationalization is a challenging, many-faceted effort that\ntakes dedication and enduring commitment.\nAngular's <em>i18n</em> internationalization facilities can help.</p>\n<p>This page describes the <em>i18n</em> tools available to assist translation of component template text\ninto multiple languages.</p>\n<div class=\"l-sub-section\">\n<p>Practitioners of <em>internationalization</em> refer to a translatable text as a \"<em>message</em>\".\nThis page uses the words \"<em>text</em>\" and \"<em>message</em>\" interchangeably and in the combination, \"<em>text message</em>\".</p>\n</div>\n<p>The <em>i18n</em> template translation process has four phases:</p>\n<ol>\n<li>\n<p>Mark static text messages in your component templates for translation.</p>\n</li>\n<li>\n<p>An angular <em>i18n</em> tool extracts the marked messages into an industry standard translation source file.</p>\n</li>\n<li>\n<p>A translator edits that file, translating the extracted text messages into the target language,\nand returns the file to you.</p>\n</li>\n<li>\n<p>The Angular compiler imports the completed translation files,\nreplaces the original messages with translated text, and generates a new version of the application\nin the target language.</p>\n</li>\n</ol>\n<p>You need to build and deploy a separate version of the application for each supported language.</p>\n<a id=\"i18n-attribute\"></a>\n<h2 id=\"mark-text-with-the-i18n-attribute\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#mark-text-with-the-i18n-attribute\"><i class=\"material-icons\">link</i></a>Mark text with the <em>i18n</em> attribute</h2>\n<p>The Angular <code>i18n</code> attribute is a marker for translatable content.\nPlace it on every element tag whose fixed text should be translated.</p>\n<div class=\"alert is-helpful\">\n<p><code>i18n</code> is not an Angular <em>directive</em>.\nIt's a custom <em>attribute</em>, recognized by Angular tools and compilers.\nAfter translation, the compiler removes it.</p>\n</div>\n<p>In the accompanying sample, an <code>&#x3C;h1></code> tag displays a simple English language greeting\nthat you translate into Spanish:</p>\n<code-example path=\"i18n/src/app/app.component.1.html\" region=\"greeting\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;h1>Hello i18n!&#x3C;/h1>\n\n</code-example>\n<p>Add the <code>i18n</code> attribute to the tag to mark it for translation.</p>\n<code-example path=\"i18n/src/app/app.component.1.html\" region=\"i18n-attribute\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;h1 i18n>Hello i18n!&#x3C;/h1>\n\n</code-example>\n<a id=\"help-translator\"></a>\n<h3 id=\"help-the-translator-with-a-description-and-meaning\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#help-the-translator-with-a-description-and-meaning\"><i class=\"material-icons\">link</i></a>Help the translator with a <em>description</em> and <em>meaning</em></h3>\n<p>In order to translate it accurately, the translator may\nneed a description of the message.\nAssign a description to the i18n attribute:</p>\n<code-example path=\"i18n/src/app/app.component.1.html\" region=\"i18n-attribute-desc\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;h1 i18n=\"An introduction header for this sample\">Hello i18n!&#x3C;/h1>\n\n</code-example>\n<p>In order to deliver a correct translation, the translator may need to\nknow the <em>meaning</em> or <em>intent</em> of the text within <em>this particular</em> application context.</p>\n<p>You add context by beginning the string with the <em>meaning</em> and\nseparating it from the <em>description</em> with the <code>|</code> character (<code>&#x3C;meaning>|&#x3C;description></code>):</p>\n<code-example path=\"i18n/src/app/app.component.1.html\" region=\"i18n-attribute-meaning\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;h1 i18n=\"site header|An introduction header for this sample\">Hello i18n!&#x3C;/h1>\n\n</code-example>\n<p>While all appearances of a message with the <em>same</em> meaning have the <em>same</em> translation,\na message with <em>a variety of possible meanings</em> could have different translations.\nThe Angular extraction tool preserves both the <em>meaning</em> and the <em>description</em> in the translation source file\nto facilitate contextually-specific translations.</p>\n<a id=\"custom-id\"></a>\n<h3 id=\"set-a-custom-id-to-improve-search-and-maintenance\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#set-a-custom-id-to-improve-search-and-maintenance\"><i class=\"material-icons\">link</i></a>Set a custom <em>id</em> to improve search and maintenance</h3>\n<p>The angular <em>i18n</em> extractor tool generates a file with a <em>translation unit</em> entry for each <code>i18n</code> attribute in a template. By default, it assigns each translation unit a unique <em>id</em> such as this one:</p>\n<code-example path=\"i18n/src/locale/messages.es.xlf.html\" region=\"generated-id\" linenums=\"false\">\n&#x3C;trans-unit id=\"ba0cc104d3d69bf669f97b8d96a4c5d8d9559aa3\" datatype=\"html\">\n\n</code-example>\n<p>This <em>id</em> is obscure and difficult for humans to read or remember.</p>\n<p>Worse, when you change the translatable text, perhaps to fix a typo,\nthe extractor tool generates a new <em>id</em> for that translation.\nYou will lose the translation unless you update it with the new <em>id</em>.\nThat <a href=\"guide/i18n#maintenance\">complicates maintenance</a>.</p>\n<p>Consider specifying your own, meaningful <em>id</em> in the <code>i18n</code> attribute, <strong>prefixed with <code>@@</code></strong>.</p>\n<code-example path=\"i18n/src/app/app.component.1.html\" region=\"i18n-attribute-solo-id\" title=\"app/app.component.html\" linenums=\"false\">\n&#x3C;h1 i18n=\"@@introductionHeader\">Hello i18n!&#x3C;/h1>\n\n</code-example>\n<p>Now the extractor tool and compiler will generate a translation unit with <em>your custom id</em> and never change it.</p>\n<code-example path=\"i18n/src/locale/messages.es.xlf.html\" region=\"custom-id\" linenums=\"false\">\n&#x3C;trans-unit id=\"introductionHeader\" datatype=\"html\">\n\n</code-example>\n<p>Here is the <code>i18n</code> attribute with a <em>definition</em>, followed by the custom <code>id</code>:</p>\n<code-example path=\"i18n/src/app/app.component.1.html\" region=\"i18n-attribute-id\" title=\"app/app.component.html\" linenums=\"false\">\n&#x3C;h1 i18n=\"An introduction header for this sample@@introductionHeader\">Hello i18n!&#x3C;/h1>\n\n</code-example>\n<p>Here is a <em>meaning</em> and a <em>description</em> and the <em>id</em> at the end:</p>\n<code-example path=\"i18n/src/app/app.component.1.html\" region=\"i18n-attribute-meaning-and-id\" title=\"app/app.component.html\" linenums=\"false\">\n&#x3C;h1 i18n=\"site header|An introduction header for this sample@@introductionHeader\">Hello i18n!&#x3C;/h1>\n\n</code-example>\n<div class=\"l-sub-section\">\n<p>  Be sure to define <em>unique</em> custom ids. If you use the same id for 2 <em>different</em> blocks of text, only the first one will be extracted,\nand its translation used in both blocks of text.</p>\n<p>  For example:</p>\n<code-example language=\"html\">\n  &#x3C;p i18n=\"@@myId\">Hello&#x3C;/p>\n  &#x3C;p i18n=\"@@myId\">Good bye&#x3C;/p>\n</code-example>\n<p>  with the translation:</p>\n<code-example language=\"xml\">\n  &#x3C;trans-unit id=\"myId\" datatype=\"html\">\n    &#x3C;source>Hello&#x3C;/source>\n    &#x3C;target state=\"new\">Hola&#x3C;/target>\n  &#x3C;/trans-unit>\n</code-example>\n<p>  Both <code>&#x3C;p></code> elements will contain the text <code>Hola</code>.</p>\n</div>\n<a id=\"no-element\"></a>\n<h3 id=\"translate-text-without-creating-an-element\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#translate-text-without-creating-an-element\"><i class=\"material-icons\">link</i></a>Translate text without creating an element</h3>\n<p>Suppose there is a stretch of text that you'd like to translate.\nYou could wrap it in a <code>&#x3C;span></code> tag but for some reason (CSS comes to mind)\nyou don't want to create a new DOM element merely to facilitate translation.</p>\n<p>Here are two techniques to try.</p>\n<p>(1) Wrap the text in an <code>&#x3C;ng-container></code> element. The <code>&#x3C;ng-container></code> is never rendered:</p>\n<code-example path=\"i18n/src/app/app.component.html\" region=\"i18n-ng-container\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;ng-container i18n>I don't output any element&#x3C;/ng-container>\n\n</code-example>\n<p>(2) Wrap the text in a pair of HTML comments:</p>\n<code-example path=\"i18n/src/app/app.component.html\" region=\"i18n-with-comment\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;!--i18n: optional meaning|optional description -->\nI don't output any element either\n&#x3C;!--/i18n-->\n\n</code-example>\n<a id=\"translate-attributes\"></a>\n<h2 id=\"add-i18n-translation-attributes\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#add-i18n-translation-attributes\"><i class=\"material-icons\">link</i></a>Add <em>i18n</em> translation attributes</h2>\n<p>You've added an image to your template. You care about accessibility too so you add a <code>title</code> attribute:</p>\n<code-example path=\"i18n/src/app/app.component.1.html\" region=\"i18n-title\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;img [src]=\"logo\" title=\"Angular logo\">\n\n</code-example>\n<p>The <code>title</code> attribute needs to be translated.\nAngular i18n support has more translation attributes in the form,<code>i18n-x</code>, where <code>x</code> is the\nname of the attribute to translate.</p>\n<p>To translate the <code>title</code> on the <code>img</code> tag from the previous example, write:</p>\n<code-example path=\"i18n/src/app/app.component.html\" region=\"i18n-title-translate\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;img [src]=\"logo\" i18n-title title=\"Angular logo\" />\n\n</code-example>\n<p>You can also assign a meaning and a description with the <code>i18n-x=\"&#x3C;meaning>|&#x3C;description>\"</code> syntax.</p>\n<a id=\"cardinality\"></a>\n<h2 id=\"handle-singular-and-plural\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#handle-singular-and-plural\"><i class=\"material-icons\">link</i></a>Handle singular and plural</h2>\n<p>Different languages have different pluralization rules.</p>\n<p>Suppose your application says something about a collection of wolves.\nIn English, depending upon the number of wolves, you could display \"no wolves\", \"one wolf\", \"two wolves\", or \"a wolf pack\".\nOther languages might express the <em>cardinality</em> differently.</p>\n<p>Here's how you could mark up the component template to display the phrase appropriate to the number of wolves:</p>\n<code-example path=\"i18n/src/app/app.component.html\" region=\"i18n-plural\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;span i18n>{wolves, plural, =0 {no wolves} =1 {one wolf} =2 {two wolves} other {a wolf pack}}&#x3C;/span>\n\n</code-example>\n<ul>\n<li>The first parameter is the key. It is bound to the component property (<code>wolves</code>)\nthat determines the number of wolves.</li>\n<li>The second parameter identifies this as a <code>plural</code> translation type.</li>\n<li>The third parameter defines a pluralization pattern consisting of pluralization\ncategories and their matching values.</li>\n</ul>\n<p>Pluralization categories include:</p>\n<ul>\n<li>=0 (or any other number)</li>\n<li>zero</li>\n<li>one</li>\n<li>two</li>\n<li>few</li>\n<li>many</li>\n<li>other</li>\n</ul>\n<p>Put the default <em>English</em> translation in braces (<code>{}</code>) next to the pluralization category.</p>\n<ul>\n<li>\n<p>When you're talking about one wolf, you could write <code>=1 {one wolf}</code>.</p>\n</li>\n<li>\n<p>For zero wolves, you could write <code>=0 {no wolves}</code>.</p>\n</li>\n<li>\n<p>For two wolves, you could write <code>=2 {two wolves}</code>.</p>\n</li>\n</ul>\n<p>You could keep this up for three, four, and every other number of wolves.\nOr you could specify the <strong><code>other</code></strong> category as a catch-all for any unmatched cardinality\nand write something like: <code>other {a wolf pack}</code>.</p>\n<div class=\"l-sub-section\">\n<p>This syntax conforms to the\n<a href=\"http://userguide.icu-project.org/formatparse/messages\" title=\"ICU Message Format\">ICU Message Format</a>\nthat derives from the\n<a href=\"http://cldr.unicode.org/\" title=\"CLDR\">Common Locale Data Repository (CLDR)</a>,\nwhich specifies the\n<a href=\"http://cldr.unicode.org/index/cldr-spec/plural-rules\" title=\"Pluralization Rules\">pluralization rules</a>.</p>\n</div>\n<a id=\"select\"></a>\n<h2 id=\"select-among-alternative-texts\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#select-among-alternative-texts\"><i class=\"material-icons\">link</i></a>Select among alternative texts</h2>\n<p>The application displays different text depending upon whether the hero is male or female.\nThese text alternatives require translation too.</p>\n<p>You can handle this with a <code>select</code> translation.\nA <code>select</code> also follows the\n<a href=\"http://userguide.icu-project.org/formatparse/messages\" title=\"ICU Message Format\">ICU message syntax</a>.\nYou choose among alternative translation based on a string value instead of a number.</p>\n<p>The following format message in the component template binds to the component's <code>gender</code>\nproperty, which outputs either an \"m\" or an \"f\".\nThe message maps those values to the appropriate translation:</p>\n<code-example path=\"i18n/src/app/app.component.html\" region=\"i18n-select\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;span i18n>The hero is {gender, select, m {male} f {female}}&#x3C;/span>\n\n</code-example>\n<h2 id=\"nesting-pluralization-and-selection-expressions\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#nesting-pluralization-and-selection-expressions\"><i class=\"material-icons\">link</i></a>Nesting pluralization and selection expressions</h2>\n<p>You can also nest different ICU expressions together. For example:</p>\n<code-example path=\"i18n/src/app/app.component.html\" region=\"i18n-nested\" title=\"src/app/app.component.html\">\n&#x3C;span i18n>Here we have: {count, plural,\n  =0 {no one}\n  =1 {one {gender, select, male {man} female {woman}}}\n  other {{{heroes.length}} {gender, select, male {men} female {women}}}\n}&#x3C;/span>\n\n</code-example>\n<a id=\"ng-xi18n\"></a>\n<h2 id=\"create-a-translation-source-file-with-the-ng-xi18n-tool\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#create-a-translation-source-file-with-the-ng-xi18n-tool\"><i class=\"material-icons\">link</i></a>Create a translation source file with the <em>ng-xi18n</em> tool</h2>\n<p>Use the <strong><em>ng-xi18n</em> extraction tool</strong> to extract the <code>i18n</code>-marked texts\ninto a translation source file in an industry standard format.</p>\n<p>This is an Angular CLI tool in the <code>@angular/compiler-cli</code> npm package.\nIf you haven't already installed the CLI and its <code>platform-server</code> peer dependency, do so now:</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  npm install @angular/compiler-cli @angular/platform-server --save\n</code-example>\n<p>Open a terminal window at the root of the application project and enter the <code>ng-xi18n</code> command:</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  ./node_modules/.bin/ng-xi18n\n</code-example>\n<div class=\"l-sub-section\">\n<p>Windows users may have to quote the command like this: <code>\"./node_modules/.bin/ng-xi18n\"</code></p>\n</div>\n<p>By default, the tool generates a translation file named <strong><code>messages.xlf</code></strong> in the\n<a href=\"https://en.wikipedia.org/wiki/XLIFF\">XML Localization Interchange File Format (XLIFF, version 1.2)</a>.</p>\n<a id=\"other-formats\"></a>\n<h3 id=\"other-translation-formats\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#other-translation-formats\"><i class=\"material-icons\">link</i></a>Other translation formats</h3>\n<p>Angular i18n tooling supports XLIFF 1.2 and XLIFF 2 as well as the\n<a href=\"http://cldr.unicode.org/development/development-process/design-proposals/xmb\">XML Message Bundle (XMB)</a>.</p>\n<p>You can specify your choice of format <em>explicitly</em> with the <code>--i18nFormat</code> flag as illustrated in these example commands</p>\n<code-example language=\"sh\" class=\"code-shell\">\n./node_modules/.bin/ng-xi18n  --i18nFormat=xlf  --outFile=messages.xlf\n./node_modules/.bin/ng-xi18n  --i18nFormat=xlf2 --outFile=messages.xliff2.xlf\n./node_modules/.bin/ng-xi18n  --i18nFormat=xmb  --outFile=messages.xmb\n</code-example>\n<p>The sample in <em>this</em> guide sticks with the default <em>XLIFF 1.2</em> format.</p>\n<a id=\"ng-xi18n-options\"></a>\n<h3 id=\"other-options\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#other-options\"><i class=\"material-icons\">link</i></a>Other options</h3>\n<p>You may have to specify additional options.\nFor example, if the <code>tsconfig.json</code> TypeScript configuration\nfile is located somewhere other than in the root folder,\nyou must identify the path to it with the <code>-p</code> option:</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  ./node_modules/.bin/ng-xi18n -p path/to/tsconfig.json\n  ./node_modules/.bin/ng-xi18n  --i18nFormat=xmb -p path/to/tsconfig.json\n</code-example>\n<a id=\"npm-i18n-script\"></a>\n<h3 id=\"add-an-npm-script-for-convenience\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#add-an-npm-script-for-convenience\"><i class=\"material-icons\">link</i></a>Add an <em>npm</em> script for convenience</h3>\n<p>Consider adding a convenience shortcut to the <code>scripts</code> section of the <code>package.json</code>\nto make the command easier to remember and run:</p>\n<code-example format=\".\" language=\"sh\">\n  \"scripts\": {\n    \"i18n\": \"ng-xi18n\",\n    ...\n  }\n</code-example>\n<p>Now you can issue command variations such as these:</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  npm run i18n\n  npm run i18n -- -p path/to/tsconfig.json\n  npm run i18n -- --i18nFormat=xmb -p path/to/tsconfig.json\n</code-example>\n<p>Note the <code>--</code> flag before the options.\nIt tells <em>npm</em> to pass every flag thereafter to <code>ng-xi18n</code>.</p>\n<a id=\"translate\"></a>\n<h2 id=\"translate-text-messages\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#translate-text-messages\"><i class=\"material-icons\">link</i></a>Translate text messages</h2>\n<p>The <code>ng-xi18n</code> command generates a translation source file\nin the project root folder named <code>messages.xlf</code>.\nThe next step is to translate the English language template\ntext into the specific language translation\nfiles. The guide sample creates a Spanish translation file.</p>\n<a id=\"localization-folder\"></a>\n<h3 id=\"create-a-localization-folder\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#create-a-localization-folder\"><i class=\"material-icons\">link</i></a>Create a localization folder</h3>\n<p>You will probably translate into more than one other language so it's a good idea\nfor the project structure to reflect your entire internationalization effort.</p>\n<p>One approach is to dedicate a folder to localization and store related assets,\nsuch as internationalization files, there.</p>\n<div class=\"l-sub-section\">\n<p>Localization and internationalization are\n<a href=\"https://en.wikipedia.org/wiki/Internationalization_and_localization\">different but closely related terms</a>.</p>\n</div>\n<p>This guide follows that suggestion. It has a <code>locale</code> folder under <code>src/</code>.\nAssets within the folder carry a filename extension that matches a language-culture code from a\n<a href=\"https://msdn.microsoft.com/en-us/library/ee825488(v=cs.20).aspx\">well-known codeset</a>.</p>\n<p>Make a copy of the <code>messages.xlf</code> file, put it in the <code>locale</code> folder and\nrename it <code>messages.es.xlf</code>for the Spanish language translation.\nDo the same for each target language.</p>\n<a id=\"translate-text-nodes\"></a>\n<h3 id=\"translate-text-nodes\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#translate-text-nodes\"><i class=\"material-icons\">link</i></a>Translate text nodes</h3>\n<p>In the real world, you send the <code>messages.es.xlf</code> file to a Spanish translator who fills in the translations\nusing one of the\n<a href=\"https://en.wikipedia.org/wiki/XLIFF#Editors\">many XLIFF file editors</a>.</p>\n<p>This sample file is easy to translate without a special editor or knowledge of Spanish.\nOpen <code>messages.es.xlf</code> and find the first <code>&#x3C;trans-unit></code> section:</p>\n<code-example path=\"i18n/src/locale/messages.es.xlf.html\" region=\"translated-hello\" title=\"src/locale/messages.es.xlf (<trans-unit>)\" linenums=\"false\">\n&#x3C;trans-unit id=\"introductionHeader\" datatype=\"html\">\n  &#x3C;source>Hello i18n!&#x3C;/source>\n  &#x3C;target>¡Hola i18n!&#x3C;/target>\n  &#x3C;note priority=\"1\" from=\"description\">An introduction header for this sample&#x3C;/note>\n  &#x3C;note priority=\"1\" from=\"meaning\">User welcome&#x3C;/note>\n&#x3C;/trans-unit>\n\n</code-example>\n<p>This XML element represents the translation of the <code>&#x3C;h1></code> greeting tag you marked with the <code>i18n</code> attribute.</p>\n<div class=\"l-sub-section\">\n<p>Note that the translation unit <code>id=introductionHeader</code> is derived from the  <em>custom</em> <code>id</code>](#custom-id \"Set a custom id\") that you set earlier, but <strong>without the <code>@@</code> prefix</strong> required in the source HTML.</p>\n</div>\n<p>Using the <em>source</em>, <em>description</em>, and <em>meaning</em> elements to guide your translation,\nreplace the <code>&#x3C;target/></code> tag with the Spanish greeting:</p>\n<code-example path=\"i18n/src/locale/messages.es.xlf.html\" region=\"translated-hello\" title=\"src/locale/messages.es.xlf (<trans-unit>, after translation)\" linenums=\"false\">\n&#x3C;trans-unit id=\"introductionHeader\" datatype=\"html\">\n  &#x3C;source>Hello i18n!&#x3C;/source>\n  &#x3C;target>¡Hola i18n!&#x3C;/target>\n  &#x3C;note priority=\"1\" from=\"description\">An introduction header for this sample&#x3C;/note>\n  &#x3C;note priority=\"1\" from=\"meaning\">User welcome&#x3C;/note>\n&#x3C;/trans-unit>\n\n</code-example>\n<p>Translate the other text nodes the same way:</p>\n<code-example path=\"i18n/src/locale/messages.es.xlf.html\" region=\"translated-other-nodes\" title=\"src/locale/messages.es.xlf (<trans-unit>)\" linenums=\"false\">\n&#x3C;trans-unit id=\"ba0cc104d3d69bf669f97b8d96a4c5d8d9559aa3\" datatype=\"html\">\n  &#x3C;source>I don&#x26;apos;t output any element&#x3C;/source>\n  &#x3C;target>No genero ningún elemento&#x3C;/target>\n&#x3C;/trans-unit>\n&#x3C;trans-unit id=\"df3cf8b55cb528cf8c00167e0b119bfb828538b5\" datatype=\"html\">\n  &#x3C;source>I don&#x26;apos;t output any element either&#x3C;/source>\n  &#x3C;target>Yo tampoco genero ningún elemento&#x3C;/target>\n  &#x3C;note priority=\"1\" from=\"description\">optional description&#x3C;/note>\n  &#x3C;note priority=\"1\" from=\"meaning\">optional meaning&#x3C;/note>\n&#x3C;/trans-unit>\n&#x3C;trans-unit id=\"701174153757adf13e7c24a248c8a873ac9f5193\" datatype=\"html\">\n  &#x3C;source>Angular logo&#x3C;/source>\n  &#x3C;target>Logo de Angular&#x3C;/target>\n&#x3C;/trans-unit>\n\n</code-example>\n<div class=\"alert is-important\">\n<p><strong>The tool generated the <code>id</code>s for <em>these</em> translation units. Don't touch them.</strong>\nEach <code>id</code> depends upon the content of the message and its assigned meaning.\nChange either factor and the <code>id</code> changes as well.\nSee the <strong><a href=\"guide/i18n#maintenance\">translation file maintenance discussion</a></strong>.</p>\n<p>This is why you should <strong><a href=\"guide/i18n#custom-id\" title=\"Set a custom id\">specify custom ids</a></strong> and avoid tool generated ids.</p>\n</div>\n<a id=\"translate-plural-select\"></a>\n<h2 id=\"translate-plural-and-select\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#translate-plural-and-select\"><i class=\"material-icons\">link</i></a>Translate <em>plural</em> and <em>select</em></h2>\n<p>Translating <em>plural</em> and <em>select</em> messages is a little tricky.</p>\n<p>The <code>&#x3C;source></code> tag is empty for <code>plural</code> and <code>select</code> translation\nunits, which makes them hard to correlate with the original template.\nThe <code>XLIFF</code> format doesn't yet support the ICU rules.\nHowever, the <code>XMB</code> format does support the ICU rules.</p>\n<p>You'll just have to look for them in relation to other translation units that you recognize from elsewhere in the source template.\nIn this example, you know the translation unit for the <code>select</code> must be just below the translation unit for the logo.</p>\n<a id=\"translate-plural\"></a>\n<h3 id=\"translate-plural\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#translate-plural\"><i class=\"material-icons\">link</i></a>Translate <em>plural</em></h3>\n<p>To translate a <code>plural</code>, translate its ICU format match values:</p>\n<code-example path=\"i18n/src/locale/messages.es.xlf.html\" region=\"translated-plural\" title=\"src/locale/messages.es.xlf (<trans-unit>)\" linenums=\"false\">\n&#x3C;trans-unit id=\"6e22e74e8cbd3095560cfe08993c4fdfa3c50eb0\" datatype=\"html\">\n  &#x3C;source/>\n  &#x3C;target>{wolves, plural, =0 {ningún lobo} =1 {un lobo} =2 {dos lobos} other {una horda de lobos}}&#x3C;/target>\n&#x3C;/trans-unit>\n\n</code-example>\n<a id=\"translate-select\"></a>\n<h3 id=\"translate-select\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#translate-select\"><i class=\"material-icons\">link</i></a>Translate <em>select</em></h3>\n<p>The <code>select</code> behaves a little differently. Here again is the ICU format message in the component template:</p>\n<code-example path=\"i18n/src/app/app.component.html\" region=\"i18n-select\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;span i18n>The hero is {gender, select, m {male} f {female}}&#x3C;/span>\n\n</code-example>\n<p>The extraction tool broke that into <em>two</em> translation units.</p>\n<p>The first unit contains the text that was <em>outside</em> the <code>select</code>.\nIn place of the <code>select</code> is a placeholder, <code>&#x3C;x id=\"ICU\"></code>, that represents the <code>select</code> message.\nTranslate the text and leave the placeholder where it is.</p>\n<code-example path=\"i18n/src/locale/messages.es.xlf.html\" region=\"translate-select-1\" title=\"src/locale/messages.es.xlf (<trans-unit>)\" linenums=\"false\">\n&#x3C;trans-unit id=\"61cafedb85466ab789b3ae817bba1a545468ee1c\" datatype=\"html\">\n  &#x3C;source>The hero is &#x3C;x id=\"ICU\"/>&#x3C;/source>\n  &#x3C;target>El heroe es &#x3C;x id=\"ICU\"/>&#x3C;/target>\n&#x3C;/trans-unit>\n\n</code-example>\n<p>The second translation unit, immediately below the first one, contains the <code>select</code> message. Translate that.</p>\n<code-example path=\"i18n/src/locale/messages.es.xlf.html\" region=\"translate-select-2\" title=\"src/locale/messages.es.xlf (<trans-unit>)\" linenums=\"false\">\n&#x3C;trans-unit id=\"14c7055d67771a3b7b6888d282ac092896be06b6\" datatype=\"html\">\n  &#x3C;source/>\n  &#x3C;target>{gender, select, m {hombre} f {mujer}}&#x3C;/target>\n&#x3C;/trans-unit>\n\n</code-example>\n<p>Here they are together, after translation:</p>\n<code-example path=\"i18n/src/locale/messages.es.xlf.html\" region=\"translated-select\" title=\"src/locale/messages.es.xlf (<trans-unit>)\" linenums=\"false\">\n&#x3C;trans-unit id=\"61cafedb85466ab789b3ae817bba1a545468ee1c\" datatype=\"html\">\n  &#x3C;source>The hero is &#x3C;x id=\"ICU\"/>&#x3C;/source>\n  &#x3C;target>El heroe es &#x3C;x id=\"ICU\"/>&#x3C;/target>\n&#x3C;/trans-unit>\n&#x3C;trans-unit id=\"14c7055d67771a3b7b6888d282ac092896be06b6\" datatype=\"html\">\n  &#x3C;source/>\n  &#x3C;target>{gender, select, m {hombre} f {mujer}}&#x3C;/target>\n&#x3C;/trans-unit>\n\n</code-example>\n<h3 id=\"translate-a-nested-expression\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#translate-a-nested-expression\"><i class=\"material-icons\">link</i></a>Translate a nested expression</h3>\n<p>A nested expression is not different from the previous ones. As in the previous example, we have <em>two</em> translation units.</p>\n<p>The first one contains the text outside the nested expression:</p>\n<code-example path=\"i18n/src/locale/messages.es.xlf.html\" region=\"translate-nested-1\" title=\"src/locale/messages.es.xlf (<trans-unit>)\" linenums=\"false\">\n&#x3C;trans-unit id=\"2cf9a08c5b6e3612572a2a36dd46563013848382\" datatype=\"html\">\n  &#x3C;source>Here we have: &#x3C;x id=\"ICU\"/>&#x3C;/source>\n  &#x3C;target>Aquí tenemos: &#x3C;x id=\"ICU\"/>&#x3C;/target>\n&#x3C;/trans-unit>\n\n</code-example>\n<p>The second unit contains the complete nested expression:</p>\n<code-example path=\"i18n/src/locale/messages.es.xlf.html\" region=\"translate-nested-2\" title=\"src/locale/messages.es.xlf (<trans-unit>)\" linenums=\"false\">\n&#x3C;trans-unit id=\"db1b921b55301ce3957e382090729562002da036\" datatype=\"html\">\n  &#x3C;source/>\n  &#x3C;target>\n    {count, plural,\n      =0 { nadie }\n      =1 {{gender, select, m {un hombre} f {una mujer}}}\n      other {{{heroes.length}} {gender, select, m {hombres} f {mujeres}}}\n    }\n  &#x3C;/target>\n&#x3C;/trans-unit>\n\n</code-example>\n<p>And both together:</p>\n<code-example path=\"i18n/src/locale/messages.es.xlf.html\" region=\"translate-nested\" title=\"src/locale/messages.es.xlf (<trans-unit>)\" linenums=\"false\">\n&#x3C;trans-unit id=\"2cf9a08c5b6e3612572a2a36dd46563013848382\" datatype=\"html\">\n  &#x3C;source>Here we have: &#x3C;x id=\"ICU\"/>&#x3C;/source>\n  &#x3C;target>Aquí tenemos: &#x3C;x id=\"ICU\"/>&#x3C;/target>\n&#x3C;/trans-unit>\n&#x3C;trans-unit id=\"db1b921b55301ce3957e382090729562002da036\" datatype=\"html\">\n  &#x3C;source/>\n  &#x3C;target>\n    {count, plural,\n      =0 { nadie }\n      =1 {{gender, select, m {un hombre} f {una mujer}}}\n      other {{{heroes.length}} {gender, select, m {hombres} f {mujeres}}}\n    }\n  &#x3C;/target>\n&#x3C;/trans-unit>\n\n</code-example>\n<p>The entire template translation is complete. It's\ntime to incorporate that translation into the application.</p>\n<p><a id=\"app-pre-translation\"></a></p>\n<h3 id=\"the-app-before-translation\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#the-app-before-translation\"><i class=\"material-icons\">link</i></a>The app before translation</h3>\n<p>When the previous steps finish, the sample app <em>and</em> its translation file are as follows:</p>\n<code-tabs>\n  <code-pane title=\"src/app/app.component.html\" path=\"i18n/src/app/app.component.html\">\n&#x3C;h1 i18n=\"User welcome|An introduction header for this sample@@introductionHeader\">\n  Hello i18n!\n&#x3C;/h1>\n\n&#x3C;ng-container i18n>I don't output any element&#x3C;/ng-container>\n\n&#x3C;br />\n\n&#x3C;!--i18n: optional meaning|optional description -->\nI don't output any element either\n&#x3C;!--/i18n-->\n\n&#x3C;br />\n\n&#x3C;img [src]=\"logo\" i18n-title title=\"Angular logo\" />\n&#x3C;br>\n&#x3C;button (click)=\"inc(1)\">+&#x3C;/button> &#x3C;button (click)=\"inc(-1)\">-&#x3C;/button>\n&#x3C;span i18n>{wolves, plural, =0 {no wolves} =1 {one wolf} =2 {two wolves} other {a wolf pack}}&#x3C;/span>\n({{wolves}})\n&#x3C;br>&#x3C;br>\n&#x3C;button (click)=\"male()\">&#x26;#9794;&#x3C;/button> &#x3C;button (click)=\"female()\">&#x26;#9792;&#x3C;/button>\n&#x3C;span i18n>The hero is {gender, select, m {male} f {female}}&#x3C;/span>\n&#x3C;br>&#x3C;br>\n&#x3C;span i18n>Here we have: {count, plural,\n  =0 {no one}\n  =1 {one {gender, select, male {man} female {woman}}}\n  other {{{heroes.length}} {gender, select, male {men} female {women}}}\n}&#x3C;/span>\n\n\n</code-pane>\n  <code-pane title=\"src/app/app.component.ts\" path=\"i18n/src/app/app.component.ts\">\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'my-app',\n  templateUrl: './app.component.html'\n})\nexport class AppComponent {\n  wolves = 0;\n  gender = 'f';\n  fly = true;\n  logo = 'https://angular.io/resources/images/logos/angular/angular.png';\n  count = 3;\n  heroes: string[] = ['Magneta', 'Celeritas', 'Dynama'];\n  inc(i: number) {\n    this.wolves = Math.min(5, Math.max(0, this.wolves + i));\n  }\n  male()   { this.gender = 'm'; }\n  female() { this.gender = 'f'; }\n}\n\n\n\n</code-pane>\n  <code-pane title=\"src/app/app.module.ts\" path=\"i18n/src/app/app.module.ts\">\nimport { NgModule }      from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppComponent }  from './app.component';\n\n@NgModule({\n  imports:      [ BrowserModule ],\n  declarations: [ AppComponent ],\n  bootstrap:    [ AppComponent ]\n})\n\nexport class AppModule { }\n\n\n</code-pane>\n  <code-pane title=\"src/main.ts\" path=\"i18n/src/main.1.ts\">\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n\n</code-pane>\n  <code-pane title=\"src/locale/messages.es.xlf\" path=\"i18n/src/locale/messages.es.xlf.html\">\n&#x3C;?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n&#x3C;xliff version=\"1.2\" xmlns=\"urn:oasis:names:tc:xliff:document:1.2\">\n  &#x3C;file source-language=\"en\" datatype=\"plaintext\" original=\"ng2.template\">\n    &#x3C;body>\n      &#x3C;trans-unit id=\"introductionHeader\" datatype=\"html\">\n        &#x3C;source>Hello i18n!&#x3C;/source>\n        &#x3C;target>¡Hola i18n!&#x3C;/target>\n        &#x3C;note priority=\"1\" from=\"description\">An introduction header for this sample&#x3C;/note>\n        &#x3C;note priority=\"1\" from=\"meaning\">User welcome&#x3C;/note>\n      &#x3C;/trans-unit>\n      &#x3C;trans-unit id=\"ba0cc104d3d69bf669f97b8d96a4c5d8d9559aa3\" datatype=\"html\">\n        &#x3C;source>I don&#x26;apos;t output any element&#x3C;/source>\n        &#x3C;target>No genero ningún elemento&#x3C;/target>\n      &#x3C;/trans-unit>\n      &#x3C;trans-unit id=\"df3cf8b55cb528cf8c00167e0b119bfb828538b5\" datatype=\"html\">\n        &#x3C;source>I don&#x26;apos;t output any element either&#x3C;/source>\n        &#x3C;target>Yo tampoco genero ningún elemento&#x3C;/target>\n        &#x3C;note priority=\"1\" from=\"description\">optional description&#x3C;/note>\n        &#x3C;note priority=\"1\" from=\"meaning\">optional meaning&#x3C;/note>\n      &#x3C;/trans-unit>\n      &#x3C;trans-unit id=\"701174153757adf13e7c24a248c8a873ac9f5193\" datatype=\"html\">\n        &#x3C;source>Angular logo&#x3C;/source>\n        &#x3C;target>Logo de Angular&#x3C;/target>\n      &#x3C;/trans-unit>\n      &#x3C;trans-unit id=\"6e22e74e8cbd3095560cfe08993c4fdfa3c50eb0\" datatype=\"html\">\n        &#x3C;source/>\n        &#x3C;target>{wolves, plural, =0 {ningún lobo} =1 {un lobo} =2 {dos lobos} other {una horda de lobos}}&#x3C;/target>\n      &#x3C;/trans-unit>\n      &#x3C;trans-unit id=\"61cafedb85466ab789b3ae817bba1a545468ee1c\" datatype=\"html\">\n        &#x3C;source>The hero is &#x3C;x id=\"ICU\"/>&#x3C;/source>\n        &#x3C;target>El heroe es &#x3C;x id=\"ICU\"/>&#x3C;/target>\n      &#x3C;/trans-unit>\n      &#x3C;trans-unit id=\"14c7055d67771a3b7b6888d282ac092896be06b6\" datatype=\"html\">\n        &#x3C;source/>\n        &#x3C;target>{gender, select, m {hombre} f {mujer}}&#x3C;/target>\n      &#x3C;/trans-unit>\n      &#x3C;trans-unit id=\"db04527df562d12c8607eab2b5723ef6e2066ba0\" datatype=\"html\">\n        &#x3C;source>Here we have: &#x3C;x id=\"ICU\"/>&#x3C;/source>\n        &#x3C;target/>\n      &#x3C;/trans-unit>\n      &#x3C;trans-unit id=\"000058be4e6f08b685d1d0a70f9da68067df7379\" datatype=\"html\">\n        &#x3C;source/>\n        &#x3C;target/>\n      &#x3C;/trans-unit>\n      &#x3C;trans-unit id=\"2cf9a08c5b6e3612572a2a36dd46563013848382\" datatype=\"html\">\n        &#x3C;source>Here we have: &#x3C;x id=\"ICU\"/>&#x3C;/source>\n        &#x3C;target>Aquí tenemos: &#x3C;x id=\"ICU\"/>&#x3C;/target>\n      &#x3C;/trans-unit>\n      &#x3C;trans-unit id=\"db1b921b55301ce3957e382090729562002da036\" datatype=\"html\">\n        &#x3C;source/>\n        &#x3C;target>\n          {count, plural,\n            =0 { nadie }\n            =1 {{gender, select, m {un hombre} f {una mujer}}}\n            other {{{heroes.length}} {gender, select, m {hombres} f {mujeres}}}\n          }\n        &#x3C;/target>\n      &#x3C;/trans-unit>\n    &#x3C;/body>\n  &#x3C;/file>\n&#x3C;/xliff>\n\n\n\n</code-pane>\n</code-tabs>\n<a id=\"merge\"></a>\n<h2 id=\"merge-the-completed-translation-file-into-the-app\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#merge-the-completed-translation-file-into-the-app\"><i class=\"material-icons\">link</i></a>Merge the completed translation file into the app</h2>\n<p>To merge the translated text into component templates,\ncompile the application with the completed translation file.\nThe process is the same whether the file is in <code>.xlf</code> format or\nin another format that Angular understands, such as <code>.xtb</code>.</p>\n<p>You provide the Angular compiler with three new pieces of information:</p>\n<ul>\n<li>The translation file.</li>\n<li>The translation file format.</li>\n<li>The   <a href=\"https://en.wikipedia.org/wiki/XLIFF\"><em>Locale ID</em></a>\n(<code>es</code> or <code>en-US</code> for instance).</li>\n</ul>\n<p><em>How</em> you provide this information depends upon whether you compile with\nthe JIT (<em>Just-in-Time</em>) compiler or the AOT (<em>Ahead-of-Time</em>) compiler.</p>\n<ul>\n<li>With <a href=\"guide/i18n#jit\">JIT</a>, you provide the information at bootstrap time.</li>\n<li>With <a href=\"guide/i18n#aot\">AOT</a>, you pass the information as <code>ngc</code> options.</li>\n</ul>\n<a id=\"jit\"></a>\n<h3 id=\"merge-with-the-jit-compiler\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#merge-with-the-jit-compiler\"><i class=\"material-icons\">link</i></a>Merge with the JIT compiler</h3>\n<p>The JIT compiler compiles the application in the browser as the application loads.\nTranslation with the JIT compiler is a dynamic process of:</p>\n<ol>\n<li>Determining the language version for the current user.</li>\n<li>Importing the appropriate language translation file as a string constant.</li>\n<li>Creating corresponding translation providers to guide the JIT compiler.</li>\n<li>Bootstrapping the application with those providers.</li>\n</ol>\n<p>Open <code>index.html</code> and revise the launch script as follows:</p>\n<code-example path=\"i18n/src/index.html\" region=\"i18n\" title=\"index.html (launch script)\" linenums=\"false\">\n&#x3C;script>\n  // Get the locale id somehow\n  document.locale = 'es';\n\n  // Map to the text plugin\n  System.config({\n    map: {\n      text: 'systemjs-text-plugin.js'\n    }\n  });\n\n  // Launch the app\n  System.import('main.js').catch(function(err){ console.error(err); });\n&#x3C;/script>\n\n</code-example>\n<p>In this sample, the user's language is hard-coded as a global <code>document.locale</code> variable\nin the <code>index.html</code>.</p>\n<a id=\"text-plugin\"></a>\n<h3 id=\"systemjs-text-plugin\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#systemjs-text-plugin\"><i class=\"material-icons\">link</i></a>SystemJS text plugin</h3>\n<div class=\"alert is-important\">\n<p>  This plugin only applies to an application using SystemJS. If you are using the Angular CLI, please refer to their\n<a href=\"https://github.com/angular/angular-cli/wiki/xi18n\">docs</a>.</p>\n</div>\n<p>Notice the SystemJS mapping of <code>text</code> to a <code>systemjs-text-plugin.js</code>.\nWith the help of a text plugin, SystemJS can read any file as raw text and\nreturn the contents as a string.\nYou'll need it to import the language translation file.</p>\n<p>SystemJS doesn't ship with a raw text plugin but it's easy to add.\nCreate the following <code>systemjs-text-plugin.js</code> in the <code>src/</code> folder:</p>\n<code-example path=\"i18n/src/systemjs-text-plugin.js\" title=\"src/systemjs-text-plugin.js\" linenums=\"false\">\n/*\n  SystemJS Text plugin from\n  https://github.com/systemjs/plugin-text/blob/master/text.js\n*/\nexports.translate = function (load) {\n  if (this.builder &#x26;&#x26; this.transpiler) {\n    load.metadata.format = 'esm';\n    return 'exp' + 'ort var __useDefault = true; exp' + 'ort default ' + JSON.stringify(load.source) + ';';\n  }\n\n  load.metadata.format = 'amd';\n  return 'def' + 'ine(function() {\\nreturn ' + JSON.stringify(load.source) + ';\\n});';\n}\n\n\n</code-example>\n<a id=\"create-translation-providers\"></a>\n<h3 id=\"create-translation-providers\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#create-translation-providers\"><i class=\"material-icons\">link</i></a>Create translation providers</h3>\n<p>Three providers tell the JIT compiler how to translate the template texts for a particular language\nwhile compiling the application:</p>\n<ul>\n<li><code><a href=\"api/core/TRANSLATIONS\">TRANSLATIONS</a></code> is a string containing the content of the translation file.</li>\n<li><code><a href=\"api/core/TRANSLATIONS_FORMAT\">TRANSLATIONS_FORMAT</a></code> is the format of the file: <code>xlf</code>, <code>xlf2</code>, or <code>xtb</code>.</li>\n<li><code><a href=\"api/core/LOCALE_ID\">LOCALE_ID</a></code> is the locale of the target language.</li>\n</ul>\n<p>The <code>getTranslationProviders()</code> function in the following <code>src/app/i18n-providers.ts</code>\ncreates those providers based on the user's <em>locale</em>\nand the corresponding translation file:</p>\n<code-example path=\"i18n/src/app/i18n-providers.ts\" region=\"without-missing-translation\" title=\"src/app/i18n-providers.ts\">\nimport { TRANSLATIONS, TRANSLATIONS_FORMAT, LOCALE_ID, MissingTranslationStrategy } from '@angular/core';\nimport { CompilerConfig } from '@angular/compiler';\n\nexport function getTranslationProviders(): Promise&#x3C;Object[]> {\n\n  // Get the locale id from the global\n  const locale = document['locale'] as string;\n\n  // return no providers if fail to get translation file for locale\n  const noProviders: Object[] = [];\n\n  // No locale or U.S. English: no translation providers\n  if (!locale || locale === 'en-US') {\n    return Promise.resolve(noProviders);\n  }\n\n  // Ex: 'locale/messages.es.xlf`\n  const translationFile = `./locale/messages.${locale}.xlf`;\n\n  return getTranslationsWithSystemJs(translationFile)\n    .then( (translations: string ) => [\n      { provide: TRANSLATIONS, useValue: translations },\n      { provide: TRANSLATIONS_FORMAT, useValue: 'xlf' },\n      { provide: LOCALE_ID, useValue: locale },\n    ])\n    .catch(() => noProviders); // ignore if file not found\n}\n\ndeclare var System: any;\n\nfunction getTranslationsWithSystemJs(file: string) {\n  return System.import(file + '!text'); // relies on text plugin\n}\n\n</code-example>\n<ol>\n<li>\n<p>It gets the locale from the global <code>document.locale</code> variable that was set in <code>index.html</code>.</p>\n</li>\n<li>\n<p>If there is no locale or the language is U.S. English (<code>en-US</code>), there is no need to translate.\nThe function returns an empty <code>noProviders</code> array as a <code>Promise</code>.\nIt must return a <code>Promise</code> because this function could read a translation file asynchronously from the server.</p>\n</li>\n<li>\n<p>It creates a transaction filename from the locale according to the name and location convention\n<a href=\"guide/i18n#localization-folder\">described earlier</a>.</p>\n</li>\n<li>\n<p>The <code>getTranslationsWithSystemJs()</code> method reads the translation and returns the contents as a string.\nNotice that it appends <code>!text</code> to the filename, telling SystemJS to use the <a href=\"guide/i18n#text-plugin\">text plugin</a>.</p>\n</li>\n<li>\n<p>The callback composes a providers array with the three translation providers.</p>\n</li>\n<li>\n<p>Finally, <code>getTranslationProviders()</code> returns the entire effort as a promise.</p>\n</li>\n</ol>\n<div class=\"alert is-important\">\n<p>  The <code><a href=\"api/core/LOCALE_ID\">LOCALE_ID</a></code> has to be a valid locale id as explained in <a href=\"http://userguide.icu-project.org/locale\">here</a>.</p>\n</div>\n<a id=\"bootstrap-the-app\"></a>\n<h3 id=\"bootstrap-with-translation-providers\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#bootstrap-with-translation-providers\"><i class=\"material-icons\">link</i></a>Bootstrap with translation providers</h3>\n<p>The Angular <code>bootstrapModule()</code> method has a second <em>options</em> parameter\nthat can influence the behavior of the compiler.</p>\n<p>You'll create an <em>options</em> object with the translation providers from <code>getTranslationProviders()</code>\nand pass it to <code>bootstrapModule</code>.\nOpen the <code>src/main.ts</code> and modify the bootstrap code as follows:</p>\n<code-example path=\"i18n/src/main.ts\" title=\"src/main.ts\" linenums=\"false\">\nimport { platformBrowserDynamic }  from '@angular/platform-browser-dynamic';\nimport { getTranslationProviders } from './app/i18n-providers';\n\nimport { AppModule } from './app/app.module';\n\ngetTranslationProviders().then(providers => {\n  const options = { providers };\n  platformBrowserDynamic().bootstrapModule(AppModule, options);\n});\n\n\n</code-example>\n<p>Notice that it waits for the <code>getTranslationProviders()</code> promise to resolve before\nbootstrapping the app.</p>\n<p>The app is now <em>internationalized</em> for English and Spanish and there is a clear path for adding\nmore languages.</p>\n<a id=\"aot\"></a>\n<h3 id=\"internationalization-with-the-aot-compiler\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#internationalization-with-the-aot-compiler\"><i class=\"material-icons\">link</i></a><em>Internationalization</em> with the AOT compiler</h3>\n<p>The JIT compiler translates the application into the target language\nwhile compiling dynamically in the browser.\nThat's flexible but may not be fast enough for your users.</p>\n<p>The AOT (<em>Ahead-of-Time</em>) compiler is part of a build process that\nproduces a small, fast, ready-to-run application package.\nWhen you internationalize with the AOT compiler, you pre-build\na separate application package for each\nlanguage. Then in the host web page, in this case <code>index.html</code>,\nyou determine which language the user needs\nand serve the appropriate application package.</p>\n<p>This guide doesn't cover how to build multiple application packages and\nserve them according to the user's language preference.\nIt does explain the few steps necessary to tell the AOT compiler to apply a translations file.</p>\n<p>Internationalization with the AOT compiler requires\nsome setup specifically for AOT compilation.\nStart with the application project as shown\n<a href=\"guide/i18n#app-pre-translation\">just before merging the translation file</a>\nand refer to the <a href=\"guide/aot-compiler\">AOT guide</a> to make it <em>AOT-ready</em>.</p>\n<p>Next, issue an <code>ngc</code> compile command for each supported language, including English.\nThe result is a separate version of the application for each language.</p>\n<p>Tell AOT how to translate by adding three options to the <code>ngc</code> command:</p>\n<ul>\n<li><code>--i18nFile</code>: the path to the translation file.</li>\n<li><code>--locale</code>: the name of the locale.</li>\n<li><code>--i18nFormat</code>: the format of the localization file.</li>\n</ul>\n<p>For this sample, the Spanish language command would be:</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  ./node_modules/.bin/ngc --i18nFile=./locale/messages.es.xlf --locale=es --i18nFormat=xlf\n</code-example>\n<div class=\"l-sub-section\">\n<p>Windows users may have to quote the command:</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  \"./node_modules/.bin/ngc\" --i18nFile=./locale/messages.es.xlf --locale=es --i18nFormat=xlf\n</code-example>\n</div>\n<h3 id=\"report-missing-translations\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#report-missing-translations\"><i class=\"material-icons\">link</i></a>Report missing translations</h3>\n<p>If you forgot to provide a translation, the build will succeed with a warning that you might easily overlook.\nYou can configure the Angular compiler for different \"missing translation\" behaviors:</p>\n<ul>\n<li>Error</li>\n<li>Warning (default)</li>\n<li>Ignore</li>\n</ul>\n<p>To change the behavior in JIT, you can use the following configuration:</p>\n<code-example language=\"typescript\">\n  { provide: CompilerConfig, useValue: new CompilerConfig({ missingTranslation: MissingTranslationStrategy.Error }) }\n</code-example>\n<p>A good place to use it is the translation providers:</p>\n<code-example path=\"i18n/src/app/i18n-providers.ts\" region=\"missing-translation\" title=\"src/app/i18n-providers.ts\">\nreturn getTranslationsWithSystemJs(translationFile)\n  .then( (translations: string ) => [\n    { provide: TRANSLATIONS, useValue: translations },\n    { provide: TRANSLATIONS_FORMAT, useValue: 'xlf' },\n    { provide: LOCALE_ID, useValue: locale },\n    { provide: CompilerConfig, useValue: new CompilerConfig({ missingTranslation: MissingTranslationStrategy.Error }) }\n  ])\n  .catch(() => noProviders); // ignore if file not found\n\n</code-example>\n<p>To change the behavior in AOT, add the <code>--missingTranslation</code> flag to the compilation command:</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  ./node_modules/.bin/ngc --i18nFile=./locale/messages.es.xlf --locale=es --i18nFormat=xlf --missingTranslation=error\n</code-example>\n<a id=\"maintenance\"></a>\n<h2 id=\"file-maintenance-and-id-changes\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n#file-maintenance-and-id-changes\"><i class=\"material-icons\">link</i></a>File maintenance and <em>id</em> changes</h2>\n<p>As the application evolves, you will change the <em>i18n</em> markup\nand re-run the <code>ng-xi18n</code> extraction tool many times.\nThe <em>new</em> markup that you add is not a problem.\nBut the <code>id</code> <em>can be a serious problem!</em></p>\n<p>If the <code>id</code> is generated by the tool, <em>most</em> changes to <em>existing</em> markup\ncause the tool to generate a <em>new</em> <code>id</code> for the affected translation unit.</p>\n<p>After an <code>id</code> changes, the translation files are no longer in sync.\nBecause of that, you get some warning messages during re-compilation.\nThe warning messages identify that some translations are missing, but they don't tell you which\nold <code>ids</code> are no longer valid.</p>\n<p>If you use a <a href=\"guide/i18n#custom-id\" title=\"Set a custom id\">custom id</a>,\nthe tooling preserves the custom <code>id</code> as you make changes to the corresponding translation unit. <strong>Use custom <em>ids</em> unless you have a very good reason to do otherwise.</strong></p>\n<p>Whether you use generated or custom <code>ids</code>, <strong>always commit all translation message files to source control</strong>,\nespecially the English source <code>messages.xlf</code>.\nThe difference between the old and the new <code>messages.xlf</code> file\nwill help you find and update <code>ids</code> and other changes across your translation files.</p>\n\n</div>"
}