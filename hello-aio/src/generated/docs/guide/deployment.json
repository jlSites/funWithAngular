{
  "id": "guide/deployment",
  "title": "Deployment",
  "contents": "\n<div class=\"content\">\n<h1 id=\"deployment\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#deployment\"><i class=\"material-icons\">link</i></a>Deployment</h1>\n<p>This page describes tools and techniques for deploy and optimize your Angular application.</p>\n<a id=\"toc\"></a>\n<a id=\"overview\"></a>\n<h2 id=\"overview\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#overview\"><i class=\"material-icons\">link</i></a>Overview</h2>\n<p>This guide describes techniques for preparing and deploying an Angular application to a server running remotely.\nThe techniques progress from <em>easy but suboptimal</em> to <em>more optimal and more involved</em>.</p>\n<ul>\n<li>\n<p>The <a href=\"guide/deployment#dev-deploy\" title=\"Simplest deployment possible\">simple way</a> is to copy the development environment to the server.</p>\n</li>\n<li>\n<p><a href=\"guide/deployment#aot\" title=\"AOT Compilation\"><em>Ahead of Time</em> compilation (AOT)</a> is the first of\n<a href=\"guide/deployment#optimize\">several optimization strategies</a>.\nYou'll also want to read the <a href=\"guide/aot-compiler\" title=\"AOT Cookbook\">detailed instructions in the AOT Cookbook</a>.</p>\n</li>\n<li>\n<p><a href=\"guide/deployment#webpack\" title=\"Webpack Optimization\">Webpack</a> is a popular general purpose packaging tool with a rich ecosystem, including plugins for AOT.\nThe Angular <a href=\"guide/webpack\" title=\"Webpack: an introduction\">webpack guide</a> can get you started and\n<em>this</em> page provides additional optimization advice, but you'll probably have to learn more about webpack on your own.</p>\n</li>\n<li>\n<p>The <a href=\"guide/deployment#angular-configuration\" title=\"Angular configuration\">Angular configuration</a> section calls attention to\nspecific client application changes that could improve performance.</p>\n</li>\n<li>\n<p>The <a href=\"guide/deployment#server-configuration\" title=\"Server configuration\">Server configuration</a> section describes\nserver-side changes that may be necessary, <em>no matter how you deploy the application</em>.</p>\n</li>\n</ul>\n<a id=\"dev-deploy\"></a>\n<h2 id=\"simplest-deployment-possible\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#simplest-deployment-possible\"><i class=\"material-icons\">link</i></a>Simplest deployment possible</h2>\n<p>The simplest way to deploy the app is to publish it to a web server\ndirectly out of the development environment.</p>\n<p>It's already running locally. You'll just copy it, almost <em>as is</em>,\nto a non-local server that others can reach.</p>\n<ol>\n<li>\n<p>Copy <em>everything</em> (or <a href=\"guide/deployment#node-modules\" title=\"Loading npm packages from the web\"><em>almost</em> everything</a>)\nfrom the local project folder to a folder on the server.</p>\n</li>\n<li>\n<p>If you're serving the app out of a subfolder,\nedit a version of <code>index.html</code> to set the <code>&#x3C;base href></code> appropriately.\nFor example, if the URL to <code>index.html</code> is <code>www.mysite.com/my/app/</code>, set the <em>base href</em>  to\n<code>&#x3C;base href=\"/my/app/\"></code>.\nOtherwise, leave it alone.\n<a href=\"guide/deployment#base-tag\">More on this below</a>.</p>\n</li>\n<li>\n<p>Configure the server to redirect requests for missing files to <code>index.html</code>.\n<a href=\"guide/deployment#fallback\">More on this below</a>.</p>\n</li>\n<li>\n<p>Enable production mode as <a href=\"guide/deployment#enable-prod-mode\">described below</a> (optional).</p>\n</li>\n</ol>\n<p>That's the simplest deployment you can do.</p>\n<div class=\"alert is-helpful\">\n<p>This is <em>not</em> a production deployment. It's not optimized and it won't be fast for users.\nIt might be good enough for sharing your progress and ideas internally with managers, teammates, and other stakeholders.\nBe sure to read about <a href=\"guide/deployment#optimize\" title=\"Optimizing for production\">optimizing for production</a> below.</p>\n</div>\n<a id=\"node-modules\"></a>\n<h3 id=\"load-npm-package-files-from-the-web-systemjs\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#load-npm-package-files-from-the-web-systemjs\"><i class=\"material-icons\">link</i></a>Load npm package files from the web (SystemJS)</h3>\n<p>The <code>node_modules</code> folder of <em>npm packages</em> contains much more code\nthan is needed to actually run your app in the browser.\nThe <code>node_modules</code> for the Quickstart installation is typically 20,500+ files and 180+ MB.\nThe application itself requires a tiny fraction of that to run.</p>\n<p>It takes a long time to upload all of that useless bulk and\nusers will wait unnecessarily while library files download piecemeal.</p>\n<p>Load the few files you need from the web instead.</p>\n<p>(1) Make a copy of <code>index.html</code> for deployment and replace all <code>node_module</code> scripts\nwith versions that load from the web. It might look like this.</p>\n<code-example path=\"deployment/src/index.html\" region=\"node-module-scripts\" linenums=\"false\">\n&#x3C;!-- Polyfills -->\n&#x3C;script src=\"https://unpkg.com/core-js/client/shim.min.js\">&#x3C;/script>\n\n&#x3C;!-- Update these package versions as needed -->\n&#x3C;script src=\"https://unpkg.com/zone.js@0.8.4?main=browser\">&#x3C;/script>\n&#x3C;script src=\"https://unpkg.com/systemjs@0.19.39/dist/system.src.js\">&#x3C;/script>\n\n</code-example>\n<p>(2) Replace the <code>systemjs.config.js</code> script with a script that\nloads <code>systemjs.config.server.js</code>.</p>\n<code-example path=\"deployment/src/index.html\" region=\"systemjs-config\" linenums=\"false\">\n&#x3C;!-- This SystemJS configuration loads umd packages from the web -->\n&#x3C;script src=\"systemjs.config.server.js\">&#x3C;/script>\n\n</code-example>\n<p>(3) Add <code>systemjs.config.server.js</code> (shown in the code sample below) to the <code>src/</code> folder.\nThis alternative version configures <em>SystemJS</em> to load <em>UMD</em> versions of Angular\n(and other third-party packages) from the web.</p>\n<p>Modify <code>systemjs.config.server.js</code> as necessary to stay in sync with changes\nyou make to <code>systemjs.config.js</code>.</p>\n<p>Notice the <code>paths</code> key:</p>\n<code-example path=\"deployment/src/systemjs.config.server.js\" region=\"paths\" linenums=\"false\">\npaths: {\n  'npm:': 'https://unpkg.com/' // path serves as alias\n},\n\n</code-example>\n<p>In the standard SystemJS config, the <code>npm</code> path points to the <code>node_modules/</code>.\nIn this server config, it points to\n<a href=\"https://unpkg.com/\" title=\"unpkg.com\">https://unpkg.com</a>,\na site that hosts <em>npm packages</em>,\nand loads them from the web directly.\nThere are other service providers that do the same thing.</p>\n<p>If you are unwilling or unable to load packages from the open web,\nthe inventory in <code>systemjs.config.server.js</code> identifies the files and folders that\nyou would copy to a library folder on the server.\nThen change the config's  <code>'npm'</code> path to point to that folder.</p>\n<h3 id=\"practice-with-an-example\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#practice-with-an-example\"><i class=\"material-icons\">link</i></a>Practice with an example</h3>\n<p>The following trivial router sample app shows these changes.</p>\n<code-tabs>\n\n  <code-pane title=\"index.html\" path=\"deployment/src/index.html\">\n&#x3C;!DOCTYPE html>\n&#x3C;html>\n  &#x3C;head>\n    &#x3C;!-- Doesn't load from node_modules! -->\n\n    &#x3C;!-- Set the base href -->\n    &#x3C;base href=\"/\">\n    &#x3C;title>Simple Deployment&#x3C;/title>\n    &#x3C;meta charset=\"UTF-8\">\n    &#x3C;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    &#x3C;link rel=\"stylesheet\" href=\"styles.css\">\n\n    &#x3C;!-- Polyfills -->\n    &#x3C;script src=\"https://unpkg.com/core-js/client/shim.min.js\">&#x3C;/script>\n\n    &#x3C;!-- Update these package versions as needed -->\n    &#x3C;script src=\"https://unpkg.com/zone.js@0.8.4?main=browser\">&#x3C;/script>\n    &#x3C;script src=\"https://unpkg.com/systemjs@0.19.39/dist/system.src.js\">&#x3C;/script>\n\n    &#x3C;!-- This SystemJS configuration loads umd packages from the web -->\n    &#x3C;script src=\"systemjs.config.server.js\">&#x3C;/script>\n\n    &#x3C;script>\n      System.import('main.js')\n            .catch(function(err){ console.error(err); });\n    &#x3C;/script>\n  &#x3C;/head>\n\n  &#x3C;body>\n    &#x3C;my-app>loading...&#x3C;/my-app>\n  &#x3C;/body>\n\n&#x3C;/html>\n\n\n</code-pane>\n\n  <code-pane title=\"systemjs.config.server.js\" path=\"deployment/src/systemjs.config.server.js\">\n/**\n * System configuration for deployment without installing node_modules\n * Loads umd packages from the web instead\n * Adjust as necessary for your application needs.\n */\n(function (global) {\n  System.config({\n    paths: {\n      'npm:': 'https://unpkg.com/' // path serves as alias\n    },\n    // map tells the System loader where to look for things\n    map: {\n      app: 'app', // location of transpiled app files\n\n      // angular minimized umd bundles\n      '@angular/core': 'npm:@angular/core/bundles/core.umd.min.js',\n      '@angular/common': 'npm:@angular/common/bundles/common.umd.min.js',\n      '@angular/compiler': 'npm:@angular/compiler/bundles/compiler.umd.min.js',\n      '@angular/platform-browser': 'npm:@angular/platform-browser/bundles/platform-browser.umd.min.js',\n      '@angular/platform-browser-dynamic': 'npm:@angular/platform-browser-dynamic/bundles/platform-browser-dynamic.umd.min.js',\n      '@angular/http': 'npm:@angular/http/bundles/http.umd.min.js',\n      '@angular/router': 'npm:@angular/router/bundles/router.umd.min.js',\n      '@angular/router/upgrade': 'npm:@angular/router/bundles/router-upgrade.umd.min.js',\n      '@angular/forms': 'npm:@angular/forms/bundles/forms.umd.min.js',\n      '@angular/upgrade': 'npm:@angular/upgrade/bundles/upgrade.umd.min.js',\n      '@angular/upgrade/static': 'npm:@angular/upgrade/bundles/upgrade-static.umd.min.js',\n\n      // other libraries\n      'rxjs':                      'npm:rxjs@5.0.1',\n      'angular-in-memory-web-api': 'npm:angular-in-memory-web-api/bundles/in-memory-web-api.umd.js'\n    },\n    // packages tells the System loader how to load when no filename and/or no extension\n    packages: {\n      app: {\n        main: './main.js',\n        defaultExtension: 'js'\n      },\n      rxjs: {\n        defaultExtension: 'js'\n      }\n    }\n  });\n  })(this);\n\n\n</code-pane>\n\n  <code-pane title=\"main.ts\" path=\"deployment/src/main.ts\">\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\nimport { enableProdMode } from '@angular/core';\n\n// Enable production mode unless running locally\nif (!/localhost/.test(document.location.host)) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n\n</code-pane>\n\n  <code-pane title=\"app/app.module.ts\" path=\"deployment/src/app/app.module.ts\">\nimport { NgModule }             from '@angular/core';\nimport { BrowserModule }        from '@angular/platform-browser';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { AppComponent }           from './app.component';\nimport { CrisisListComponent }    from './crisis-list.component';\nimport { HeroListComponent }      from './hero-list.component';\n\nconst appRoutes: Routes = [\n  { path: 'crisis-center', component: CrisisListComponent },\n  { path: 'heroes',        component: HeroListComponent },\n\n  { path: '', redirectTo: '/heroes', pathMatch: 'full' }\n];\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    RouterModule.forRoot(appRoutes)\n  ],\n  declarations: [\n    AppComponent,\n    CrisisListComponent,\n    HeroListComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-pane>\n\n  <code-pane title=\"app/app.component.ts\" path=\"deployment/src/app/app.component.ts\">\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'my-app',\n  template: `\n    &#x3C;h1>Simple Deployment&#x3C;/h1>\n    &#x3C;nav>\n      &#x3C;a routerLink=\"/crisis-center\" routerLinkActive=\"active\">Crisis Center&#x3C;/a>\n      &#x3C;a routerLink=\"/heroes\" routerLinkActive=\"active\">Heroes&#x3C;/a>\n    &#x3C;/nav>\n    &#x3C;router-outlet>&#x3C;/router-outlet>\n  `\n})\nexport class AppComponent { }\n\n\n</code-pane>\n\n  <code-pane title=\"app/crisis-list.component.ts\" path=\"deployment/src/app/crisis-list.component.ts\">\nimport { Component } from '@angular/core';\n\n@Component({\n  template: `\n    &#x3C;h2>CRISIS CENTER&#x3C;/h2>\n    &#x3C;p>Get your crisis here&#x3C;/p>`\n})\nexport class CrisisListComponent { }\n\n\n</code-pane>\n\n  <code-pane title=\"app/hero-list.component.ts\" path=\"deployment/src/app/hero-list.component.ts\">\nimport { Component } from '@angular/core';\n\n@Component({\n  template: `\n    &#x3C;h2>HEROES&#x3C;/h2>\n    &#x3C;p>Get your heroes here&#x3C;/p>\n  `\n})\nexport class HeroListComponent { }\n\n\n</code-pane>\n\n</code-tabs>\n<p>Practice with this sample before attempting these techniques on your application.</p>\n<ol>\n<li>\n<p>Follow the <a href=\"guide/setup\" title=\"Angular QuickStart setup\">setup instructions</a> for creating a new project\nnamed <code>simple-deployment</code>.</p>\n</li>\n<li>\n<p>Add the \"Simple deployment\" sample files shown above.</p>\n</li>\n<li>\n<p>Run it with <code>npm start</code> as you would any project.</p>\n</li>\n<li>\n<p>Inspect the network traffic in the browser developer tools.\nNotice that it loads all packages from the web.\nYou could delete the <code>node_modules</code> folder and the app would still run\n(although you wouldn't be able to recompile or launch <code>lite-server</code>\nuntil you restored it).</p>\n</li>\n<li>\n<p>Deploy the sample to the server (minus the <code>node_modules</code> folder!).</p>\n</li>\n</ol>\n<p>When you have that working, try the same process on your application.</p>\n<a id=\"optimize\"></a>\n<h2 id=\"optimize-for-production\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#optimize-for-production\"><i class=\"material-icons\">link</i></a>Optimize for production</h2>\n<p>Although deploying directly from the development environment works, it's far from optimal.</p>\n<p>The client makes many small requests for individual application code and template files,\na fact you can quickly confirm by looking at the network tab in a browser's developer tools.\nEach small file download can spend more time communicating with the server than transferring data.</p>\n<p>Development files are full of comments and whitespace for easy reading and debugging.\nThe browser downloads entire libraries, instead of just the parts the app needs.\nThe volume of code passed from server to client (the \"payload\")\ncan be significantly larger than is strictly necessary to execute the application.</p>\n<p>The many requests and large payloads mean\nthe app takes longer to launch than it would if you optimized it.\nSeveral seconds may pass (or worse) before the user can see or do anything useful.</p>\n<p>Does it matter? That depends upon business and technical factors you must evaluate for yourself.</p>\n<p>If it <em>does</em> matter, there are tools and techniques to reduce the number of requests and the size of responses.</p>\n<ul>\n<li>Ahead-of-Time (AOT) Compilation: pre-compiles Angular component templates.</li>\n<li>Bundling: concatenates modules into a single file (bundle).</li>\n<li>Inlining: pulls template html and css into the components.</li>\n<li>Minification: removes excess whitespace, comments, and optional tokens.</li>\n<li>Uglification: rewrites code to use short, cryptic variable and function names.</li>\n<li>Dead code elimination: removes unreferenced modules and unused code.</li>\n<li>Pruned libraries: drop unused libraries and pare others down to the features you need.</li>\n<li>Performance measurement: focus on optimizations that make a measurable difference.</li>\n</ul>\n<p>Each tool does something different.\nThey work best in combination and are mutually reinforcing.</p>\n<p>You can use any build system you like.\nWhatever system you choose, be sure to automate it so that\nbuilding for production is a single step.</p>\n<a id=\"aot\"></a>\n<h3 id=\"ahead-of-time-aot-compilation\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#ahead-of-time-aot-compilation\"><i class=\"material-icons\">link</i></a>Ahead-of-Time (AOT) compilation</h3>\n<p>The Angular <em>Ahead-of-Time</em> compiler pre-compiles application components and their templates\nduring the build process.</p>\n<p>Apps compiled with AOT launch faster for several reasons.</p>\n<ul>\n<li>Application components execute immediately, without client-side compilation.</li>\n<li>Templates are embedded as code within their components so there is no client-side request for template files.</li>\n<li>You don't download the Angular compiler, which is pretty big on its own.</li>\n<li>The compiler discards unused Angular directives that a tree-shaking tool can then exclude.</li>\n</ul>\n<p>Learn more about AOT Compilation in the <a href=\"guide/aot-compiler\" title=\"AOT Cookbook\">AOT Cookbook</a>\nwhich describes running the AOT compiler from the command line\nand using <a href=\"guide/deployment#rollup\"><em>rollup</em></a> for bundling, minification, uglification and tree shaking.</p>\n<a id=\"webpack\"></a>\n<h3 id=\"webpack-and-aot\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#webpack-and-aot\"><i class=\"material-icons\">link</i></a>Webpack (and AOT)</h3>\n<p><a href=\"https://webpack.js.org/\" title=\"Webpack 2\">Webpack 2</a> is another\ngreat option for inlining templates and style-sheets, for bundling, minifying, and uglifying the application.\nThe \"<a href=\"guide/webpack\" title=\"Webpack: an introduction\">Webpack: an introduction</a>\" guide will get you started\nusing webpack with Angular.</p>\n<p>Consider configuring <em>Webpack</em> with the official\n<a href=\"https://github.com/angular/angular-cli/tree/master/packages/%40ngtools/webpack\" title=\"Ahead-of-Time Webpack Plugin\">\nAngular Ahead-of-Time Webpack Plugin</a>.\nThis plugin transpiles the TypeScript application code,\nbundles lazy loaded <code>NgModules</code> separately,\nand performs AOT compilation — without any changes to the source code.</p>\n<a id=\"rollup\"></a>\n<h3 id=\"dead-code-elimination-with-rollup\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#dead-code-elimination-with-rollup\"><i class=\"material-icons\">link</i></a>Dead code elimination with <em>rollup</em></h3>\n<p>Any code that you don't call is <em>dead code</em>.\nYou can reduce the total size of the application substantially by removing dead code from the application and from third-party libraries.</p>\n<p><em>Tree shaking</em> is a <em>dead code elimination</em> technique that removes entire exports from JavaScript modules.\nIf a library exports something that the application doesn't import, a tree shaking tool removes it from the code base.</p>\n<p>Tree shaking was popularized by\n<a href=\"http://rollupjs.org/\" title=\"Rollup\">Rollup</a>, a popular tool with an ecosystem of\nplugins for bundling, minification, and uglification.\nLearn more about tree shaking and dead code elmination in\n<a href=\"https://medium.com/@Rich_Harris/tree-shaking-versus-dead-code-elimination-d3765df85c80#.15ih9cyvl\" title=\"Tree-shaking and Dead Code Elimination\">\nthis post</a> by rollup-creator, Rich Harris.</p>\n<a id=\"prune\"></a>\n<h3 id=\"pruned-libraries\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#pruned-libraries\"><i class=\"material-icons\">link</i></a>Pruned libraries</h3>\n<p>Don't count on automation to remove all dead code.</p>\n<p>Remove libraries that you don't use, especially unnecessary scripts in <code>index.html</code>.\nConsider smaller alternatives to the libraries that you do use.</p>\n<p>Some libraries offer facilities for building a custom, skinny version with just the features you need.\nOther libraries let you import features <em>a la carte</em>.\n<strong>RxJS</strong> is a good example; import RxJS <code>Observable</code> operators individually instead of the entire library.</p>\n<a id=\"measure\"></a>\n<h3 id=\"measure-performance-first\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#measure-performance-first\"><i class=\"material-icons\">link</i></a>Measure performance first</h3>\n<p>You can make better decisions about what to optimize and how when you have a clear and accurate understanding of\nwhat's making the application slow.\nThe cause may not be what you think it is.\nYou can waste a lot of time and money optimizing something that has no tangible benefit or even makes the app slower.\nYou should measure the app's actual behavior when running in the environments that are important to you.</p>\n<p>The\n<a href=\"https://developers.google.com/web/tools/chrome-devtools/network-performance/understanding-resource-timing\" title=\"Chrome DevTools Network Performance\">\nChrome DevTools Network Performance page</a> is a good place to start learning about measuring performance.</p>\n<p>The <a href=\"https://www.webpagetest.org/\">WebPageTest</a> tool is another good choice\nthat can also help verify that your deployment was successful.</p>\n<a id=\"angular-configuration\"></a>\n<h2 id=\"angular-configuration\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#angular-configuration\"><i class=\"material-icons\">link</i></a>Angular configuration</h2>\n<p>Angular configuration can make the difference between whether the app launches quickly or doesn't load at all.</p>\n<a id=\"base-tag\"></a>\n<h3 id=\"the-base-tag\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#the-base-tag\"><i class=\"material-icons\">link</i></a>The <code>base</code> tag</h3>\n<p>The HTML <a href=\"/guide/router\"><em>&#x3C;base href=\"...\"/></em></a>\nspecifies a base path for resolving relative URLs to assets such as images, scripts, and style sheets.\nFor example, given the <code>&#x3C;base href=\"/my/app/\"></code>, the browser resolves a URL such as <code>some/place/foo.jpg</code>\ninto a server request for <code>my/app/some/place/foo.jpg</code>.\nDuring navigation, the Angular router uses the <em>base href</em> as the base path to component, template, and module files.</p>\n<div class=\"l-sub-section\">\n<p>See also the <a href=\"api/common/APP_BASE_HREF\" title=\"API: APP_BASE_HREF\"><em>APP_BASE_HREF</em></a> alternative.</p>\n</div>\n<p>In development, you typically start the server in the folder that holds <code>index.html</code>.\nThat's the root folder and you'd add <code>&#x3C;base href=\"/\"></code> near the top of <code>index.html</code> because <code>/</code> is the root of the app.</p>\n<p>But on the shared or production server, you might serve the app from a subfolder.\nFor example, when the URL to load the app is something like <code>http://www.mysite.com/my/app/</code>,\nthe subfolder is <code>my/app/</code> and you should add <code>&#x3C;base href=\"/my/app/\"></code> to the server version of the <code>index.html</code>.</p>\n<p>When the <code>base</code> tag is misconfigured, the app fails to load and the browser console displays <code>404 - Not Found</code> errors\nfor the missing files. Look at where it <em>tried</em> to find those files and adjust the base tag appropriately.</p>\n<a id=\"enable-prod-mode\"></a>\n<h3 id=\"enable-production-mode\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#enable-production-mode\"><i class=\"material-icons\">link</i></a>Enable production mode</h3>\n<p>Angular apps run in development mode by default, as you can see by the following message on the browser\nconsole:</p>\n<code-example format=\"nocode\">\n  Angular is running in the development mode. Call enableProdMode() to enable the production mode.\n</code-example>\n<p>Switching to production mode can make it run faster by disabling development specific checks such as the dual change detection cycles.</p>\n<p>To enable <a href=\"api/core/enableProdMode\">production mode</a> when running remotely, add the following code to the <code>main.ts</code>.</p>\n<code-example path=\"deployment/src/main.ts\" region=\"enableProdMode\" title=\"src/main.ts (enableProdMode)\" linenums=\"false\">\nimport { enableProdMode } from '@angular/core';\n\n// Enable production mode unless running locally\nif (!/localhost/.test(document.location.host)) {\n  enableProdMode();\n}\n\n</code-example>\n<a id=\"lazy-loading\"></a>\n<h3 id=\"lazy-loading\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#lazy-loading\"><i class=\"material-icons\">link</i></a>Lazy loading</h3>\n<p>You can dramatically reduce launch time by only loading the application modules that\nabsolutely must be present when the app starts.</p>\n<p>Configure the Angular Router to defer loading of all other modules (and their associated code), either by\n<a href=\"guide/router#preloading\" title=\"Preloading\">waiting until the app has launched</a>\nor by <a href=\"guide/router#asynchronous-routing\" title=\"Lazy loading\"><em>lazy loading</em></a>\nthem on demand.</p>\n<h4 id=\"dont-eagerly-import-something-from-a-lazy-loaded-module\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#dont-eagerly-import-something-from-a-lazy-loaded-module\"><i class=\"material-icons\">link</i></a>Don't eagerly import something from a lazy loaded module</h4>\n<p>It's a common mistake.\nYou've arranged to lazy load a module.\nBut you unintentionally import it, with a JavaScript <code>import</code> statement,\nin a file that's eagerly loaded when the app starts, a file such as the root <code>AppModule</code>.\nIf you do that, the module will be loaded immediately.</p>\n<p>The bundling configuration must take lazy loading into consideration.\nBecause lazy loaded modules aren't imported in JavaScript (as just noted), bundlers exclude them by default.\nBundlers don't know about the router configuration and won't create separate bundles for lazy loaded modules.\nYou have to create these bundles manually.</p>\n<p>The\n<a href=\"https://github.com/angular/angular-cli/tree/master/packages/%2540ngtools/webpack\">Angular Ahead-of-Time Webpack Plugin</a>\nautomatically recognizes lazy loaded <code>NgModules</code> and creates separate bundles for them.</p>\n<a id=\"server-configuration\"></a>\n<h2 id=\"server-configuration\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#server-configuration\"><i class=\"material-icons\">link</i></a>Server configuration</h2>\n<p>This section covers changes you may have make to the server or to files deployed to the server.</p>\n<a id=\"fallback\"></a>\n<h3 id=\"routed-apps-must-fallback-to-indexhtml\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#routed-apps-must-fallback-to-indexhtml\"><i class=\"material-icons\">link</i></a>Routed apps must fallback to <code>index.html</code></h3>\n<p>Angular apps are perfect candidates for serving with a simple static HTML server.\nYou don't need a server-side engine to dynamically compose application pages because\nAngular does that on the client-side.</p>\n<p>If the app uses the Angular router, you must configure the server\nto return the application's host page (<code>index.html</code>) when asked for a file that it does not have.</p>\n<a id=\"deep-link\"></a>\n<p>A routed application should support \"deep links\".\nA <em>deep link</em> is a URL that specifies a path to a component inside the app.\nFor example, <code>http://www.mysite.com/heroes/42</code> is a <em>deep link</em> to the hero detail page\nthat displays the hero with <code>id: 42</code>.</p>\n<p>There is no issue when the user navigates to that URL from within a running client.\nThe Angular router interprets the URL and routes to that page and hero.</p>\n<p>But clicking a link in an email, entering it in the browser address bar,\nor merely refreshing the browser while on the hero detail page —\nall of these actions are handled by the browser itself, <em>outside</em> the running application.\nThe browser makes a direct request to the server for that URL, bypassing the router.</p>\n<p>A static server routinely returns <code>index.html</code> when it receives a request for <code>http://www.mysite.com/</code>.\nBut it rejects <code>http://www.mysite.com/heroes/42</code> and returns a <code>404 - Not Found</code> error <em>unless</em> it is\nconfigured to return <code>index.html</code> instead.</p>\n<h4 id=\"fallback-configuration-examples\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#fallback-configuration-examples\"><i class=\"material-icons\">link</i></a>Fallback configuration examples</h4>\n<p>There is no single configuration that works for every server.\nThe following sections describe configurations for some of the most popular servers.\nThe list is by no means exhaustive, but should provide you with a good starting point.</p>\n<h4 id=\"development-servers\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#development-servers\"><i class=\"material-icons\">link</i></a>Development servers</h4>\n<ul>\n<li>\n<p><a href=\"https://github.com/johnpapa/lite-server\">Lite-Server</a>: the default dev server installed with the\n<a href=\"https://github.com/angular/quickstart\">Quickstart repo</a> is pre-configured to fallback to <code>index.html</code>.</p>\n</li>\n<li>\n<p><a href=\"https://github.com/webpack/webpack-dev-server\">Webpack-Dev-Server</a>:  setup the\n<code>historyApiFallback</code> entry in the dev server options as follows:</p>\n</li>\n</ul>\n<code-example>\n  historyApiFallback: {\n    disableDotRule: true,\n    htmlAcceptHeaders: ['text/html', 'application/xhtml+xml']\n  }\n\n</code-example>\n<h4 id=\"production-servers\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#production-servers\"><i class=\"material-icons\">link</i></a>Production servers</h4>\n<ul>\n<li><a href=\"https://httpd.apache.org/\">Apache</a>: add a\n<a href=\"http://httpd.apache.org/docs/current/mod/mod_rewrite.html\">rewrite rule</a>\nto the <code>.htaccess</code> file as show\n<a href=\"https://ngmilk.rocks/2015/03/09/angularjs-html5-mode-or-pretty-urls-on-apache-using-htaccess/\">here</a>:</li>\n</ul>\n<code-example format=\".\">\n  RewriteEngine On\n  # If an existing asset or directory is requested go to it as it is\n  RewriteCond %{DOCUMENT_ROOT}%{REQUEST_URI} -f [OR]\n  RewriteCond %{DOCUMENT_ROOT}%{REQUEST_URI} -d\n  RewriteRule ^ - [L]\n\n  # If the requested resource doesn't exist, use index.html\n  RewriteRule ^ /index.html\n\n</code-example>\n<ul>\n<li><a href=\"http://nginx.org/\">NGinx</a>: use <code>try_files</code>, as described in\n<a href=\"https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/#front-controller-pattern-web-apps\">Front Controller Pattern Web Apps</a>,\nmodified to serve <code>index.html</code>:</li>\n</ul>\n<code-example format=\".\">\n  try_files $uri $uri/ /index.html;\n\n</code-example>\n<ul>\n<li><a href=\"https://www.iis.net/\">IIS</a>: add a rewrite rule to <code>web.config</code>, similar to the one shown\n<a href=\"http://stackoverflow.com/a/26152011/2116927\">here</a>:</li>\n</ul>\n<code-example format=\".\">\n  &#x3C;system.webServer>\n    &#x3C;rewrite>\n      &#x3C;rules>\n        &#x3C;rule name=\"Angular Routes\" stopProcessing=\"true\">\n          &#x3C;match url=\".*\" />\n          &#x3C;conditions logicalGrouping=\"MatchAll\">\n            &#x3C;add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" negate=\"true\" />\n            &#x3C;add input=\"{REQUEST_FILENAME}\" matchType=\"IsDirectory\" negate=\"true\" />\n          &#x3C;/conditions>\n          &#x3C;action type=\"Rewrite\" url=\"/src/\" />\n        &#x3C;/rule>\n      &#x3C;/rules>\n    &#x3C;/rewrite>\n  &#x3C;/system.webServer>\n\n</code-example>\n<ul>\n<li>\n<p><a href=\"https://pages.github.com/\">GitHub Pages</a>: you can't\n<a href=\"https://github.com/isaacs/github/issues/408\">directly configure</a>\nthe GitHub Pages server, but you can add a 404 page.\nCopy <code>index.html</code> into <code>404.html</code>.\nIt will still be served as the 404 response, but the browser will process that page and load the app properly.\nIt's also a good idea to\n<a href=\"https://help.github.com/articles/configuring-a-publishing-source-for-github-pages/#publishing-your-github-pages-site-from-a-docs-folder-on-your-master-branch\">serve from <code>docs/</code> on master</a>\nand to\n<a href=\"https://www.bennadel.com/blog/3181-including-node-modules-and-vendors-folders-in-your-github-pages-site.htm\">create a <code>.nojekyll</code> file</a></p>\n</li>\n<li>\n<p><a href=\"https://firebase.google.com/docs/hosting/\">Firebase hosting</a>: add a\n<a href=\"https://firebase.google.com/docs/hosting/url-redirects-rewrites#section-rewrites\">rewrite rule</a>.</p>\n</li>\n</ul>\n<code-example format=\".\">\n  \"rewrites\": [ {\n    \"source\": \"**\",\n    \"destination\": \"/index.html\"\n  } ]\n\n</code-example>\n<a id=\"cors\"></a>\n<h3 id=\"requesting-services-from-a-different-server-cors\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#requesting-services-from-a-different-server-cors\"><i class=\"material-icons\">link</i></a>Requesting services from a different server (CORS)</h3>\n<p>Angular developers may encounter a\n<a href=\"https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" title=\"Cross-origin resource sharing\">\n<i>cross-origin resource sharing</i></a> error when making a service request (typically a data service request).\nto a server other than the application's own host server.\nBrowsers forbid such requests unless the server permits them explicitly.</p>\n<p>There isn't anything the client application can do about these errors.\nThe server must be configured to accept the application's requests.\nRead about how to enable CORS for specific servers at\n<a href=\"http://enable-cors.org/server.html\" title=\"Enabling CORS server\">enable-cors.org</a>.</p>\n<a id=\"next-steps\"></a>\n<h2 id=\"next-steps\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/deployment#next-steps\"><i class=\"material-icons\">link</i></a>Next steps</h2>\n<p> If you want to go beyond the <a href=\"guide/deployment#dev-deploy\" title=\"Simplest deployment possible\">simple <em>copy-deploy</em></a> approach,\nread the <a href=\"guide/aot-compiler\" title=\"AOT Cookbook\">AOT Cookbook</a> next.</p>\n\n</div>"
}