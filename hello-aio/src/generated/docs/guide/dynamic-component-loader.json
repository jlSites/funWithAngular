{
  "id": "guide/dynamic-component-loader",
  "title": "Dynamic Component Loader",
  "contents": "\n<div class=\"content\">\n<h1 id=\"dynamic-component-loader\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-component-loader#dynamic-component-loader\"><i class=\"material-icons\">link</i></a>Dynamic Component Loader</h1>\n<p>Component templates are not always fixed. An application may need to load new components at runtime.</p>\n<p>This cookbook shows you how to use <code><a href=\"api/core/ComponentFactoryResolver\">ComponentFactoryResolver</a></code> to add components dynamically.</p>\n<p>See the <live-example name=\"dynamic-component-loader\"></live-example>\nof the code in this cookbook.</p>\n<a id=\"dynamic-loading\"></a>\n<h2 id=\"dynamic-component-loading\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-component-loader#dynamic-component-loading\"><i class=\"material-icons\">link</i></a>Dynamic component loading</h2>\n<p>The following example shows how to build a dynamic ad banner.</p>\n<p>The hero agency is planning an ad campaign with several different\nads cycling through the banner. New ad components are added\nfrequently by several different teams. This makes it impractical\nto use a template with a static component structure.</p>\n<p>Instead, you need a way to load a new component without a fixed\nreference to the component in the ad banner's template.</p>\n<p>Angular comes with its own API for loading components dynamically.</p>\n<a id=\"directive\"></a>\n<h2 id=\"the-anchor-directive\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-component-loader#the-anchor-directive\"><i class=\"material-icons\">link</i></a>The anchor directive</h2>\n<p>Before you can add components you have to define an anchor point\nto tell Angular where to insert components.</p>\n<p>The ad banner uses a helper directive called <code>AdDirective</code> to\nmark valid insertion points in the template.</p>\n<code-example path=\"dynamic-component-loader/src/app/ad.directive.ts\" title=\"src/app/ad.directive.ts\" linenums=\"false\">\nimport { Directive, ViewContainerRef } from '@angular/core';\n\n@Directive({\n  selector: '[ad-host]',\n})\nexport class AdDirective {\n  constructor(public viewContainerRef: ViewContainerRef) { }\n}\n\n\n\n</code-example>\n<p><code>AdDirective</code> injects <code><a href=\"api/core/ViewContainerRef\">ViewContainerRef</a></code> to gain access to the view\ncontainer of the element that will host the dynamically added component.</p>\n<p>In the <code>@Directive</code> decorator, notice the selector name, <code>ad-host</code>;\nthat's what you use to apply the directive to the element.\nThe next section shows you how.</p>\n<a id=\"loading-components\"></a>\n<h2 id=\"loading-components\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-component-loader#loading-components\"><i class=\"material-icons\">link</i></a>Loading components</h2>\n<p>Most of the ad banner implementation is in <code>ad-banner.component.ts</code>.\nTo keep things simple in this example, the HTML is in the <code>@Component</code>\ndecorator's <code>template</code> property as a template string.</p>\n<p>The <code>&#x3C;ng-template></code> element is where you apply the directive you just made.\nTo apply the <code>AdDirective</code>, recall the selector from <code>ad.directive.ts</code>,\n<code>ad-host</code>. Apply that to <code>&#x3C;ng-template></code> without the square brackets. Now Angular knows\nwhere to dynamically load components.</p>\n<code-example path=\"dynamic-component-loader/src/app/ad-banner.component.ts\" region=\"ad-host\" title=\"src/app/ad-banner.component.ts (template)\" linenums=\"false\">\ntemplate: `\n            &#x3C;div class=\"ad-banner\">\n              &#x3C;h3>Advertisements&#x3C;/h3>\n              &#x3C;ng-template ad-host>&#x3C;/ng-template>\n            &#x3C;/div>\n          `\n\n</code-example>\n<p>The <code>&#x3C;ng-template></code> element is a good choice for dynamic components\nbecause it doesn't render any additional output.</p>\n<a id=\"resolving-components\"></a>\n<h2 id=\"resolving-components\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-component-loader#resolving-components\"><i class=\"material-icons\">link</i></a>Resolving components</h2>\n<p>Take a closer look at the methods in <code>ad-banner.component.ts</code>.</p>\n<p><code>AdBannerComponent</code> takes an array of <code>AdItem</code> objects as input,\nwhich ultimately comes from <code>AdService</code>.  <code>AdItem</code> objects specify\nthe type of component to load and any data to bind to the\ncomponent.<code>AdService</code> returns the actual ads making up the ad campaign.</p>\n<p>Passing an array of components to <code>AdBannerComponent</code> allows for a\ndynamic list of ads without static elements in the template.</p>\n<p>With its <code>getAds()</code> method, <code>AdBannerComponent</code> cycles through the array of <code>AdItems</code>\nand loads a new component every 3 seconds by calling <code>loadComponent()</code>.</p>\n<code-example path=\"dynamic-component-loader/src/app/ad-banner.component.ts\" region=\"class\" title=\"src/app/ad-banner.component.ts (excerpt)\" linenums=\"false\">\nexport class AdBannerComponent implements AfterViewInit, OnDestroy {\n  @Input() ads: AdItem[];\n  currentAddIndex: number = -1;\n  @ViewChild(AdDirective) adHost: AdDirective;\n  subscription: any;\n  interval: any;\n\n  constructor(private componentFactoryResolver: ComponentFactoryResolver) { }\n\n  ngAfterViewInit() {\n    this.loadComponent();\n    this.getAds();\n  }\n\n  ngOnDestroy() {\n    clearInterval(this.interval);\n  }\n\n  loadComponent() {\n    this.currentAddIndex = (this.currentAddIndex + 1) % this.ads.length;\n    let adItem = this.ads[this.currentAddIndex];\n\n    let componentFactory = this.componentFactoryResolver.resolveComponentFactory(adItem.component);\n\n    let viewContainerRef = this.adHost.viewContainerRef;\n    viewContainerRef.clear();\n\n    let componentRef = viewContainerRef.createComponent(componentFactory);\n    (&#x3C;AdComponent>componentRef.instance).data = adItem.data;\n  }\n\n  getAds() {\n    this.interval = setInterval(() => {\n      this.loadComponent();\n    }, 3000);\n  }\n}\n\n</code-example>\n<p>The <code>loadComponent()</code> method is doing a lot of the heavy lifting here.\nTake it step by step. First, it picks an ad.</p>\n<div class=\"l-sub-section\">\n<p><strong>How <em>loadComponent()</em> chooses an ad</strong></p>\n<p>The <code>loadComponent()</code> method chooses an ad using some math.</p>\n<p>First, it sets the <code>currentAddIndex</code> by taking whatever it\ncurrently is plus one, dividing that by the length of the <code>AdItem</code> array, and\nusing the <em>remainder</em> as the new <code>currentAddIndex</code> value. Then, it uses that\nvalue to select an <code>adItem</code> from the array.</p>\n</div>\n<p>After <code>loadComponent()</code> selects an ad, it uses <code><a href=\"api/core/ComponentFactoryResolver\">ComponentFactoryResolver</a></code>\nto resolve a <code><a href=\"api/core/ComponentFactory\">ComponentFactory</a></code> for each specific component.\nThe <code><a href=\"api/core/ComponentFactory\">ComponentFactory</a></code> then creates an instance of each component.</p>\n<p>Next, you're targeting the <code>viewContainerRef</code> that\nexists on this specific instance of the component. How do you know it's\nthis specific instance? Because it's referring to <code>adHost</code> and <code>adHost</code> is the\ndirective you set up earlier to tell Angular where to insert dynamic components.</p>\n<p>As you may recall, <code>AdDirective</code> injects <code><a href=\"api/core/ViewContainerRef\">ViewContainerRef</a></code> into its constructor.\nThis is how the directive accesses the element that you want to use to host the dynamic component.</p>\n<p>To add the component to the template, you call <code>createComponent()</code> on <code><a href=\"api/core/ViewContainerRef\">ViewContainerRef</a></code>.</p>\n<p>The <code>createComponent()</code> method returns a reference to the loaded component.\nUse that reference to interact with the component by assigning to its properties or calling its methods.</p>\n<a id=\"selector-references\"></a>\n<h4 id=\"selector-references\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-component-loader#selector-references\"><i class=\"material-icons\">link</i></a>Selector references</h4>\n<p>Generally, the Angular compiler generates a <code><a href=\"api/core/ComponentFactory\">ComponentFactory</a></code>\nfor any component referenced in a template. However, there are\nno selector references in the templates for\ndynamically loaded components since they load at runtime.</p>\n<p>To ensure that the compiler still generates a factory,\nadd dynamically loaded components to the <code><a href=\"api/core/NgModule\">NgModule</a></code>'s <code>entryComponents</code> array:</p>\n<code-example path=\"dynamic-component-loader/src/app/app.module.ts\" region=\"entry-components\" title=\"src/app/app.module.ts (entry components)\" linenums=\"false\">\nentryComponents: [ HeroJobAdComponent, HeroProfileComponent ],\n\n</code-example>\n<a id=\"common-interface\"></a>\n<h2 id=\"the-adcomponent-interface\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-component-loader#the-adcomponent-interface\"><i class=\"material-icons\">link</i></a>The <em>AdComponent</em> interface</h2>\n<p>In the ad banner, all components implement a common <code>AdComponent</code> interface to\nstandardize the API for passing data to the components.</p>\n<p>Here are two sample components and the <code>AdComponent</code> interface for reference:</p>\n<code-tabs>\n\n  <code-pane title=\"hero-job-ad.component.ts\" path=\"dynamic-component-loader/src/app/hero-job-ad.component.ts\">\nimport { Component, Input } from '@angular/core';\n\nimport { AdComponent }      from './ad.component';\n\n@Component({\n  template: `\n    &#x3C;div class=\"job-ad\">\n      &#x3C;h4>{{data.headline}}&#x3C;/h4> \n      \n      {{data.body}}\n    &#x3C;/div>\n  `\n})\nexport class HeroJobAdComponent implements AdComponent {\n  @Input() data: any;\n\n}\n\n\n\n</code-pane>\n\n  <code-pane title=\"hero-profile.component.ts\" path=\"dynamic-component-loader/src/app/hero-profile.component.ts\">\nimport { Component, Input }  from '@angular/core';\n\nimport { AdComponent }       from './ad.component';\n\n@Component({\n  template: `\n    &#x3C;div class=\"hero-profile\">\n      &#x3C;h3>Featured Hero Profile&#x3C;/h3>\n      &#x3C;h4>{{data.name}}&#x3C;/h4>\n      \n      &#x3C;p>{{data.bio}}&#x3C;/p>\n\n      &#x3C;strong>Hire this hero today!&#x3C;/strong>\n    &#x3C;/div>\n  `\n})\nexport class HeroProfileComponent implements AdComponent {\n  @Input() data: any;\n}\n\n\n\n\n</code-pane>\n\n  <code-pane title=\"ad.component.ts\" path=\"dynamic-component-loader/src/app/ad.component.ts\">\nexport interface AdComponent {\n  data: any;\n}\n\n\n</code-pane>\n\n</code-tabs>\n<a id=\"final-ad-baner\"></a>\n<h2 id=\"final-ad-banner\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dynamic-component-loader#final-ad-banner\"><i class=\"material-icons\">link</i></a>Final ad banner</h2>\n<p> The final ad banner looks like this:</p>\n<figure>\n  <img src=\"generated/images/guide/dynamic-component-loader/ads.gif\" alt=\"Ads\" width=\"480\" height=\"222\">\n</figure>\n<p>See the <live-example name=\"dynamic-component-loader\"></live-example>.</p>\n\n</div>"
}