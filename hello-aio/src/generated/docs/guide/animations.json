{
  "id": "guide/animations",
  "title": "Animations",
  "contents": "\n<div class=\"content\">\n<h1 id=\"animations\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#animations\"><i class=\"material-icons\">link</i></a>Animations</h1>\n<p>Motion is an important aspect in the design of modern web applications. Good\nuser interfaces transition smoothly between states with engaging animations\nthat call attention where it's needed. Well-designed animations can make a UI not only\nmore fun but also easier to use.</p>\n<h2 id=\"overview\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#overview\"><i class=\"material-icons\">link</i></a>Overview</h2>\n<p>Angular's animation system lets you build animations that run with the same kind of native\nperformance found in pure CSS animations. You can also tightly integrate your\nanimation logic with the rest of your application code, for ease of control.</p>\n<div class=\"alert is-helpful\">\n<p>Angular animations are built on top of the standard <a href=\"https://w3c.github.io/web-animations/\">Web Animations API</a>\nand run natively on <a href=\"http://caniuse.com/#feat=web-animation\">browsers that support it</a>.</p>\n<p>For other browsers, a polyfill is required. Grab\n<a href=\"https://github.com/web-animations/web-animations-js\"><code>web-animations.min.js</code> from GitHub</a> and\nadd it to your page.</p>\n</div>\n<div class=\"l-sub-section\">\n<p>The examples in this page are available as a <live-example></live-example>.</p>\n</div>\n<a id=\"example-transitioning-between-states\"></a>\n<h2 id=\"quickstart-example-transitioning-between-two-states\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#quickstart-example-transitioning-between-two-states\"><i class=\"material-icons\">link</i></a>Quickstart example: Transitioning between two states</h2>\n<img src=\"generated/images/guide/animations/animation_basic_click.gif\" alt=\"A simple transition animation\" class=\"right\" width=\"253\" height=\"129\">\n<p>You can build a simple animation that transitions an element between two states\ndriven by a model attribute.</p>\n<p>Animations are defined inside <code>@Component</code> metadata. Before you can add animations, you need\nto import a few animation-specific imports and functions:</p>\n<code-example path=\"animations/src/app/app.module.ts\" region=\"animations-module\" title=\"app.module.ts (@NgModule imports excerpt)\" linenums=\"false\">\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\n</code-example>\n<code-example path=\"animations/src/app/hero-list-basic.component.ts\" region=\"imports\" title=\"hero-list-basic.component.ts\" linenums=\"false\">\nimport {\n  Component,\n  Input\n} from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition\n} from '@angular/animations';\n\n</code-example>\n<p>With these, you can define an <em>animation trigger</em> called <code>heroState</code> in the component\nmetadata. It uses animations to transition between two states: <code>active</code> and <code>inactive</code>. When a\nhero is active, the element appears in a slightly larger size and lighter color.</p>\n<code-example path=\"animations/src/app/hero-list-basic.component.ts\" region=\"animationdef\" title=\"hero-list-basic.component.ts (@Component excerpt)\" linenums=\"false\">\nanimations: [\n  trigger('heroState', [\n    state('inactive', style({\n      backgroundColor: '#eee',\n      transform: 'scale(1)'\n    })),\n    state('active',   style({\n      backgroundColor: '#cfd8dc',\n      transform: 'scale(1.1)'\n    })),\n    transition('inactive => active', animate('100ms ease-in')),\n    transition('active => inactive', animate('100ms ease-out'))\n  ])\n]\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p>In this example, you are defining animation styles (color and transform) inline in the\nanimation metadata.</p>\n</div>\n<p>Now, using the <code>[@triggerName]</code> syntax, attach the animation that you just defined to\none or more elements in the component's template.</p>\n<code-example path=\"animations/src/app/hero-list-basic.component.ts\" region=\"template\" title=\"hero-list-basic.component.ts (excerpt)\" linenums=\"false\">\ntemplate: `\n  &#x3C;ul>\n    &#x3C;li *ngFor=\"let hero of heroes\"\n        [@heroState]=\"hero.state\"\n        (click)=\"hero.toggleState()\">\n      {{hero.name}}\n    &#x3C;/li>\n  &#x3C;/ul>\n`,\n\n</code-example>\n<p>Here, the animation trigger applies to every element repeated by an <code>ngFor</code>. Each of\nthe repeated elements animates independently. The value of the\nattribute is bound to the expression <code>hero.state</code> and is always either <code>active</code> or <code>inactive</code>.</p>\n<p>With this setup, an animated transition appears whenever a hero object changes state.\nHere's the full component implementation:</p>\n<code-example path=\"animations/src/app/hero-list-basic.component.ts\" title=\"hero-list-basic.component.ts\">\nimport {\n  Component,\n  Input\n} from '@angular/core';\nimport {\n  trigger,\n  state,\n  style,\n  animate,\n  transition\n} from '@angular/animations';\n\nimport { Heroes } from './hero.service';\n\n@Component({\n  selector: 'hero-list-basic',\n  template: `\n    &#x3C;ul>\n      &#x3C;li *ngFor=\"let hero of heroes\"\n          [@heroState]=\"hero.state\"\n          (click)=\"hero.toggleState()\">\n        {{hero.name}}\n      &#x3C;/li>\n    &#x3C;/ul>\n  `,\n  styleUrls: ['./hero-list.component.css'],\n  animations: [\n    trigger('heroState', [\n      state('inactive', style({\n        backgroundColor: '#eee',\n        transform: 'scale(1)'\n      })),\n      state('active',   style({\n        backgroundColor: '#cfd8dc',\n        transform: 'scale(1.1)'\n      })),\n      transition('inactive => active', animate('100ms ease-in')),\n      transition('active => inactive', animate('100ms ease-out'))\n    ])\n  ]\n})\nexport class HeroListBasicComponent {\n  @Input() heroes: Heroes;\n}\n\n\n</code-example>\n<h2 id=\"states-and-transitions\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#states-and-transitions\"><i class=\"material-icons\">link</i></a>States and transitions</h2>\n<p>Angular animations are defined as logical <strong>states</strong> and <strong>transitions</strong>\nbetween states.</p>\n<p>An animation state is a string value that you define in your application code. In the example\nabove, the states <code>'active'</code> and <code>'inactive'</code> are based on the logical state of\nhero objects. The source of the state can be a simple object attribute, as it was in this case,\nor it can be a value computed in a method. The important thing is that you can read it into the\ncomponent's template.</p>\n<p>You can define <em>styles</em> for each animation state:</p>\n<code-example path=\"animations/src/app/hero-list-basic.component.ts\" region=\"states\" title=\"src/app/hero-list-basic.component.ts\" linenums=\"false\">\nstate('inactive', style({\n  backgroundColor: '#eee',\n  transform: 'scale(1)'\n})),\nstate('active',   style({\n  backgroundColor: '#cfd8dc',\n  transform: 'scale(1.1)'\n})),\n\n</code-example>\n<p>These <code>state</code> definitions specify the <em>end styles</em> of each state.\nThey are applied to the element once it has transitioned to that state, and stay\n<em>as long as it remains in that state</em>. In effect, you're defining what styles the element has in different states.</p>\n<p>After you define states, you can define <em>transitions</em> between the states. Each transition\ncontrols the timing of switching between one set of styles and the next:</p>\n<code-example path=\"animations/src/app/hero-list-basic.component.ts\" region=\"transitions\" title=\"src/app/hero-list-basic.component.ts\" linenums=\"false\">\ntransition('inactive => active', animate('100ms ease-in')),\ntransition('active => inactive', animate('100ms ease-out'))\n\n</code-example>\n<figure>\n  <img src=\"generated/images/guide/animations/ng_animate_transitions_inactive_active.png\" alt=\"In Angular animations you define states and transitions between states\" width=\"400\">\n</figure>\n<p>If several transitions have the same timing configuration, you can combine\nthem into the same <code>transition</code> definition:</p>\n<code-example path=\"animations/src/app/hero-list-combined-transitions.component.ts\" region=\"transitions\" title=\"src/app/hero-list-combined-transitions.component.ts\" linenums=\"false\">\ntransition('inactive => active, active => inactive',\n animate('100ms ease-out'))\n\n</code-example>\n<p>When both directions of a transition have the same timing, as in the previous\nexample, you can use the shorthand syntax <code>&#x3C;=></code>:</p>\n<code-example path=\"animations/src/app/hero-list-twoway.component.ts\" region=\"transitions\" title=\"src/app/hero-list-twoway.component.ts\" linenums=\"false\">\ntransition('inactive &#x3C;=> active', animate('100ms ease-out'))\n\n</code-example>\n<p>You can also apply a style during an animation but not keep it around\nafter the animation finishes. You can define such styles inline, in the <code>transition</code>. In this example,\nthe element receives one set of styles immediately and is then animated to the next.\nWhen the transition finishes, none of these styles are kept because they're not\ndefined in a <code>state</code>.</p>\n<code-example path=\"animations/src/app/hero-list-inline-styles.component.ts\" region=\"transitions\" title=\"src/app/hero-list-inline-styles.component.ts\" linenums=\"false\">\ntransition('inactive => active', [\n  style({\n    backgroundColor: '#cfd8dc',\n    transform: 'scale(1.3)'\n  }),\n  animate('80ms ease-in', style({\n    backgroundColor: '#eee',\n    transform: 'scale(1)'\n  }))\n]),\n\n</code-example>\n<h3 id=\"the-wildcard-state-\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#the-wildcard-state-\"><i class=\"material-icons\">link</i></a>The wildcard state <code>*</code></h3>\n<p>The <code>*</code> (\"wildcard\") state matches <em>any</em> animation state. This is useful for defining styles and\ntransitions that apply regardless of which state the animation is in. For example:</p>\n<ul>\n<li>The <code>active => *</code> transition applies when the element's state changes from <code>active</code> to anything else.</li>\n<li>The <code>* => *</code> transition applies when <em>any</em> change between two states takes place.</li>\n</ul>\n<figure>\n  <img src=\"generated/images/guide/animations/ng_animate_transitions_inactive_active_wildcards.png\" alt=\"The wildcard state can be used to match many different transitions at once\" width=\"400\">\n</figure>\n<h3 id=\"the-void-state\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#the-void-state\"><i class=\"material-icons\">link</i></a>The <code>void</code> state</h3>\n<p>The special state called <code>void</code> can apply to any animation. It applies\nwhen the element is <em>not</em> attached to a view, perhaps because it has not yet been\nadded or because it has been removed. The <code>void</code> state is useful for defining enter and\nleave animations.</p>\n<p>For example the <code>* => void</code> transition applies when the element leaves the view,\nregardless of what state it was in before it left.</p>\n<figure>\n  <img src=\"generated/images/guide/animations/ng_animate_transitions_void_in.png\" alt=\"The void state can be used for enter and leave transitions\" width=\"400\">\n</figure>\n<p>The wildcard state <code>*</code> also matches <code>void</code>.</p>\n<h2 id=\"example-entering-and-leaving\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#example-entering-and-leaving\"><i class=\"material-icons\">link</i></a>Example: Entering and leaving</h2>\n<img src=\"generated/images/guide/animations/animation_enter_leave.gif\" alt=\"Enter and leave animations\" class=\"right\" width=\"250\">\n<p>Using the <code>void</code> and <code>*</code> states you can define transitions that animate the\nentering and leaving of elements:</p>\n<ul>\n<li>Enter: <code>void => *</code></li>\n<li>Leave: <code>* => void</code></li>\n</ul>\n<p>For example, in the <code>animations</code> array below there are two transitions that use\nthe <code>void => *</code> and <code>* => void</code> syntax to animate the element in and out of the view.</p>\n<code-example path=\"animations/src/app/hero-list-enter-leave.component.ts\" region=\"animationdef\" title=\"hero-list-enter-leave.component.ts (excerpt)\" linenums=\"false\">\nanimations: [\n  trigger('flyInOut', [\n    state('in', style({transform: 'translateX(0)'})),\n    transition('void => *', [\n      style({transform: 'translateX(-100%)'}),\n      animate(100)\n    ]),\n    transition('* => void', [\n      animate(100, style({transform: 'translateX(100%)'}))\n    ])\n  ])\n]\n\n</code-example>\n<p>Note that in this case the styles are applied to the void state directly in the\ntransition definitions, and not in a separate <code>state(void)</code> definition. Thus, the transforms\nare different on enter and leave: the element enters from the left\nand leaves to the right.</p>\n<div class=\"l-sub-section\">\n<p>These two common animations have their own aliases:</p>\n<code-example language=\"typescript\">\n  transition(':enter', [ ... ]); // void => *\n  transition(':leave', [ ... ]); // * => void\n</code-example>\n</div>\n<h2 id=\"example-entering-and-leaving-from-different-states\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#example-entering-and-leaving-from-different-states\"><i class=\"material-icons\">link</i></a>Example: Entering and leaving from different states</h2>\n<img src=\"generated/images/guide/animations/animation_enter_leave_states.gif\" alt=\"Enter and leave animations combined with state animations\" class=\"right\" width=\"200\">\n<p>You can also combine this animation with the earlier state transition animation by\nusing the hero state as the animation state. This lets you configure\ndifferent transitions for entering and leaving based on what the state of the hero\nis:</p>\n<ul>\n<li>Inactive hero enter: <code>void => inactive</code></li>\n<li>Active hero enter: <code>void => active</code></li>\n<li>Inactive hero leave: <code>inactive => void</code></li>\n<li>Active hero leave: <code>active => void</code></li>\n</ul>\n<p>This gives you fine-grained control over each transition:</p>\n<figure>\n  <img src=\"generated/images/guide/animations/ng_animate_transitions_inactive_active_void.png\" alt=\"This example transitions between active, inactive, and void states\" width=\"400\">\n</figure>\n<code-example path=\"animations/src/app/hero-list-enter-leave-states.component.ts\" region=\"animationdef\" title=\"hero-list-enter-leave.component.ts (excerpt)\" linenums=\"false\">\nanimations: [\n  trigger('heroState', [\n    state('inactive', style({transform: 'translateX(0) scale(1)'})),\n    state('active',   style({transform: 'translateX(0) scale(1.1)'})),\n    transition('inactive => active', animate('100ms ease-in')),\n    transition('active => inactive', animate('100ms ease-out')),\n    transition('void => inactive', [\n      style({transform: 'translateX(-100%) scale(1)'}),\n      animate(100)\n    ]),\n    transition('inactive => void', [\n      animate(100, style({transform: 'translateX(100%) scale(1)'}))\n    ]),\n    transition('void => active', [\n      style({transform: 'translateX(0) scale(0)'}),\n      animate(200)\n    ]),\n    transition('active => void', [\n      animate(200, style({transform: 'translateX(0) scale(0)'}))\n    ])\n  ])\n]\n\n</code-example>\n<h2 id=\"animatable-properties-and-units\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#animatable-properties-and-units\"><i class=\"material-icons\">link</i></a>Animatable properties and units</h2>\n<p>Since Angular's animation support builds on top of Web Animations, you can animate any property\nthat the browser considers <em>animatable</em>. This includes positions, sizes, transforms, colors,\nborders, and many others. The W3C maintains\n<a href=\"https://www.w3.org/TR/css3-transitions/#animatable-properties\">a list of animatable properties</a>\non its <a href=\"https://www.w3.org/TR/css3-transitions\">CSS Transitions page</a>.</p>\n<p>For positional properties that have a numeric value, you can define a unit by providing\nthe value as a string with the appropriate suffix:</p>\n<ul>\n<li><code>'50px'</code></li>\n<li><code>'3em'</code></li>\n<li><code>'100%'</code></li>\n</ul>\n<p>If you don't provide a unit when specifying dimension, Angular assumes the default of <code>px</code>:</p>\n<ul>\n<li><code>50</code> is the same as saying <code>'50px'</code></li>\n</ul>\n<h2 id=\"automatic-property-calculation\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#automatic-property-calculation\"><i class=\"material-icons\">link</i></a>Automatic property calculation</h2>\n<img src=\"generated/images/guide/animations/animation_auto.gif\" alt=\"Animation with automated height calculation\" class=\"right\" width=\"220\">\n<p>Sometimes you don't know the value of a dimensional style property until runtime.\nFor example, elements often have widths and heights that\ndepend on their content and the screen size. These properties are often tricky\nto animate with CSS.</p>\n<p>In these cases, you can use a special <code>*</code> property value so that the value of the\nproperty is computed at runtime and then plugged into the animation.</p>\n<p>In this example, the leave animation takes whatever height the element has before it\nleaves and animates from that height to zero:</p>\n<code-example path=\"animations/src/app/hero-list-auto.component.ts\" region=\"animationdef\" title=\"src/app/hero-list-auto.component.ts\" linenums=\"false\">\nanimations: [\n  trigger('shrinkOut', [\n    state('in', style({height: '*'})),\n    transition('* => void', [\n      style({height: '*'}),\n      animate(250, style({height: 0}))\n    ])\n  ])\n]\n\n</code-example>\n<h2 id=\"animation-timing\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#animation-timing\"><i class=\"material-icons\">link</i></a>Animation timing</h2>\n<p>There are three timing properties you can tune for every animated transition:\nthe duration, the delay, and the easing function. They are all combined into\na single transition <em>timing string</em>.</p>\n<h3 id=\"duration\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#duration\"><i class=\"material-icons\">link</i></a>Duration</h3>\n<p>The duration controls how long the animation takes to run from start to finish.\nYou can define a duration in three ways:</p>\n<ul>\n<li>As a plain number, in milliseconds: <code>100</code></li>\n<li>In a string, as milliseconds: <code>'100ms'</code></li>\n<li>In a string, as seconds: <code>'0.1s'</code></li>\n</ul>\n<h3 id=\"delay\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#delay\"><i class=\"material-icons\">link</i></a>Delay</h3>\n<p>The delay controls the length of time between the animation trigger and the beginning\nof the transition. You can define one by adding it to the same string\nfollowing the duration. It also has the same format options as the duration:</p>\n<ul>\n<li>Wait for 100ms and then run for 200ms: <code>'0.2s 100ms'</code></li>\n</ul>\n<h3 id=\"easing\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#easing\"><i class=\"material-icons\">link</i></a>Easing</h3>\n<p>The <a href=\"http://easings.net/\">easing function</a> controls how the animation accelerates\nand decelerates during its runtime. For example, an <code>ease-in</code> function causes\nthe animation to begin relatively slowly but pick up speed as it progresses. You\ncan control the easing by adding it as a <em>third</em> value in the string after the duration\nand the delay (or as the <em>second</em> value when there is no delay):</p>\n<ul>\n<li>Wait for 100ms and then run for 200ms, with easing: <code>'0.2s 100ms ease-out'</code></li>\n<li>Run for 200ms, with easing: <code>'0.2s ease-in-out'</code></li>\n</ul>\n<img src=\"generated/images/guide/animations/animation_timings.gif\" alt=\"Animations with specific timings\" class=\"right\" width=\"220\">\n<h3 id=\"example\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#example\"><i class=\"material-icons\">link</i></a>Example</h3>\n<p>Here are a couple of custom timings in action. Both enter and leave last for\n200 milliseconds, that is <code>0.2s</code>, but they have different easings. The leave begins after a\nslight delay of 10 milliseconds as specified in <code>'0.2s 10 ease-out'</code>:</p>\n<code-example path=\"animations/src/app/hero-list-timings.component.ts\" region=\"animationdef\" title=\"hero-list-timings.component.ts (excerpt)\" linenums=\"false\">\nanimations: [\n  trigger('flyInOut', [\n    state('in', style({opacity: 1, transform: 'translateX(0)'})),\n    transition('void => *', [\n      style({\n        opacity: 0,\n        transform: 'translateX(-100%)'\n      }),\n      animate('0.2s ease-in')\n    ]),\n    transition('* => void', [\n      animate('0.2s 0.1s ease-out', style({\n        opacity: 0,\n        transform: 'translateX(100%)'\n      }))\n    ])\n  ])\n]\n\n</code-example>\n<h2 id=\"multi-step-animations-with-keyframes\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#multi-step-animations-with-keyframes\"><i class=\"material-icons\">link</i></a>Multi-step animations with keyframes</h2>\n<img src=\"generated/images/guide/animations/animation_multistep.gif\" alt=\"Animations with some bounce implemented with keyframes\" class=\"right\" width=\"220\">\n<p>Animation <em>keyframes</em> go beyond a simple transition to a more intricate animation\nthat goes through one or more intermediate styles when transitioning between two sets of styles.</p>\n<p>For each keyframe, you specify an <em>offset</em> that defines at which point\nin the animation that keyframe applies. The offset is a number between zero,\nwhich marks the beginning of the animation, and one, which marks the end.</p>\n<p>This example adds some \"bounce\" to the enter and leave animations with\nkeyframes:</p>\n<code-example path=\"animations/src/app/hero-list-multistep.component.ts\" region=\"animationdef\" title=\"hero-list-multistep.component.ts (excerpt)\" linenums=\"false\">\nanimations: [\n  trigger('flyInOut', [\n    state('in', style({transform: 'translateX(0)'})),\n    transition('void => *', [\n      animate(300, keyframes([\n        style({opacity: 0, transform: 'translateX(-100%)', offset: 0}),\n        style({opacity: 1, transform: 'translateX(15px)',  offset: 0.3}),\n        style({opacity: 1, transform: 'translateX(0)',     offset: 1.0})\n      ]))\n    ]),\n    transition('* => void', [\n      animate(300, keyframes([\n        style({opacity: 1, transform: 'translateX(0)',     offset: 0}),\n        style({opacity: 1, transform: 'translateX(-15px)', offset: 0.7}),\n        style({opacity: 0, transform: 'translateX(100%)',  offset: 1.0})\n      ]))\n    ])\n  ])\n]\n\n</code-example>\n<p>Note that the offsets are <em>not</em> defined in terms of absolute time. They are relative\nmeasures from zero to one. The final timeline of the animation is based on the combination\nof keyframe offsets, duration, delay, and easing.</p>\n<p>Defining offsets for keyframes is optional. If you omit them, offsets with even\nspacing are automatically assigned. For example, three keyframes without predefined\noffsets receive offsets <code>0</code>, <code>0.5</code>, and <code>1</code>.</p>\n<h2 id=\"parallel-animation-groups\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#parallel-animation-groups\"><i class=\"material-icons\">link</i></a>Parallel animation groups</h2>\n<img src=\"generated/images/guide/animations/animation_groups.gif\" alt=\"Parallel animations with different timings, implemented with groups\" class=\"right\" width=\"220px\">\n<p>You've seen how to animate multiple style properties at the same time:\njust put all of them into the same <code>style()</code> definition.</p>\n<p>But you may also want to configure different <em>timings</em> for animations that happen\nin parallel. For example, you may want to animate two CSS properties but use a\ndifferent easing function for each one.</p>\n<p>For this you can use animation <em>groups</em>. In this example, using groups both on\nenter and leave allows for two different timing configurations. Both\nare applied to the same element in parallel, but run independently of each other:</p>\n<code-example path=\"animations/src/app/hero-list-groups.component.ts\" region=\"animationdef\" title=\"hero-list-groups.component.ts (excerpt)\" linenums=\"false\">\nanimations: [\n  trigger('flyInOut', [\n    state('in', style({width: 120, transform: 'translateX(0)', opacity: 1})),\n    transition('void => *', [\n      style({width: 10, transform: 'translateX(50px)', opacity: 0}),\n      group([\n        animate('0.3s 0.1s ease', style({\n          transform: 'translateX(0)',\n          width: 120\n        })),\n        animate('0.3s ease', style({\n          opacity: 1\n        }))\n      ])\n    ]),\n    transition('* => void', [\n      group([\n        animate('0.3s ease', style({\n          transform: 'translateX(50px)',\n          width: 10\n        })),\n        animate('0.3s 0.2s ease', style({\n          opacity: 0\n        }))\n      ])\n    ])\n  ])\n]\n\n</code-example>\n<p>One group animates the element transform and width; the other group animates the opacity.</p>\n<h2 id=\"animation-callbacks\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/animations#animation-callbacks\"><i class=\"material-icons\">link</i></a>Animation callbacks</h2>\n<p>A callback is fired when an animation is started and also when it is done.</p>\n<p>In the keyframes example, you have a <code>trigger</code> called <code>@flyInOut</code>. You can hook\nthose callbacks like this:</p>\n<code-example path=\"animations/src/app/hero-list-multistep.component.ts\" region=\"template\" title=\"hero-list-multistep.component.ts (excerpt)\" linenums=\"false\">\ntemplate: `\n  &#x3C;ul>\n    &#x3C;li *ngFor=\"let hero of heroes\"\n        (@flyInOut.start)=\"animationStarted($event)\"\n        (@flyInOut.done)=\"animationDone($event)\"\n        [@flyInOut]=\"'in'\">\n      {{hero.name}}\n    &#x3C;/li>\n  &#x3C;/ul>\n`,\n\n</code-example>\n<p>The callbacks receive an <code><a href=\"api/animations/AnimationEvent\">AnimationEvent</a></code> that contains useful properties such as\n<code>fromState</code>, <code>toState</code> and <code>totalTime</code>.</p>\n<p>Those callbacks will fire whether or not an animation is picked up.</p>\n\n</div>"
}