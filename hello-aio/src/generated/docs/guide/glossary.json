{
  "id": "guide/glossary",
  "title": "Angular Glossary",
  "contents": "\n<div class=\"content\">\n<h1 id=\"angular-glossary\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#angular-glossary\"><i class=\"material-icons\">link</i></a>Angular Glossary</h1>\n<p>Angular has its own vocabulary.\nMost Angular terms are common English words\nwith a specific meaning within the Angular system.</p>\n<p>This glossary lists the most prominent terms\nand a few less familiar ones that have unusual or\nunexpected definitions.</p>\n<p><a href=\"guide/glossary#A\">A</a> <a href=\"guide/glossary#B\">B</a> <a href=\"guide/glossary#C\">C</a> <a href=\"guide/glossary#D\">D</a> <a href=\"guide/glossary#E\">E</a> <a href=\"guide/glossary#F\">F</a> <a href=\"guide/glossary#G\">G</a> <a href=\"guide/glossary#H\">H</a> <a href=\"guide/glossary#I\">I</a>\n<a href=\"guide/glossary#J\">J</a> <a href=\"guide/glossary#K\">K</a> <a href=\"guide/glossary#L\">L</a> <a href=\"guide/glossary#M\">M</a> <a href=\"guide/glossary#N\">N</a> <a href=\"guide/glossary#O\">O</a> <a href=\"guide/glossary#P\">P</a> <a href=\"guide/glossary#Q\">Q</a> <a href=\"guide/glossary#R\">R</a>\n<a href=\"guide/glossary#S\">S</a> <a href=\"guide/glossary#T\">T</a> <a href=\"guide/glossary#U\">U</a> <a href=\"guide/glossary#V\">V</a> <a href=\"guide/glossary#W\">W</a> <a href=\"guide/glossary#X\">X</a> <a href=\"guide/glossary#Y\">Y</a> <a href=\"guide/glossary#Z\">Z</a></p>\n<a id=\"A\"></a>\n<a id=\"aot\"></a>\n<h2 id=\"ahead-of-time-aot-compilation\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#ahead-of-time-aot-compilation\"><i class=\"material-icons\">link</i></a>Ahead-of-time (AOT) compilation</h2>\n<p>You can compile Angular applications at build time.\nBy compiling your application using the compiler-cli, <code>ngc</code>, you can bootstrap directly\nto a module factory, meaning you don't need to include the Angular compiler in your JavaScript bundle.\nAhead-of-time compiled applications also benefit from decreased load time and increased performance.</p>\n</div>\n<h2 id=\"annotation\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#annotation\"><i class=\"material-icons\">link</i></a>Annotation</h2>\n<p>In practice, a synonym for <a href=\"guide/glossary#decorator\">Decoration</a>.</p>\n<a id=\"attribute-directive\"></a>\n<a id=\"attribute-directives\"></a>\n<h2 id=\"attribute-directives\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#attribute-directives\"><i class=\"material-icons\">link</i></a>Attribute directives</h2>\n<p>A category of <a href=\"guide/glossary#directive\">directive</a> that can listen to and modify the behavior of\nother HTML elements, attributes, properties, and components. They are usually represented\nas HTML attributes, hence the name.</p>\n<p>For example, you can use the <code>ngClass</code> directive to add and remove CSS class names.</p>\n<p>Learn about them in the <a href=\"guide/attribute-directives\"><em>Attribute Directives</em></a> guide.</p>\n<a id=\"B\"></a>\n<h2 id=\"barrel\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#barrel\"><i class=\"material-icons\">link</i></a>Barrel</h2>\n<p>A way to <em>roll up exports</em> from several ES2015 modules into a single convenient ES2015 module.\nThe barrel itself is an ES2015 module file that re-exports <em>selected</em> exports of other ES2015 modules.</p>\n<p>For example, imagine three ES2015 modules in a <code>heroes</code> folder:</p>\n<code-example>\n  // heroes/hero.component.ts\n  export class HeroComponent {}\n\n  // heroes/hero.model.ts\n  export class Hero {}\n\n  // heroes/hero.service.ts\n  export class HeroService {}\n</code-example>\n<p>Without a barrel, a consumer needs three import statements:</p>\n<code-example>\n  import { HeroComponent } from '../heroes/hero.component.ts';\n  import { Hero }          from '../heroes/hero.model.ts';\n  import { HeroService }   from '../heroes/hero.service.ts';\n</code-example>\n<p>You can add a barrel to the <code>heroes</code> folder (called <code>index</code>, by convention) that exports all of these items:</p>\n<code-example>\n  export * from './hero.model.ts';   // re-export all of its exports\n  export * from './hero.service.ts'; // re-export all of its exports\n  export { HeroComponent } from './hero.component.ts'; // re-export the named thing\n</code-example>\n<p>Now a consumer can import what it needs from the barrel.</p>\n<code-example>\n  import { Hero, HeroService } from '../heroes'; // index is implied\n</code-example>\n<p>The Angular <a href=\"guide/glossary#scoped-package\">scoped packages</a> each have a barrel named <code>index</code>.</p>\n<div class=\"alert is-important\">\n<p>You can often achieve the same result using <a href=\"guide/glossary#ngmodule\">NgModules</a> instead.</p>\n</div>\n<h2 id=\"binding\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#binding\"><i class=\"material-icons\">link</i></a>Binding</h2>\n<p>Usually refers to <a href=\"guide/glossary#data-binding\">data binding</a> and the act of\nbinding an HTML object property to a data object property.</p>\n<p>Sometimes refers to a <a href=\"guide/glossary#dependency-injection\">dependency-injection</a> binding\nbetween a \"token\"—also referred to as a \"key\"—and a dependency <a href=\"guide/glossary#provider\">provider</a>.</p>\n<h2 id=\"bootstrap\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#bootstrap\"><i class=\"material-icons\">link</i></a>Bootstrap</h2>\n<div class=\"l-sub-section\">\n<p>You launch an Angular application by \"bootstrapping\" it using the application root NgModule (<code>AppModule</code>).</p>\n<p>Bootstrapping identifies an application's top level \"root\" <a href=\"guide/glossary#component\">component</a>,\nwhich is the first component that is loaded for the application.\nFor more information, see the <a href=\"guide/setup\">Setup</a> page.</p>\n<p>You can bootstrap multiple apps in the same <code>index.html</code>, each app with its own top-level root.</p>\n<a id=\"C\"></a>\n<h2 id=\"camelcase\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#camelcase\"><i class=\"material-icons\">link</i></a>camelCase</h2>\n<p>The practice of writing compound words or phrases such that each word or abbreviation begins with a capital letter\n<em>except the first letter, which is lowercase</em>.</p>\n<p>Function, property, and method names are typically spelled in camelCase. For example, <code>square</code>, <code>firstName</code>, and <code>getHeroes</code>. Notice that <code>square</code> is an example of how you write a single word in camelCase.</p>\n<p>camelCase is also known as <em>lower camel case</em> to distinguish it from <em>upper camel case</em>, or <a href=\"guide/glossary#pascalcase\">PascalCase</a>.\nIn Angular documentation, \"camelCase\" always means <em>lower camel case</em>.</p>\n<a id=\"component\"></a>\n<h2 id=\"component\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#component\"><i class=\"material-icons\">link</i></a>Component</h2>\n<p>An Angular class responsible for exposing data to a <a href=\"guide/glossary#view\">view</a> and handling most of the view’s display and user-interaction logic.</p>\n<p>The <em>component</em> is one of the most important building blocks in the Angular system.\nIt is, in fact, an Angular <a href=\"guide/glossary#directive\">directive</a> with a companion <a href=\"guide/glossary#template\">template</a>.</p>\n<p>Apply the <code>@Component</code> <a href=\"guide/glossary#decorator\">decorator</a> to\nthe component class, thereby attaching to the class the essential component metadata\nthat Angular needs to create a component instance and render the component with its template\nas a view.</p>\n<p>Those familiar with \"MVC\" and \"MVVM\" patterns will recognize\nthe component in the role of \"controller\" or \"view model\".</p>\n<a id=\"D\"></a>\n<h2 id=\"dash-case\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#dash-case\"><i class=\"material-icons\">link</i></a>dash-case</h2>\n<p>The practice of writing compound words or phrases such that each word is separated by a dash or hyphen (<code>-</code>).\nThis form is also known as kebab-case.</p>\n<p><a href=\"guide/glossary#directive\">Directive</a> selectors (like <code>my-app</code>) and\nthe root of filenames (such as <code>hero-list.component.ts</code>) are often\nspelled in dash-case.</p>\n<h2 id=\"data-binding\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#data-binding\"><i class=\"material-icons\">link</i></a>Data binding</h2>\n<p>Applications display data values to a user and respond to user\nactions (such as clicks, touches, and keystrokes).</p>\n<p>In data binding, you declare the relationship between an HTML widget and data source\nand let the framework handle the details.\nData binding is an alternative to manually pushing application data values into HTML, attaching\nevent listeners, pulling changed values from the screen, and\nupdating application data values.</p>\n<p>Angular has a rich data-binding framework with a variety of data-binding\noperations and supporting declaration syntax.</p>\n<p> Read about the following forms of binding in the <a href=\"guide/template-syntax\">Template Syntax</a> page:</p>\n<ul>\n<li><a href=\"guide/template-syntax#interpolation\">Interpolation</a>.</li>\n<li><a href=\"guide/template-syntax#property-binding\">Property binding</a>.</li>\n<li><a href=\"guide/template-syntax#event-binding\">Event binding</a>.</li>\n<li><a href=\"guide/template-syntax#attribute-binding\">Attribute binding</a>.</li>\n<li><a href=\"guide/template-syntax#class-binding\">Class binding</a>.</li>\n<li><a href=\"guide/template-syntax#style-binding\">Style binding</a>.</li>\n<li><a href=\"guide/template-syntax#ngModel\">Two-way data binding with ngModel</a>.</li>\n</ul>\n<a id=\"decorator\"></a>\n<a id=\"decoration\"></a>\n<h2 id=\"decorator--decoration\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#decorator--decoration\"><i class=\"material-icons\">link</i></a>Decorator | decoration</h2>\n<p>A <em>function</em> that adds metadata to a class, its members (properties, methods) and function arguments.</p>\n<p>Decorators are an experimental (stage 2), JavaScript language <a href=\"https://github.com/wycats/javascript-decorators\">feature</a>. TypeScript adds support for decorators.</p>\n<p>To apply a decorator, position it immediately above or to the left of the item it decorates.</p>\n<p>Angular has its own set of decorators to help it interoperate with your application parts.\nThe following example is a <code>@Component</code> decorator that identifies a\nclass as an Angular <a href=\"guide/glossary#component\">component</a> and an <code>@Input</code> decorator applied to the <code>name</code> property\nof that component. The elided object argument to the <code>@Component</code> decorator would contain the pertinent component metadata.</p>\n<code-example>\n@Component({...})\nexport class AppComponent {\n  constructor(@Inject('SpecialFoo') public foo:Foo) {}\n  @Input() name:string;\n}\n</code-example>\n<p>The scope of a decorator is limited to the language feature\nthat it decorates. None of the decorations shown here will \"leak\" to other\nclasses that follow it in the file.</p>\n<div class=\"alert is-important\">\n<p>Always include parentheses <code>()</code> when applying a decorator.</p>\n</div>\n<h2 id=\"dependency-injection\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#dependency-injection\"><i class=\"material-icons\">link</i></a>Dependency injection</h2>\n<p>A design pattern and mechanism\nfor creating and delivering parts of an application to other\nparts of an application that request them.</p>\n<p>Angular developers prefer to build applications by defining many simple parts\nthat each do one thing well and then wiring them together at runtime.</p>\n<p>These parts often rely on other parts. An Angular <a href=\"guide/glossary#component\">component</a>\npart might rely on a service part to get data or perform a calculation. When\npart \"A\" relies on another part \"B,\" you say that \"A\" depends on \"B\" and\nthat \"B\" is a dependency of \"A.\"</p>\n<p>You can ask a \"dependency injection system\" to create \"A\"\nfor us and handle all the dependencies.\nIf \"A\" needs \"B\" and \"B\" needs \"C,\" the system resolves that chain of dependencies\nand returns a fully prepared instance of \"A.\"</p>\n<p>Angular provides and relies upon its own sophisticated\ndependency-injection system\nto assemble and run applications by \"injecting\" application parts\ninto other application parts where and when needed.</p>\n<p>At the core, an <a href=\"guide/glossary#injector\"><code>injector</code></a> returns dependency values on request.\nThe expression <code>injector.get(token)</code> returns the value associated with the given token.</p>\n<p>A token is an Angular type (<code><a href=\"api/core/InjectionToken\">InjectionToken</a></code>). You rarely need to work with tokens directly; most\nmethods accept a class name (<code>Foo</code>) or a string (\"foo\") and Angular converts it\nto a token. When you write <code>injector.get(Foo)</code>, the injector returns\nthe value associated with the token for the <code>Foo</code> class, typically an instance of <code>Foo</code> itself.</p>\n<p>During many of its operations, Angular makes similar requests internally, such as when it creates a <a href=\"guide/glossary#component\"><code>component</code></a> for display.</p>\n<p>The <code><a href=\"api/core/Injector\">Injector</a></code> maintains an internal map of tokens to dependency values.\nIf the <code><a href=\"api/core/Injector\">Injector</a></code> can't find a value for a given token, it creates\na new value using a <code><a href=\"api/core/Provider\">Provider</a></code> for that token.</p>\n<p>A <a href=\"guide/glossary#provider\">provider</a> is a recipe for\ncreating new instances of a dependency value associated with a particular token.</p>\n<p>An injector can only create a value for a given token if it has\na <code>provider</code> for that token in its internal provider registry.\nRegistering providers is a critical preparatory step.</p>\n<p>Angular registers some of its own providers with every injector.\nYou can register your own providers.</p>\n<p>Read more in the <a href=\"guide/dependency-injection\">Dependency Injection</a> page.</p>\n<a id=\"directive\"></a>\n<a id=\"directives\"></a>\n<h2 id=\"directive\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#directive\"><i class=\"material-icons\">link</i></a>Directive</h2>\n<p>An Angular class responsible for creating, reshaping, and interacting with HTML elements\nin the browser DOM. The directive is Angular's most fundamental feature.</p>\n<p>A directive is usually associated with an HTML element or attribute.\nThis element or attribute is often referred to as the directive itself.</p>\n<p>When Angular finds a directive in an HTML template,\nit creates the matching directive class instance\nand gives the instance control over that portion of the browser DOM.</p>\n<p>You can invent custom HTML markup (for example, <code>&#x3C;my-directive></code>) to\nassociate with your custom directives. You add this custom markup to HTML templates\nas if you were writing native HTML. In this way, directives become extensions of\nHTML itself.</p>\n<p>Directives fall into one of the following categories:</p>\n<ul>\n<li>\n<p><a href=\"guide/glossary#component\">Components</a> combine application logic with an HTML template to\nrender application <a href=\"guide/glossary#view\">views</a>. Components are usually represented as HTML elements.\nThey are the building blocks of an Angular application.</p>\n</li>\n<li>\n<p><a href=\"guide/glossary#attribute-directive\">Attribute directives</a> can listen to and modify the behavior of\nother HTML elements, attributes, properties, and components. They are usually represented\nas HTML attributes, hence the name.</p>\n</li>\n<li>\n<p><a href=\"guide/glossary#structural-directive\">Structural directives</a> are responsible for\nshaping or reshaping HTML layout, typically by adding, removing, or manipulating\nelements and their children.</p>\n</li>\n</ul>\n<a id=\"E\"></a>\n<h2 id=\"ecmascript\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#ecmascript\"><i class=\"material-icons\">link</i></a>ECMAScript</h2>\n<p>The <a href=\"https://en.wikipedia.org/wiki/ECMAScript\">official JavaScript language specification</a>.</p>\n<p>The latest approved version of JavaScript is\n<a href=\"http://www.ecma-international.org/ecma-262/8.0/\">ECMAScript 2017</a>\n(also known as \"ES2017\" or \"ES8\"). Many Angular developers write their applications\nin ES8 or a dialect that strives to be\ncompatible with it, such as <a href=\"guide/glossary#typescript\">TypeScript</a>.</p>\n<p>Most modern browsers only support the much older \"ECMAScript 5\" (also known as \"ES5\") standard.\nApplications written in ES2017, ES2016, ES2015, or one of their dialects must be <a href=\"guide/glossary#transpile\">transpiled</a>\nto ES5 JavaScript.</p>\n<p>Angular developers can write in ES5 directly.</p>\n<h2 id=\"es2015\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#es2015\"><i class=\"material-icons\">link</i></a>ES2015</h2>\n<p>Short hand for <a href=\"guide/glossary#ecmascript\">ECMAScript</a> 2015.</p>\n<h2 id=\"es5\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#es5\"><i class=\"material-icons\">link</i></a>ES5</h2>\n<p>Short hand for <a href=\"guide/glossary#ecmascript\">ECMAScript</a> 5, the version of JavaScript run by most modern browsers.</p>\n<h2 id=\"es6\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#es6\"><i class=\"material-icons\">link</i></a>ES6</h2>\n<p>Short hand for <a href=\"guide/glossary#ecmascript\">ECMAScript</a> 2015.</p>\n<a id=\"F\"></a>\n<a id=\"G\"></a>\n<a id=\"H\"></a>\n<a id=\"I\"></a>\n<h2 id=\"injector\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#injector\"><i class=\"material-icons\">link</i></a>Injector</h2>\n<p>An object in the Angular <a href=\"guide/glossary#dependency-injection\">dependency-injection system</a>\nthat can find a named dependency in its cache or create a dependency\nwith a registered <a href=\"guide/glossary#provider\">provider</a>.</p>\n<h2 id=\"input\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#input\"><i class=\"material-icons\">link</i></a>Input</h2>\n<p>A directive property that can be the <em>target</em> of a\n<a href=\"guide/template-syntax#property-binding\">property binding</a> (explained in detail in the <a href=\"guide/template-syntax\">Template Syntax</a> page).\nData values flow <em>into</em> this property from the data source identified\nin the template expression to the right of the equal sign.</p>\n<p>See the <a href=\"guide/template-syntax#inputs-outputs\">Input and output properties</a> section of the <a href=\"guide/template-syntax\">Template Syntax</a> page.</p>\n<h2 id=\"interpolation\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#interpolation\"><i class=\"material-icons\">link</i></a>Interpolation</h2>\n<p>A form of <a href=\"guide/glossary#data-binding\">property data binding</a> in which a\n<a href=\"guide/glossary#template-expression\">template expression</a> between double-curly braces\nrenders as text.  That text may be concatenated with neighboring text\nbefore it is assigned to an element property\nor displayed between element tags, as in this example.</p>\n<code-example language=\"html\" escape=\"html\">\n  <label>My current hero is {{hero.name}}</label>\n\n</code-example>\n<p>Read more about <a href=\"guide/template-syntax#interpolation\">interpolation</a> in the\n<a href=\"guide/template-syntax\">Template Syntax</a> page.</p>\n<a id=\"J\"></a>\n<a id=\"jit\"></a>\n<h2 id=\"just-in-time-jit-compilation\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#just-in-time-jit-compilation\"><i class=\"material-icons\">link</i></a>Just-in-time (JIT) compilation</h2>\n<p>A bootstrapping method of compiling components and modules in the browser\nand launching the application dynamically. Just-in-time mode is a good choice during development.\nConsider using the <a href=\"guide/glossary#aot\">ahead-of-time</a> mode for production apps.</p>\n<a id=\"K\"></a>\n<h2 id=\"kebab-case\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#kebab-case\"><i class=\"material-icons\">link</i></a>kebab-case</h2>\n<p>See <a href=\"guide/glossary#dash-case\">dash-case</a>.</p>\n<a id=\"L\"></a>\n<h2 id=\"lifecycle-hooks\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#lifecycle-hooks\"><i class=\"material-icons\">link</i></a>Lifecycle hooks</h2>\n<p><a href=\"guide/glossary#directive\">Directives</a> and <a href=\"guide/glossary#component\">components</a> have a lifecycle\nmanaged by Angular as it creates, updates, and destroys them.</p>\n<p>You can tap into key moments in that lifecycle by implementing\none or more of the lifecycle hook interfaces.</p>\n<p>Each interface has a single hook method whose name is the interface name prefixed with <code>ng</code>.\nFor example, the <code><a href=\"api/core/OnInit\">OnInit</a></code> interface has a hook method named <code>ngOnInit</code>.</p>\n<p>Angular calls these hook methods in the following order:</p>\n<ul>\n<li><code>ngOnChanges</code>: when an <a href=\"guide/glossary#input\">input</a>/<a href=\"guide/glossary#output\">output</a> binding value changes.</li>\n<li><code>ngOnInit</code>: after the first <code>ngOnChanges</code>.</li>\n<li><code>ngDoCheck</code>: developer's custom change detection.</li>\n<li><code>ngAfterContentInit</code>: after component content initialized.</li>\n<li><code>ngAfterContentChecked</code>: after every check of component content.</li>\n<li><code>ngAfterViewInit</code>: after a component's views are initialized.</li>\n<li><code>ngAfterViewChecked</code>: after every check of a component's views.</li>\n<li><code>ngOnDestroy</code>: just before the directive is destroyed.</li>\n</ul>\n<p>Read more in the <a href=\"guide/lifecycle-hooks\">Lifecycle Hooks</a> page.</p>\n<a id=\"M\"></a>\n<h2 id=\"module\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#module\"><i class=\"material-icons\">link</i></a>Module</h2>\n<div class=\"alert is-important\">\n<p>Angular has the following types of modules:</p>\n<ul>\n<li><a href=\"guide/glossary#ngmodule\">NgModules</a>.\nFor details and examples, see the <a href=\"guide/ngmodule\">NgModules</a> page.</li>\n<li>ES2015 modules, as described in this section.</li>\n</ul>\n</div>\n<p>A cohesive block of code dedicated to a single purpose.</p>\n<p>Angular apps are modular.</p>\n<p>In general, you assemble an application from many modules, both the ones you write and the ones you acquire from others.</p>\n<p>A module <em>exports</em> something of value in that code, typically one thing such as a class;\na module that needs that class <em>imports</em> it.</p>\n<p>The structure of NgModules and the import/export syntax\nis based on the <a href=\"http://www.2ality.com/2014/09/es6-modules-final.html\">ES2015 module standard</a>.</p>\n<p>An application that adheres to this standard requires a module loader to\nload modules on request and resolve inter-module dependencies.\nAngular doesn't include a module loader and doesn't have a preference\nfor any particular third-party library (although most examples use SystemJS).\nYou can use any module library that conforms to the standard.</p>\n<p>Modules are typically named after the file in which the exported thing is defined.\nThe Angular <a href=\"https://github.com/angular/angular/blob/master/packages/common/src/pipes/date_pipe.ts\">DatePipe</a>\nclass belongs to a feature module named <code>date_pipe</code> in the file <code>date_pipe.ts</code>.</p>\n<p>You rarely access Angular feature modules directly. You usually import them from an Angular <a href=\"guide/glossary#scoped-package\">scoped package</a> such as <code>@angular/core</code>.</p>\n<a id=\"N\"></a>\n<h2 id=\"ngmodule\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#ngmodule\"><i class=\"material-icons\">link</i></a>NgModule</h2>\n<div class=\"l-sub-section\">\n<p>Helps you organize an application into cohesive blocks of functionality.\nAn NgModule identifies the components, directives, and pipes that the application uses along with the list of external NgModules that the application needs, such as <code><a href=\"api/forms/FormsModule\">FormsModule</a></code>.</p>\n<p>Every Angular application has an application root-module class. By convention, the class is\ncalled <code>AppModule</code> and resides in a file named <code>app.module.ts</code>.</p>\n<p>For details and examples, see <a href=\"guide/ngmodule\">NgModules</a>.</p>\n</div>\n<a id=\"O\"></a>\n<h2 id=\"observable\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#observable\"><i class=\"material-icons\">link</i></a>Observable</h2>\n<p>An array whose items arrive asynchronously over time.\nObservables help you manage asynchronous data, such as data coming from a backend service.\nObservables are used within Angular itself, including Angular's event system and its HTTP client service.</p>\n<p>To use observables, Angular uses a third-party library called Reactive Extensions (RxJS).\nObservables are a proposed feature for ES2016, the next version of JavaScript.</p>\n<h2 id=\"output\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#output\"><i class=\"material-icons\">link</i></a>Output</h2>\n<p>A directive property that can be the <em>target</em> of event binding\n(read more in the <a href=\"guide/template-syntax#event-binding\">event binding</a>\nsection of the <a href=\"guide/template-syntax\">Template Syntax</a> page).\nEvents stream <em>out</em> of this property to the receiver identified\nin the template expression to the right of the equal sign.</p>\n<p>See the <a href=\"guide/template-syntax#inputs-outputs\">Input and output properties</a> section of the <a href=\"guide/template-syntax\">Template Syntax</a> page.</p>\n<a id=\"P\"></a>\n<h2 id=\"pascalcase\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#pascalcase\"><i class=\"material-icons\">link</i></a>PascalCase</h2>\n<p>The practice of writing individual words, compound words, or phrases such that each word or abbreviation begins with a capital letter.\nClass names are typically spelled in PascalCase. For example, <code>Person</code> and <code>HeroDetailComponent</code>.</p>\n<p>This form is also known as <em>upper camel case</em> to distinguish it from <em>lower camel case</em> or simply <a href=\"guide/glossary#camelcase\">camelCase</a>.\nIn this documentation, \"PascalCase\" means <em>upper camel case</em> and  \"camelCase\" means <em>lower camel case</em>.</p>\n<h2 id=\"pipe\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#pipe\"><i class=\"material-icons\">link</i></a>Pipe</h2>\n<p>An Angular pipe is a function that transforms input values to output values for\ndisplay in a <a href=\"guide/glossary#view\">view</a>.\nHere's an example that uses the built-in <code>currency</code> pipe to display\na numeric value in the local currency.</p>\n<code-example language=\"html\" escape=\"html\">\n  <label>Price: </label>{{product.price | currency}}\n\n</code-example>\n<p>You can also write your own custom pipes.\nRead more in the page on <a href=\"guide/pipes\">pipes</a>.</p>\n<h2 id=\"provider\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#provider\"><i class=\"material-icons\">link</i></a>Provider</h2>\n<p>A <em>provider</em> creates a new instance of a dependency for the\n<a href=\"guide/glossary#dependency-injection\">dependency injection</a> system.\nIt relates a lookup token to code—sometimes called a \"recipe\"—that can create a dependency value.</p>\n<a id=\"Q\"></a>\n<a id=\"R\"></a>\n<h2 id=\"reactive-forms\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#reactive-forms\"><i class=\"material-icons\">link</i></a>Reactive forms</h2>\n<p>A technique for building Angular forms through code in a component.\nThe alternative technique is <a href=\"guide/glossary#template-driven-forms\">template-driven forms</a>.</p>\n<p>When building reactive forms:</p>\n<ul>\n<li>The \"source of truth\" is the component. The validation is defined using code in the component.</li>\n<li>Each control is explicitly created in the component class with <code>new FormControl()</code> or with <code><a href=\"api/forms/FormBuilder\">FormBuilder</a></code>.</li>\n<li>The template input elements do <em>not</em> use <code>ngModel</code>.</li>\n<li>The associated Angular directives are all prefixed with <code><a href=\"api/forms/Form\">Form</a></code>, such as <code><a href=\"api/forms/FormGroup\">FormGroup</a></code>, <code><a href=\"api/forms/FormControl\">FormControl</a></code>, and <code><a href=\"api/forms/FormControlName\">FormControlName</a></code>.</li>\n</ul>\n<p>Reactive forms are powerful, flexible, and a good choice for more complex data-entry form scenarios, such as dynamic generation of form controls.</p>\n<h2 id=\"router\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#router\"><i class=\"material-icons\">link</i></a>Router</h2>\n<p>Most applications consist of many screens or <a href=\"guide/glossary#view\">views</a>.\nThe user navigates among them by clicking links and buttons,\nand performing other similar actions that cause the application to\nreplace one view with another.</p>\n<p>The Angular component router is a richly featured mechanism for configuring and managing the entire view navigation process, including the creation and destruction\nof views.</p>\n<p>In most cases, components become attached to a router by means\nof a <code>RouterConfig</code> that defines routes to views.</p>\n<p>A <a href=\"guide/glossary#routing-component\">routing component's</a> template has a <code><a href=\"api/router/RouterOutlet\">RouterOutlet</a></code> element\nwhere it can display views produced by the router.</p>\n<p>Other views in the application likely have anchor tags or buttons with <code><a href=\"api/router/RouterLink\">RouterLink</a></code>\ndirectives that users can click to navigate.</p>\n<p>For more information, see the <a href=\"guide/router\">Routing &#x26; Navigation</a> page.</p>\n<h2 id=\"router-module\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#router-module\"><i class=\"material-icons\">link</i></a>Router module</h2>\n<div class=\"l-sub-section\">\n<p>A separate <a href=\"guide/glossary#ngmodule\">NgModule</a> that provides the necessary service providers and directives for navigating through application views.</p>\n<p>For more information, see the <a href=\"guide/router\">Routing &#x26; Navigation</a> page.</p>\n<h2 id=\"routing-component\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#routing-component\"><i class=\"material-icons\">link</i></a>Routing component</h2>\n<p>An Angular <a href=\"guide/glossary#component\">component</a> with a <code><a href=\"api/router/RouterOutlet\">RouterOutlet</a></code> that displays views based on router navigations.</p>\n<p>For more information, see the <a href=\"guide/router\">Routing &#x26; Navigation</a> page.</p>\n<a id=\"S\"></a>\n<h2 id=\"scoped-package\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#scoped-package\"><i class=\"material-icons\">link</i></a>Scoped package</h2>\n<p>A way to group related <em>npm</em> packages.\nRead more at the <a href=\"https://docs.npmjs.com/misc/scope\">npm-scope</a> page.</p>\n<p>NgModules are delivered within <em>scoped packages</em> such as <code>@angular/core</code>,\n<code>@angular/common</code>, <code>@angular/platform-browser-dynamic</code>, <code>@angular/http</code>, and <code>@angular/router</code>.</p>\n<p>Import a scoped package the same way that you import a normal package.\nThe only difference, from a consumer perspective,\nis that the scoped package name begins with the Angular <em>scope name</em>, <code>@angular</code>.</p>\n<code-example path=\"architecture/src/app/app.component.ts\" linenums=\"false\" title=\"architecture/src/app/app.component.ts (import)\" region=\"import\">\nimport { Component } from '@angular/core';\n\n</code-example>\n<h2 id=\"service\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#service\"><i class=\"material-icons\">link</i></a>Service</h2>\n<p>For data or logic that is not associated\nwith a specific view or that you want to share across components, build services.</p>\n<p>Applications often require services such as a hero data service or a logging service.</p>\n<p>A service is a class with a focused purpose.\nYou often create a service to implement features that are\nindependent from any specific view,\nprovide shared data or logic across components, or encapsulate external interactions.</p>\n<p>Applications often require services such as a data service or a logging service.</p>\n<p>For more information, see the <a href=\"tutorial/toh-pt4\">Services</a> page of the <a href=\"tutorial\">Tour of Heroes</a> tutorial.</p>\n<a id=\"snake-case\"></a>\n<h2 id=\"snake_case\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#snake_case\"><i class=\"material-icons\">link</i></a>snake_case</h2>\n<p>The practice of writing compound words or phrases such that an\nunderscore (<code>_</code>) separates one word from the next. This form is also known as <em>underscore case</em>.</p>\n<a id=\"structural-directive\"></a>\n<a id=\"structural-directives\"></a>\n<h2 id=\"structural-directives\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#structural-directives\"><i class=\"material-icons\">link</i></a>Structural directives</h2>\n<p>A category of <a href=\"guide/glossary#directive\">directive</a> that can\nshape or reshape HTML layout, typically by adding and removing elements in the DOM.\nThe <code>ngIf</code> \"conditional element\" directive and the <code>ngFor</code> \"repeater\" directive are well-known examples.</p>\n<p>Read more in the <a href=\"guide/structural-directives\">Structural Directives</a> page.</p>\n<a id=\"T\"></a>\n<h2 id=\"template\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#template\"><i class=\"material-icons\">link</i></a>Template</h2>\n<p>A chunk of HTML that Angular uses to render a <a href=\"guide/glossary#view\">view</a> with\nthe support and guidance of an Angular <a href=\"guide/glossary#directive\">directive</a>,\nmost notably a <a href=\"guide/glossary#component\">component</a>.</p>\n<h2 id=\"template-driven-forms\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#template-driven-forms\"><i class=\"material-icons\">link</i></a>Template-driven forms</h2>\n<p>A technique for building Angular forms using HTML forms and input elements in the view.\nThe alternate technique is <a href=\"guide/glossary#reactive-forms\">Reactive Forms</a>.</p>\n<p>When building template-driven forms:</p>\n<ul>\n<li>The \"source of truth\" is the template. The validation is defined using attributes on the individual input elements.</li>\n<li><a href=\"guide/glossary#data-binding\">Two-way binding</a> with <code>ngModel</code> keeps the component model synchronized with the user's entry into the input elements.</li>\n<li>Behind the scenes, Angular creates a new control for each input element, provided you have set up a <code>name</code> attribute and two-way binding for each input.</li>\n<li>The associated Angular directives are all prefixed with <code>ng</code> such as <code>ngForm</code>, <code>ngModel</code>, and <code>ngModelGroup</code>.</li>\n</ul>\n<p>Template-driven forms are convenient, quick, and simple. They are a good choice for many basic data-entry form scenarios.</p>\n<p>Read about how to build template-driven forms\nin the <a href=\"guide/forms\">Forms</a> page.</p>\n<h2 id=\"template-expression\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#template-expression\"><i class=\"material-icons\">link</i></a>Template expression</h2>\n<p>A TypeScript-like syntax that Angular evaluates within\na <a href=\"guide/glossary#data-binding\">data binding</a>.</p>\n<p>Read about how to write template expressions\nin the <a href=\"guide/template-syntax#template-expressions\">Template expressions</a> section\nof the <a href=\"guide/template-syntax\">Template Syntax</a> page.</p>\n<h2 id=\"transpile\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#transpile\"><i class=\"material-icons\">link</i></a>Transpile</h2>\n<p>The process of transforming code written in one form of JavaScript\n(such as TypeScript) into another form of JavaScript  (such as <a href=\"guide/glossary#es5\">ES5</a>).</p>\n<h2 id=\"typescript\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#typescript\"><i class=\"material-icons\">link</i></a>TypeScript</h2>\n<p>A version of JavaScript that supports most <a href=\"guide/glossary#es2015\">ECMAScript 2015</a>\nlanguage features such as <a href=\"guide/glossary#decorator\">decorators</a>.</p>\n<p>TypeScript is also notable for its optional typing system, which provides\ncompile-time type checking and strong tooling support (such as \"intellisense,\"\ncode completion, refactoring, and intelligent search). Many code editors\nand IDEs support TypeScript either natively or with plugins.</p>\n<p>TypeScript is the preferred language for Angular development, although\nyou can use other JavaScript dialects such as <a href=\"guide/glossary#es5\">ES5</a>.</p>\n<p>Read more about TypeScript at <a href=\"http://www.typescriptlang.org/\">typescriptlang.org</a>.</p>\n<a id=\"U\"></a>\n<a id=\"V\"></a>\n<h2 id=\"view\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#view\"><i class=\"material-icons\">link</i></a>View</h2>\n<p>A portion of the screen that displays information and responds\nto user actions such as clicks, mouse moves, and keystrokes.</p>\n<p>Angular renders a view under the control of one or more <a href=\"guide/glossary#directive\">directives</a>,\nespecially  <a href=\"guide/glossary#component\">component</a> directives and their companion <a href=\"guide/glossary#template\">templates</a>.\nThe component plays such a prominent role that it's often\nconvenient to refer to a component as a view.</p>\n<p>Views often contain other views. Any view might be loaded and unloaded\ndynamically as the user navigates through the application, typically\nunder the control of a <a href=\"guide/glossary#router\">router</a>.</p>\n<a id=\"W\"></a>\n<a id=\"X\"></a>\n<a id=\"Y\"></a>\n<a id=\"Z\"></a>\n<h2 id=\"zone\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/glossary#zone\"><i class=\"material-icons\">link</i></a>Zone</h2>\n<p>A mechanism for encapsulating and intercepting\na JavaScript application's asynchronous activity.</p>\n<p>The browser DOM and JavaScript have a limited number\nof asynchronous activities, such as DOM events (for example, clicks),\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">promises</a>, and\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\">XHR</a>\ncalls to remote servers.</p>\n<p>Zones intercept all of these activities and give a \"zone client\" the opportunity\nto take action before and after the async activity finishes.</p>\n<p>Angular runs your application in a zone where it can respond to\nasynchronous events by checking for data changes and updating\nthe information it displays via <a href=\"guide/glossary#data-binding\">data bindings</a>.</p>\n<p>Learn more about zones in this\n<a href=\"https://www.youtube.com/watch?v=3IqtmUscE_U\">Brian Ford video</a>.</p>\n\n</div></div>"
}