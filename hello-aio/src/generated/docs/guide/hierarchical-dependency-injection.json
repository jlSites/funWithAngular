{
  "id": "guide/hierarchical-dependency-injection",
  "title": "Hierarchical Dependency Injectors",
  "contents": "\n<div class=\"content\">\n<h1 id=\"hierarchical-dependency-injectors\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#hierarchical-dependency-injectors\"><i class=\"material-icons\">link</i></a>Hierarchical Dependency Injectors</h1>\n<p>You learned the basics of Angular Dependency injection in the\n<a href=\"guide/dependency-injection\">Dependency Injection</a> guide.</p>\n<p>Angular has a <em>Hierarchical Dependency Injection</em> system.\nThere is actually a tree of injectors that parallel an application's component tree.\nYou can reconfigure the injectors at any level of that component tree.</p>\n<p>This guide explores this system and how to use it to your advantage.</p>\n<p>Try the <live-example></live-example>.</p>\n<h2 id=\"the-injector-tree\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#the-injector-tree\"><i class=\"material-icons\">link</i></a>The injector tree</h2>\n<p>In the <a href=\"guide/dependency-injection\">Dependency Injection</a> guide,\nyou learned how to configure a dependency injector and how to retrieve dependencies where you need them.</p>\n<p>In fact, there is no such thing as <strong><em>the</em></strong> injector.\nAn application may have multiple injectors.\nAn Angular application is a tree of components. Each component instance has its own injector.\nThe tree of components parallels the tree of injectors.</p>\n<div class=\"l-sub-section\">\n<p>The component's injector may be a <em>proxy</em> for an ancestor injector higher in the component tree.\nThat's an implementation detail that improves efficiency.\nYou won't notice the difference and\nyour mental model should be that every component has its own injector.</p>\n</div>\n<p>Consider this guide's variation on the Tour of Heroes application.\nAt the top is the <code>AppComponent</code> which has some sub-components.\nOne of them is the <code>HeroesListComponent</code>.\nThe <code>HeroesListComponent</code> holds and manages multiple instances of the <code>HeroTaxReturnComponent</code>.\nThe following diagram represents the state of the this guide's three-level component tree when there are three instances of <code>HeroTaxReturnComponent</code>\nopen simultaneously.</p>\n<figure>\n  <img src=\"generated/images/guide/dependency-injection/component-hierarchy.png\" alt=\"injector tree\" width=\"600\" height=\"224\">\n</figure>\n<h3 id=\"injector-bubbling\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#injector-bubbling\"><i class=\"material-icons\">link</i></a>Injector bubbling</h3>\n<p>When a component requests a dependency, Angular tries to satisfy that dependency with a provider registered in that component's own injector.\nIf the component's injector lacks the provider, it passes the request up to its parent component's injector.\nIf that injector can't satisfy the request, it passes it along to <em>its</em> parent injector.\nThe requests keep bubbling up until Angular finds an injector that can handle the request or runs out of ancestor injectors.\nIf it runs out of ancestors, Angular throws an error.</p>\n<div class=\"l-sub-section\">\n<p>You can cap the bubbling. An intermediate component can declare that it is the \"host\" component.\nThe hunt for providers will climb no higher than the injector for that host component.\nThis is a topic for another day.</p>\n</div>\n<h3 id=\"re-providing-a-service-at-different-levels\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#re-providing-a-service-at-different-levels\"><i class=\"material-icons\">link</i></a>Re-providing a service at different levels</h3>\n<p>You can re-register a provider for a particular dependency token at multiple levels of the injector tree.\nYou don't <em>have</em> to re-register providers. You shouldn't do so unless you have a good reason.\nBut you <em>can</em>.</p>\n<p>As the resolution logic works upwards, the first provider encountered wins.\nThus, a provider in an intermediate injector intercepts a request for a service from something lower in the tree.\nIt effectively \"reconfigures\" and \"shadows\" a provider at a higher level in the tree.</p>\n<p>If you only specify providers at the top level (typically the root <code>AppModule</code>), the tree of injectors appears to be flat.\nAll requests bubble up to the root <code><a href=\"api/core/NgModule\">NgModule</a></code> injector that you configured with the <code>bootstrapModule</code> method.</p>\n<h2 id=\"component-injectors\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#component-injectors\"><i class=\"material-icons\">link</i></a>Component injectors</h2>\n<p>The ability to configure one or more providers at different levels opens up interesting and useful possibilities.</p>\n<h3 id=\"scenario-service-isolation\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#scenario-service-isolation\"><i class=\"material-icons\">link</i></a>Scenario: service isolation</h3>\n<p>Architectural reasons may lead you to restrict access to a service to the application domain where it belongs.</p>\n<p>The guide sample includes a <code>VillainsListComponent</code> that displays a list of villains.\nIt gets those villains from a <code>VillainsService</code>.</p>\n<p>While you <em>could</em> provide <code>VillainsService</code> in the root <code>AppModule</code> (that's where you'll find the <code>HeroesService</code>),\nthat would make the <code>VillainsService</code> available everywhere in the application, including the <em>Hero</em> workflows.</p>\n<p>If you later modified the <code>VillainsService</code>, you could break something in a hero component somewhere.\nThat's not supposed to happen but providing the service in the root <code>AppModule</code> creates that risk.</p>\n<p>Instead, provide the <code>VillainsService</code> in the <code>providers</code> metadata of the <code>VillainsListComponent</code> like this:</p>\n<code-example path=\"hierarchical-dependency-injection/src/app/villains-list.component.ts\" linenums=\"false\" title=\"src/app/villains-list.component.ts (metadata)\" region=\"metadata\">\n@Component({\n  selector: 'villains-list',\n  templateUrl: './villains-list.component.html',\n  providers: [ VillainsService ]\n})\n\n</code-example>\n<p>By providing <code>VillainsService</code> in the <code>VillainsListComponent</code> metadata and nowhere else,\nthe service becomes available only in the <code>VillainsListComponent</code> and its sub-component tree.\nIt's still a singleton, but it's a singleton that exist solely in the <em>villain</em> domain.</p>\n<p>Now you know that a hero component can't access it. You've reduced your exposure to error.</p>\n<h3 id=\"scenario-multiple-edit-sessions\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#scenario-multiple-edit-sessions\"><i class=\"material-icons\">link</i></a>Scenario: multiple edit sessions</h3>\n<p>Many applications allow users to work on several open tasks at the same time.\nFor example, in a tax preparation application, the preparer could be working on several tax returns,\nswitching from one to the other throughout the day.</p>\n<p>This guide demonstrates that scenario with an example in the Tour of Heroes theme.\nImagine an outer <code>HeroListComponent</code> that displays a list of super heroes.</p>\n<p>To open a hero's tax return, the preparer clicks on a hero name, which opens a component for editing that return.\nEach selected hero tax return opens in its own component and multiple returns can be open at the same time.</p>\n<p>Each tax return component has the following characteristics:</p>\n<ul>\n<li>Is its own tax return editing session.</li>\n<li>Can change a tax return without affecting a return in another component.</li>\n<li>Has the ability to save the changes to its tax return or cancel them.</li>\n</ul>\n<figure>\n  <img src=\"generated/images/guide/dependency-injection/hid-heroes-anim.gif\" alt=\"Heroes in action\" width=\"500\" height=\"384\">\n</figure>\n<p>One might suppose that the <code>HeroTaxReturnComponent</code> has logic to manage and restore changes.\nThat would be a pretty easy task for a simple hero tax return.\nIn the real world, with a rich tax return data model, the change management would be tricky.\nYou might delegate that management to a helper service, as this example does.</p>\n<p>Here is the <code>HeroTaxReturnService</code>.\nIt caches a single <code>HeroTaxReturn</code>, tracks changes to that return, and can save or restore it.\nIt also delegates to the application-wide singleton <code>HeroService</code>, which it gets by injection.</p>\n<code-example path=\"hierarchical-dependency-injection/src/app/hero-tax-return.service.ts\" title=\"src/app/hero-tax-return.service.ts\">\nimport { Injectable }    from '@angular/core';\nimport { HeroTaxReturn } from './hero';\nimport { HeroesService } from './heroes.service';\n\n@Injectable()\nexport class HeroTaxReturnService {\n  private currentTaxReturn: HeroTaxReturn;\n  private originalTaxReturn: HeroTaxReturn;\n\n  constructor(private heroService: HeroesService) { }\n\n  set taxReturn (htr: HeroTaxReturn) {\n    this.originalTaxReturn = htr;\n    this.currentTaxReturn  = htr.clone();\n  }\n\n  get taxReturn (): HeroTaxReturn {\n    return this.currentTaxReturn;\n  }\n\n  restoreTaxReturn() {\n    this.taxReturn = this.originalTaxReturn;\n  }\n\n  saveTaxReturn() {\n    this.taxReturn = this.currentTaxReturn;\n    this.heroService.saveTaxReturn(this.currentTaxReturn).subscribe();\n  }\n}\n\n\n</code-example>\n<p>Here is the <code>HeroTaxReturnComponent</code> that makes use of it.</p>\n<code-example path=\"hierarchical-dependency-injection/src/app/hero-tax-return.component.ts\" title=\"src/app/hero-tax-return.component.ts\">\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { HeroTaxReturn }        from './hero';\nimport { HeroTaxReturnService } from './hero-tax-return.service';\n\n@Component({\n  selector: 'hero-tax-return',\n  templateUrl: './hero-tax-return.component.html',\n  styleUrls: [ './hero-tax-return.component.css' ],\n  providers: [ HeroTaxReturnService ]\n})\nexport class HeroTaxReturnComponent {\n  message = '';\n  @Output() close = new EventEmitter&#x3C;void>();\n\n  get taxReturn(): HeroTaxReturn {\n    return this.heroTaxReturnService.taxReturn;\n  }\n  @Input()\n  set taxReturn (htr: HeroTaxReturn) {\n    this.heroTaxReturnService.taxReturn = htr;\n  }\n\n  constructor(private heroTaxReturnService: HeroTaxReturnService ) { }\n\n  onCanceled()  {\n    this.flashMessage('Canceled');\n    this.heroTaxReturnService.restoreTaxReturn();\n  };\n\n  onClose()  { this.close.emit(); };\n\n  onSaved() {\n    this.flashMessage('Saved');\n    this.heroTaxReturnService.saveTaxReturn();\n  }\n\n  flashMessage(msg: string) {\n    this.message = msg;\n    setTimeout(() => this.message = '', 500);\n  }\n}\n\n\n</code-example>\n<p>The <em>tax-return-to-edit</em> arrives via the input property which is implemented with getters and setters.\nThe setter initializes the component's own instance of the <code>HeroTaxReturnService</code> with the incoming return.\nThe getter always returns what that service says is the current state of the hero.\nThe component also asks the service to save and restore this tax return.</p>\n<p>There'd be big trouble if <em>this</em> service were an application-wide singleton.\nEvery component would share the same service instance.\nEach component would overwrite the tax return that belonged to another hero.\nWhat a mess!</p>\n<p>Look closely at the metadata for the <code>HeroTaxReturnComponent</code>. Notice the <code>providers</code> property.</p>\n<code-example path=\"hierarchical-dependency-injection/src/app/hero-tax-return.component.ts\" linenums=\"false\" title=\"src/app/hero-tax-return.component.ts (providers)\" region=\"providers\">\nproviders: [ HeroTaxReturnService ]\n\n</code-example>\n<p>The <code>HeroTaxReturnComponent</code> has its own provider of the <code>HeroTaxReturnService</code>.\nRecall that every component <em>instance</em> has its own injector.\nProviding the service at the component level ensures that <em>every</em> instance of the component gets its own, private instance of the service.\nNo tax return overwriting. No mess.</p>\n<div class=\"l-sub-section\">\n<p>The rest of the scenario code relies on other Angular features and techniques that you can learn about elsewhere in the documentation.\nYou can review it and download it from the <live-example></live-example>.</p>\n</div>\n<h3 id=\"scenario-specialized-providers\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/hierarchical-dependency-injection#scenario-specialized-providers\"><i class=\"material-icons\">link</i></a>Scenario: specialized providers</h3>\n<p>Another reason to re-provide a service is to substitute a <em>more specialized</em> implementation of that service,\ndeeper in the component tree.</p>\n<p>Consider again the Car example from the <a href=\"guide/dependency-injection\">Dependency Injection</a> guide.\nSuppose you configured the root injector (marked as A) with <em>generic</em> providers for\n<code>CarService</code>, <code>EngineService</code> and <code>TiresService</code>.</p>\n<p>You create a car component (A) that displays a car constructed from these three generic services.</p>\n<p>Then you create a child component (B) that defines its own, <em>specialized</em> providers for <code>CarService</code> and <code>EngineService</code>\nthat have special capabilites suitable for whatever is going on in component (B).</p>\n<p>Component (B) is the parent of another component (C) that defines its own, even <em>more specialized</em> provider for <code>CarService</code>.</p>\n<figure>\n  <img src=\"generated/images/guide/dependency-injection/car-components.png\" alt=\"car components\" width=\"338\" height=\"201\">\n</figure>\n<p>Behind the scenes, each component sets up its own injector with zero, one, or more providers defined for that component itself.</p>\n<p>When you resolve an instance of <code>Car</code> at the deepest component (C),\nits injector produces an instance of <code>Car</code> resolved by injector (C) with an <code>Engine</code> resolved by injector (B) and\n<code>Tires</code> resolved by the root injector (A).</p>\n<figure>\n  <img src=\"generated/images/guide/dependency-injection/injector-tree.png\" alt=\"car injector tree\" width=\"600\" height=\"248\">\n</figure>\n<div class=\"l-sub-section\">\n<p>The code for this <em>cars</em> scenario is in the <code>car.components.ts</code> and <code>car.services.ts</code> files of the sample\nwhich you can review and download from the <live-example></live-example>.</p>\n</div>\n\n</div>"
}