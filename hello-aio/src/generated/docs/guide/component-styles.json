{
  "id": "guide/component-styles",
  "title": "Component Styles",
  "contents": "\n<div class=\"content\">\n<h1 id=\"component-styles\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#component-styles\"><i class=\"material-icons\">link</i></a>Component Styles</h1>\n<p>Angular applications are styled with standard CSS. That means you can apply\neverything you know about CSS stylesheets, selectors, rules, and media queries\ndirectly to Angular applications.</p>\n<p>Additionally, Angular can bundle <em>component styles</em>\nwith components, enabling a more modular design than regular stylesheets.</p>\n<p>This page describes how to load and apply these component styles.</p>\n<!--\n\n## Table Of Contents\n\n* [Using component styles](guide/component-styles#using-component-styles)\n* [Special selectors](guide/component-styles#special-selectors)\n* [Loading styles into components](guide/component-styles#loading-styles)\n* [Controlling view encapsulation: native, emulated, and none](guide/component-styles#view-encapsulation)\n* [Appendix 1: Inspecting the CSS generated in emulated view encapsulation](guide/component-styles#inspect-generated-css)\n* [Appendix 2: Loading styles with relative URLs](guide/component-styles#relative-urls)\n\n-->\n<p>You can run the <live-example></live-example> in Plunker and download the code from there.</p>\n<h2 id=\"using-component-styles\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#using-component-styles\"><i class=\"material-icons\">link</i></a>Using component styles</h2>\n<p>For every Angular component you write, you may define not only an HTML template,\nbut also the CSS styles that go with that template,\nspecifying any selectors, rules, and media queries that you need.</p>\n<p>One way to do this is to set the <code>styles</code> property in the component metadata.\nThe <code>styles</code> property takes an array of strings that contain CSS code.\nUsually you give it one string, as in the following example:</p>\n<code-example path=\"component-styles/src/app/hero-app.component.ts\" title=\"src/app/hero-app.component.ts\" linenums=\"false\">\n@Component({\n  selector: 'hero-app',\n  template: `\n    &#x3C;h1>Tour of Heroes&#x3C;/h1>\n    &#x3C;hero-app-main [hero]=hero>&#x3C;/hero-app-main>`,\n  styles: ['h1 { font-weight: normal; }']\n})\nexport class HeroAppComponent {\n/* . . . */\n}\n\n</code-example>\n<p>The selectors you put into a component's styles apply only within the template\nof that component. The <code>h1</code> selector in the preceding example applies only to the <code>&#x3C;h1></code> tag\nin the template of <code>HeroAppComponent</code>. Any <code>&#x3C;h1></code> elements elsewhere in\nthe application are unaffected.</p>\n<p>This is a big improvement in modularity compared to how CSS traditionally works.</p>\n<ul>\n<li>You can use the CSS class names and selectors that make the most sense in the context of each component. </li>\n<li>Class names and selectors are local to the component and don't collide with\nclasses and selectors used elsewhere in the application.</li>\n<li>Changes to styles elsewhere in the application don't affect the component's styles.</li>\n<li>You can co-locate the CSS code of each component with the TypeScript and HTML code of the component,\nwhich leads to a neat and tidy project structure.</li>\n<li>You can change or remove component CSS code without searching through the\nwhole application to find where else the code is used.</li>\n</ul>\n<a id=\"special-selectors\"></a>\n<h2 id=\"special-selectors\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#special-selectors\"><i class=\"material-icons\">link</i></a>Special selectors</h2>\n<p>Component styles have a few special <em>selectors</em> from the world of shadow DOM style scoping\n(described in the <a href=\"https://www.w3.org/TR/css-scoping-1\">CSS Scoping Module Level 1</a> page on the\n<a href=\"https://www.w3.org\">W3C</a> site).\nThe following sections describe these selectors.</p>\n<h3 id=\"host\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#host\"><i class=\"material-icons\">link</i></a>:host</h3>\n<p>Use the <code>:host</code> pseudo-class selector to target styles in the element that <em>hosts</em> the component (as opposed to\ntargeting elements <em>inside</em> the component's template).</p>\n<code-example path=\"component-styles/src/app/hero-details.component.css\" region=\"host\" title=\"src/app/hero-details.component.css\" linenums=\"false\">\n:host {\n  display: block;\n  border: 1px solid black;\n}\n\n</code-example>\n<p>The <code>:host</code> selector is the only way to target the host element. You can't reach\nthe host element from inside the component with other selectors because it's not part of the\ncomponent's own template. The host element is in a parent component's template.</p>\n<p>Use the <em>function form</em> to apply host styles conditionally by\nincluding another selector inside parentheses after <code>:host</code>.</p>\n<p>The next example targets the host element again, but only when it also has the <code>active</code> CSS class.</p>\n<code-example path=\"component-styles/src/app/hero-details.component.css\" region=\"hostfunction\" title=\"src/app/hero-details.component.css\" linenums=\"false\">\n:host(.active) {\n  border-width: 3px;\n}\n\n</code-example>\n<h3 id=\"host-context\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#host-context\"><i class=\"material-icons\">link</i></a>:host-context</h3>\n<p>Sometimes it's useful to apply styles based on some condition <em>outside</em> of a component's view.\nFor example, a CSS theme class could be applied to the document <code>&#x3C;body></code> element, and\nyou want to change how your component looks based on that.</p>\n<p>Use the <code>:host-context()</code> pseudo-class selector, which works just like the function\nform of <code>:host()</code>. The <code>:host-context()</code> selector looks for a CSS class in any ancestor of the component host element,\nup to the document root. The <code>:host-context()</code> selector is useful when combined with another selector.</p>\n<p>The following example applies a <code>background-color</code> style to all <code>&#x3C;h2></code> elements <em>inside</em> the component, only\nif some ancestor element has the CSS class <code>theme-light</code>.</p>\n<code-example path=\"component-styles/src/app/hero-details.component.css\" region=\"hostcontext\" title=\"src/app/hero-details.component.css\" linenums=\"false\">\n:host-context(.theme-light) h2 {\n  background-color: #eef;\n}\n\n</code-example>\n<h3 id=\"deprecated-deep--and-ng-deep\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#deprecated-deep--and-ng-deep\"><i class=\"material-icons\">link</i></a>(deprecated) <code>/deep/</code>, <code>>>></code>, and <code>::ng-deep</code></h3>\n<p>Component styles normally apply only to the HTML in the component's own template. </p>\n<p>Use the <code>/deep/</code> shadow-piercing descendant combinator to force a style down through the child\ncomponent tree into all the child component views.\nThe <code>/deep/</code> combinator works to any depth of nested components, and it applies to both the view\nchildren and content children of the component. </p>\n<p>The following example targets all <code>&#x3C;h3></code> elements, from the host element down\nthrough this component to all of its child elements in the DOM. </p>\n<code-example path=\"component-styles/src/app/hero-details.component.css\" region=\"deep\" title=\"src/app/hero-details.component.css\" linenums=\"false\">\n:host /deep/ h3 {\n  font-style: italic;\n}\n\n</code-example>\n<p>The <code>/deep/</code> combinator also has the aliases <code>>>></code>, and <code>::ng-deep</code>.</p>\n<div class=\"alert is-important\">\n<p>Use <code>/deep/</code>, <code>>>></code> and <code>::ng-deep</code> only with <em>emulated</em> view encapsulation.\nEmulated is the default and most commonly used view encapsulation. For more information, see the\n<a href=\"guide/component-styles#view-encapsulation\">Controlling view encapsulation</a> section.</p>\n</div>\n<div class=\"alert is-important\">\n<p>The shadow-piercing descendant combinator is deprecated and <a href=\"https://www.chromestatus.com/features/6750456638341120\">support is being removed from major browsers</a> and tools.\nAs such we plan to drop support in Angular (for all 3 of <code>/deep/</code>, <code>>>></code> and <code>::ng-deep</code>).\nUntil then <code>::ng-deep</code> should be preferred for a broader compatibility with the tools.</p>\n</div>\n<a id=\"loading-styles\"></a>\n<h2 id=\"loading-component-styles\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#loading-component-styles\"><i class=\"material-icons\">link</i></a>Loading component styles</h2>\n<p>There are several ways to add styles to a component: </p>\n<ul>\n<li>By setting <code>styles</code> or <code>styleUrls</code> metadata.</li>\n<li>Inline in the template HTML.</li>\n<li>With CSS imports.</li>\n</ul>\n<p>The scoping rules outlined earlier apply to each of these loading patterns.</p>\n<h3 id=\"styles-in-metadata\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#styles-in-metadata\"><i class=\"material-icons\">link</i></a>Styles in metadata</h3>\n<p>You can add a <code>styles</code> array property to the <code>@Component</code> decorator.\nEach string in the array (usually just one string) defines the CSS.</p>\n<code-example path=\"component-styles/src/app/hero-app.component.ts\" title=\"src/app/hero-app.component.ts\">\n@Component({\n  selector: 'hero-app',\n  template: `\n    &#x3C;h1>Tour of Heroes&#x3C;/h1>\n    &#x3C;hero-app-main [hero]=hero>&#x3C;/hero-app-main>`,\n  styles: ['h1 { font-weight: normal; }']\n})\nexport class HeroAppComponent {\n/* . . . */\n}\n\n</code-example>\n<h3 id=\"style-urls-in-metadata\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#style-urls-in-metadata\"><i class=\"material-icons\">link</i></a>Style URLs in metadata</h3>\n<p>You can load styles from external CSS files by adding a <code>styleUrls</code> attribute\ninto a component's <code>@Component</code> decorator:</p>\n<code-example path=\"component-styles/src/app/hero-details.component.ts\" region=\"styleurls\" title=\"src/app/hero-details.component.ts\">\n@Component({\n  selector: 'hero-details',\n  template: `\n    &#x3C;h2>{{hero.name}}&#x3C;/h2>\n    &#x3C;hero-team [hero]=hero>&#x3C;/hero-team>\n    &#x3C;ng-content>&#x3C;/ng-content>\n  `,\n  styleUrls: ['app/hero-details.component.css']\n})\nexport class HeroDetailsComponent {\n/* . . . */\n}\n\n\n</code-example>\n<div class=\"alert is-important\">\n<p>The URL is relative to the <em>application root</em>, which is usually the\nlocation of the <code>index.html</code> web page that hosts the application.\nThe style file URL is <em>not</em> relative to the component file.\nThat's why the example URL begins <code>src/app/</code>.\nTo specify a URL relative to the component file, see <a href=\"guide/component-styles#relative-urls\">Appendix 2</a>.</p>\n</div>\n<div class=\"l-sub-section\">\n<p>If you use module bundlers like Webpack, you can also use the <code>styles</code> attribute\nto load styles from external files at build time. You could write:</p>\n<p><code>styles: [require('my.component.css')]</code></p>\n<p>Set the <code>styles</code> property, not the <code>styleUrls</code> property. The module\nbundler loads the CSS strings, not Angular.\nAngular sees the CSS strings only after the bundler loads them.\nTo Angular, it's as if you wrote the <code>styles</code> array by hand.\nFor information on loading CSS in this manner, refer to the module bundler's documentation.</p>\n</div>\n<h3 id=\"template-inline-styles\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#template-inline-styles\"><i class=\"material-icons\">link</i></a>Template inline styles</h3>\n<p>You can embed styles directly into the HTML template by putting them\ninside <code>&#x3C;style></code> tags.</p>\n<code-example path=\"component-styles/src/app/hero-controls.component.ts\" region=\"inlinestyles\" title=\"src/app/hero-controls.component.ts\">\n@Component({\n  selector: 'hero-controls',\n  template: `\n    &#x3C;style>\n      button {\n        background-color: white;\n        border: 1px solid #777;\n      }\n    &#x3C;/style>\n    &#x3C;h3>Controls&#x3C;/h3>\n    &#x3C;button (click)=\"activate()\">Activate&#x3C;/button>\n  `\n})\n\n</code-example>\n<h3 id=\"template-link-tags\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#template-link-tags\"><i class=\"material-icons\">link</i></a>Template link tags</h3>\n<p>You can also embed <code>&#x3C;link></code> tags into the component's HTML template. </p>\n<p>As with <code>styleUrls</code>, the link tag's <code>href</code> URL is relative to the\napplication root, not the component file.</p>\n<code-example path=\"component-styles/src/app/hero-team.component.ts\" region=\"stylelink\" title=\"src/app/hero-team.component.ts\">\n@Component({\n  selector: 'hero-team',\n  template: `\n    &#x3C;link rel=\"stylesheet\" href=\"app/hero-team.component.css\">\n    &#x3C;h3>Team&#x3C;/h3>\n    &#x3C;ul>\n      &#x3C;li *ngFor=\"let member of hero.team\">\n        {{member}}\n      &#x3C;/li>\n    &#x3C;/ul>`\n})\n\n</code-example>\n<h3 id=\"css-imports\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#css-imports\"><i class=\"material-icons\">link</i></a>CSS @imports</h3>\n<p>You can also import CSS files into the CSS files using the standard CSS <code>@import</code> rule.\nFor details, see <a href=\"https://developer.mozilla.org/en/docs/Web/CSS/@import\"><code>@import</code></a>\non the <a href=\"https://developer.mozilla.org\">MDN</a> site.</p>\n<p>In this case, the URL is relative to the CSS file into which you're importing.</p>\n<code-example path=\"component-styles/src/app/hero-details.component.css\" region=\"import\" title=\"src/app/hero-details.component.css (excerpt)\">\n@import 'hero-details-box.css';\n\n</code-example>\n<a id=\"view-encapsulation\"></a>\n<h2 id=\"view-encapsulation\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#view-encapsulation\"><i class=\"material-icons\">link</i></a>View encapsulation</h2>\n<p>As discussed earlier, component CSS styles are encapsulated into the component's view and don't\naffect the rest of the application.</p>\n<p>To control how this encapsulation happens on a <em>per\ncomponent</em> basis, you can set the <em>view encapsulation mode</em> in the component metadata.\nChoose from the following modes:</p>\n<ul>\n<li>\n<p><code>Native</code> view encapsulation uses the browser's native shadow DOM implementation (see\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components/Shadow_DOM\">Shadow DOM</a>\non the <a href=\"https://developer.mozilla.org\">MDN</a> site)\nto attach a shadow DOM to the component's host element, and then puts the component\nview inside that shadow DOM. The component's styles are included within the shadow DOM.</p>\n</li>\n<li>\n<p><code>Emulated</code> view encapsulation (the default) emulates the behavior of shadow DOM by preprocessing\n(and renaming) the CSS code to effectively scope the CSS to the component's view.\nFor details, see <a href=\"guide/component-styles#inspect-generated-css\">Appendix 1</a>.</p>\n</li>\n<li>\n<p><code>None</code> means that Angular does no view encapsulation.\nAngular adds the CSS to the global styles.\nThe scoping rules, isolations, and protections discussed earlier don't apply.\nThis is essentially the same as pasting the component's styles into the HTML.</p>\n</li>\n</ul>\n<p>To set the components encapsulation mode, use the <code>encapsulation</code> property in the component metadata:</p>\n<code-example path=\"component-styles/src/app/quest-summary.component.ts\" region=\"encapsulation.native\" title=\"src/app/quest-summary.component.ts\" linenums=\"false\">\n// warning: few browsers support shadow DOM encapsulation at this time\nencapsulation: ViewEncapsulation.Native\n\n</code-example>\n<p><code>Native</code> view encapsulation only works on browsers that have native support\nfor shadow DOM (see <a href=\"http://caniuse.com/#feat=shadowdom\">Shadow DOM v0</a> on the\n<a href=\"http://caniuse.com\">Can I use</a> site). The support is still limited,\nwhich is why <code>Emulated</code> view encapsulation is the default mode and recommended\nin most cases.</p>\n<a id=\"inspect-generated-css\"></a>\n<h2 id=\"appendix-inspecting-generated-css\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#appendix-inspecting-generated-css\"><i class=\"material-icons\">link</i></a>Appendix: Inspecting generated CSS</h2>\n<p>When using emulated view encapsulation, Angular preprocesses\nall component styles so that they approximate the standard shadow CSS scoping rules.</p>\n<p>In the DOM of a running Angular application with emulated view\nencapsulation enabled, each DOM element has some extra attributes\nattached to it:</p>\n<code-example format=\"\">\n  &#x3C;hero-details _nghost-pmm-5>\n    &#x3C;h2 _ngcontent-pmm-5>Mister Fantastic&#x3C;/h2>\n    &#x3C;hero-team _ngcontent-pmm-5 _nghost-pmm-6>\n      &#x3C;h3 _ngcontent-pmm-6>Team&#x3C;/h3>\n    &#x3C;/hero-team>\n  &#x3C;/hero-detail>\n\n</code-example>\n<p>There are two kinds of generated attributes:</p>\n<ul>\n<li>An element that would be a shadow DOM host in native encapsulation has a\ngenerated <code>_nghost</code> attribute. This is typically the case for component host elements.</li>\n<li>An element within a component's view has a <code>_ngcontent</code> attribute\nthat identifies to which host's emulated shadow DOM this element belongs.</li>\n</ul>\n<p>The exact values of these attributes aren't important. They are automatically\ngenerated and you never refer to them in application code. But they are targeted\nby the generated component styles, which are in the <code>&#x3C;head></code> section of the DOM:</p>\n<code-example format=\"\">\n  [_nghost-pmm-5] {\n    display: block;\n    border: 1px solid black;\n  }\n\n  h3[_ngcontent-pmm-6] {\n    background-color: white;\n    border: 1px solid #777;\n  }\n\n</code-example>\n<p>These styles are post-processed so that each selector is augmented\nwith <code>_nghost</code> or <code>_ngcontent</code> attribute selectors.\nThese extra selectors enable the scoping rules described in this page.</p>\n<a id=\"relative-urls\"></a>\n<h2 id=\"appendix-loading-with-relative-urls\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/component-styles#appendix-loading-with-relative-urls\"><i class=\"material-icons\">link</i></a>Appendix: Loading with relative URLs</h2>\n<p>It's common practice to split a component's code, HTML, and CSS into three separate files in the same directory:</p>\n<code-example format=\"nocode\">\n  quest-summary.component.ts\n  quest-summary.component.html\n  quest-summary.component.css\n\n</code-example>\n<p>You include the template and CSS files by setting the <code>templateUrl</code> and <code>styleUrls</code> metadata properties respectively.\nBecause these files are co-located with the component,\nit would be nice to refer to them by name without also having to specify a path back to the root of the application.</p>\n<p>You can use a relative URL by prefixing your filenames with <code>./</code>:</p>\n<code-example path=\"component-styles/src/app/quest-summary.component.ts\" title=\"src/app/quest-summary.component.ts\">\n@Component({\n  selector: 'quest-summary',\n  templateUrl: './quest-summary.component.html',\n  styleUrls:  ['./quest-summary.component.css']\n})\nexport class QuestSummaryComponent { }\n\n</code-example>\n\n</div>"
}