{
  "id": "guide/template-syntax",
  "title": "Template Syntax",
  "contents": "\n<div class=\"content\">\n<h1 id=\"template-syntax\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#template-syntax\"><i class=\"material-icons\">link</i></a>Template Syntax</h1>\n<style>\n  h4 {font-size: 17px !important; text-transform: none !important;}\n  .syntax { font-family: Consolas, 'Lucida Sans', Courier, sans-serif; color: black; font-size: 85%; }\n  h4 .syntax { font-size: 100%; }\n</style>\n<p>The Angular application manages what the user sees and can do, achieving this through the interaction of a\ncomponent class instance (the <em>component</em>) and its user-facing template.</p>\n<p>You may be familiar with the component/template duality from your experience with model-view-controller (MVC) or model-view-viewmodel (MVVM).\nIn Angular, the component plays the part of the controller/viewmodel, and the template represents the view.</p>\n<p>This page is a comprehensive technical reference to the Angular template language.\nIt explains basic principles of the template language and describes most of the syntax that you'll encounter elsewhere in the documentation.</p>\n<p>Many code snippets illustrate the points and concepts, all of them available\nin the <live-example title=\"Template Syntax Live Code\"></live-example>.</p>\n<a id=\"html\"></a>\n<h2 id=\"html-in-templates\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#html-in-templates\"><i class=\"material-icons\">link</i></a>HTML in templates</h2>\n<p>HTML is the language of the Angular template.\nAlmost all HTML syntax is valid template syntax.\nThe <code>&#x3C;script></code> element is a notable exception;\nit is forbidden, eliminating the risk of script injection attacks.\nIn practice, <code>&#x3C;script></code> is ignored and a warning appears in the browser console.\nSee the <a href=\"guide/security\">Security</a> page for details.</p>\n<p>Some legal HTML doesn't make much sense in a template.\nThe <code>&#x3C;html></code>, <code>&#x3C;body></code>, and <code>&#x3C;base></code> elements have no useful role.\nPretty much everything else is fair game.</p>\n<p>You can extend the HTML vocabulary of your templates with components and directives that appear as new elements and attributes.\nIn the following sections, you'll learn how to get and set DOM (Document Object Model) values dynamically through data binding.</p>\n<p>Begin with the first form of data binding—interpolation—to see how much richer template HTML can be.\n<a href=\"guide/template-syntax#top-of-page\">back to top</a></p>\n<hr>\n<a id=\"interpolation\"></a>\n<h2 id=\"interpolation----\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#interpolation----\"><i class=\"material-icons\">link</i></a>Interpolation ( <span class=\"syntax\">{﻿{...}}</span> )</h2>\n<p>You met the double-curly braces of interpolation, <code>{{</code> and <code>}}</code>, early in your Angular education.</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"first-interpolation\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;p>My current hero is {{currentHero.name}}&#x3C;/p>\n\n</code-example>\n<p>You use interpolation to weave calculated strings into the text between HTML element tags and within attribute assignments.</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"title+image\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;h3>\n  {{title}}\n  &#x3C;img src=\"{{heroImageUrl}}\" style=\"height:30px\">\n&#x3C;/h3>\n\n</code-example>\n<p>The text between the braces is often the name of a component property. Angular replaces that name with the\nstring value of the corresponding component property. In the example above, Angular evaluates the <code>title</code> and <code>heroImageUrl</code> properties\nand \"fills in the blanks\", first displaying a bold application title and then a heroic image.</p>\n<p>More generally, the text between the braces is a <strong>template expression</strong> that Angular first <strong>evaluates</strong>\nand then <strong>converts to a string</strong>. The following interpolation illustrates the point by adding the two numbers:</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"sum-1\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;!-- \"The sum of 1 + 1 is 2\" -->\n&#x3C;p>The sum of 1 + 1 is {{1 + 1}}&#x3C;/p>\n\n</code-example>\n<p>The expression can invoke methods of the host component such as <code>getVal()</code>, seen here:</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"sum-2\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;!-- \"The sum of 1 + 1 is not 4\" -->\n&#x3C;p>The sum of 1 + 1 is not {{1 + 1 + getVal()}}&#x3C;/p>\n\n</code-example>\n<p>Angular evaluates all expressions in double curly braces,\nconverts the expression results to strings, and links them with neighboring literal strings. Finally,\nit assigns this composite interpolated result to an <strong>element or directive property</strong>.</p>\n<p>You appear to be inserting the result between element tags and assigning it to attributes.\nIt's convenient to think so, and you rarely suffer for this mistake.\nThough this is not exactly true. Interpolation is a special syntax that Angular converts into a\n<a href=\"guide/template-syntax#property-binding\">property binding</a>, as is explained <a href=\"guide/template-syntax#property-binding-or-interpolation\">below</a>.</p>\n<p>But first, let's take a closer look at template expressions and statements.</p>\n<p><a href=\"guide/template-syntax#top-of-page\">back to top</a></p>\n<hr>\n<a id=\"template-expressions\"></a>\n<h2 id=\"template-expressions\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#template-expressions\"><i class=\"material-icons\">link</i></a>Template expressions</h2>\n<p>A template <strong>expression</strong> produces a value.\nAngular executes the expression and assigns it to a property of a binding target;\nthe target might be an HTML element, a component, or a directive.</p>\n<p>The interpolation braces in <code>{{1 + 1}}</code> surround the template expression <code>1 + 1</code>.\nIn the <a href=\"guide/template-syntax#property-binding\">property binding</a> section below,\na template expression appears in quotes to the right of the <code>=</code> symbol as in <code>[property]=\"expression\"</code>.</p>\n<p>You write these template expressions in a language that looks like JavaScript.\nMany JavaScript expressions are legal template expressions, but not all.</p>\n<p>JavaScript expressions that have or promote side effects are prohibited,\nincluding:</p>\n<ul>\n<li>assignments (<code>=</code>, <code>+=</code>, <code>-=</code>, ...)</li>\n<li><code>new</code></li>\n<li>chaining expressions with <code>;</code> or <code>,</code></li>\n<li>increment and decrement operators (<code>++</code> and <code>--</code>)</li>\n</ul>\n<p>Other notable differences from JavaScript syntax include:</p>\n<ul>\n<li>no support for the bitwise operators <code>|</code> and <code>&#x26;</code></li>\n<li>new <a href=\"guide/template-syntax#expression-operators\">template expression operators</a>, such as <code>|</code>, <code>?.</code> and <code>!</code>.</li>\n</ul>\n<a id=\"expression-context\"></a>\n<h3 id=\"expression-context\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#expression-context\"><i class=\"material-icons\">link</i></a>Expression context</h3>\n<p>The <em>expression context</em> is typically the <em>component</em> instance.\nIn the following snippets, the <code>title</code>  within double-curly braces and the\n<code>isUnchanged</code> in quotes refer to properties of the <code>AppComponent</code>.</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"context-component-expression\" title=\"src/app/app.component.html\" linenums=\"false\">\n{{title}}\n&#x3C;span [hidden]=\"isUnchanged\">changed&#x3C;/span>\n\n</code-example>\n<p>An expression may also refer to properties of the <em>template's</em> context\nsuch as a <a href=\"guide/template-syntax#template-input-variable\">template input variable</a> (<code>let hero</code>)\nor a <a href=\"guide/template-syntax#ref-vars\">template reference variable</a> (<code>#heroInput</code>).</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"context-var\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;div *ngFor=\"let hero of heroes\">{{hero.name}}&#x3C;/div>\n&#x3C;input #heroInput> {{heroInput.value}}\n\n</code-example>\n<p>The context for terms in an expression is a blend of the <em>template variables</em>,\nthe directive's <em>context</em> object (if it has one), and the component's <em>members</em>.\nIf you reference a name that belongs to more than one of these namespaces,\nthe template variable name takes precedence, followed by a name in the directive's <em>context</em>,\nand, lastly, the component's member names.</p>\n<p>The previous example presents such a name collision. The component has a <code>hero</code>\nproperty and the <code>*ngFor</code> defines a <code>hero</code> template variable.\nThe <code>hero</code> in <code>{{hero.name}}</code>\nrefers to the template input variable, not the component's property.</p>\n<p>Template expressions cannot refer to anything in\nthe global namespace. They can't refer to <code>window</code> or <code>document</code>. They\ncan't call <code>console.log</code> or <code>Math.max</code>. They are restricted to referencing\nmembers of the expression context.</p>\n<p><a href=\"guide/template-syntax#top-of-page\">back to top</a></p>\n<a id=\"no-side-effects\"></a>\n<a id=\"expression-guidelines\"></a>\n<h3 id=\"expression-guidelines\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#expression-guidelines\"><i class=\"material-icons\">link</i></a>Expression guidelines</h3>\n<p>Template expressions can make or break an application.\nPlease follow these guidelines:</p>\n<ul>\n<li><a href=\"guide/template-syntax#no-visible-side-effects\">No visible side effects</a></li>\n<li><a href=\"guide/template-syntax#quick-execution\">Quick execution</a></li>\n<li><a href=\"guide/template-syntax#simplicity\">Simplicity</a></li>\n<li><a href=\"guide/template-syntax#idempotence\">Idempotence</a></li>\n</ul>\n<p>The only exceptions to these guidelines should be in specific circumstances that you thoroughly understand.</p>\n<h4 id=\"no-visible-side-effects\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#no-visible-side-effects\"><i class=\"material-icons\">link</i></a>No visible side effects</h4>\n<p>A template expression should not change any application state other than the value of the\ntarget property.</p>\n<p>This rule is essential to Angular's \"unidirectional data flow\" policy.\nYou should never worry that reading a component value might change some other displayed value.\nThe view should be stable throughout a single rendering pass.</p>\n<h4 id=\"quick-execution\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#quick-execution\"><i class=\"material-icons\">link</i></a>Quick execution</h4>\n<p>Angular executes template expressions after every change detection cycle.\nChange detection cycles are triggered by many asynchronous activities such as\npromise resolutions, http results, timer events, keypresses and mouse moves.</p>\n<p>Expressions should finish quickly or the user experience may drag, especially on slower devices.\nConsider caching values when their computation is expensive.</p>\n<h4 id=\"simplicity\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#simplicity\"><i class=\"material-icons\">link</i></a>Simplicity</h4>\n<p>Although it's possible to write quite complex template expressions, you should avoid them.</p>\n<p>A property name or method call should be the norm.\nAn occasional Boolean negation (<code>!</code>) is OK.\nOtherwise, confine application and business logic to the component itself,\nwhere it will be easier to develop and test.</p>\n<h4 id=\"idempotence\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#idempotence\"><i class=\"material-icons\">link</i></a>Idempotence</h4>\n<p>An <a href=\"https://en.wikipedia.org/wiki/Idempotence\">idempotent</a> expression is ideal because\nit is free of side effects and improves Angular's change detection performance.</p>\n<p>In Angular terms, an idempotent expression always returns <em>exactly the same thing</em> until\none of its dependent values changes.</p>\n<p>Dependent values should not change during a single turn of the event loop.\nIf an idempotent expression returns a string or a number, it returns the same string or number\nwhen called twice in a row. If the expression returns an object (including an <code>array</code>),\nit returns the same object <em>reference</em> when called twice in a row.\n<a href=\"guide/template-syntax#top-of-page\">back to top</a></p>\n<hr>\n<a id=\"template-statements\"></a>\n<h2 id=\"template-statements\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#template-statements\"><i class=\"material-icons\">link</i></a>Template statements</h2>\n<p>A template <strong>statement</strong> responds to an <strong>event</strong> raised by a binding target\nsuch as an element, component, or directive.\nYou'll see template statements in the <a href=\"guide/template-syntax#event-binding\">event binding</a> section,\nappearing in quotes to the right of the <code>=</code> symbol as in <code>(event)=\"statement\"</code>.</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"context-component-statement\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;button (click)=\"deleteHero()\">Delete hero&#x3C;/button>\n\n</code-example>\n<p>A template statement <em>has a side effect</em>.\nThat's the whole point of an event.\nIt's how you update application state from user action.</p>\n<p>Responding to events is the other side of Angular's \"unidirectional data flow\".\nYou're free to change anything, anywhere, during this turn of the event loop.</p>\n<p>Like template expressions, template <em>statements</em> use a language that looks like JavaScript.\nThe template statement parser differs from the template expression parser and\nspecifically supports both basic assignment (<code>=</code>) and chaining expressions\n(with <code>;</code> or <code>,</code>).</p>\n<p>However, certain JavaScript syntax is not allowed:</p>\n<ul>\n<li><code>new</code></li>\n<li>increment and decrement operators, <code>++</code> and <code>--</code></li>\n<li>operator assignment, such as <code>+=</code> and <code>-=</code></li>\n<li>the bitwise operators <code>|</code> and <code>&#x26;</code></li>\n<li>the <a href=\"guide/template-syntax#expression-operators\">template expression operators</a></li>\n</ul>\n<h3 id=\"statement-context\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#statement-context\"><i class=\"material-icons\">link</i></a>Statement context</h3>\n<p>As with expressions, statements can refer only to what's in the statement context\nsuch as an event handling method of the component instance.</p>\n<p>The <em>statement context</em> is typically the component instance.\nThe <em>deleteHero</em> in <code>(click)=\"deleteHero()\"</code> is a method of the data-bound component.</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"context-component-statement\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;button (click)=\"deleteHero()\">Delete hero&#x3C;/button>\n\n</code-example>\n<p>The statement context may also refer to properties of the template's own context.\nIn the following examples, the template <code>$event</code> object,\na <a href=\"guide/template-syntax#template-input-variable\">template input variable</a> (<code>let hero</code>),\nand a <a href=\"guide/template-syntax#ref-vars\">template reference variable</a> (<code>#heroForm</code>)\nare passed to an event handling method of the component.</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"context-var-statement\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;button (click)=\"onSave($event)\">Save&#x3C;/button>\n&#x3C;button *ngFor=\"let hero of heroes\" (click)=\"deleteHero(hero)\">{{hero.name}}&#x3C;/button>\n&#x3C;form #heroForm (ngSubmit)=\"onSubmit(heroForm)\"> ... &#x3C;/form>\n\n</code-example>\n<p>Template context names take precedence over component context names.\nIn <code>deleteHero(hero)</code> above, the <code>hero</code> is the template input variable,\nnot the component's <code>hero</code> property.</p>\n<p>Template statements cannot refer to anything in the global namespace. They\ncan't refer to <code>window</code> or <code>document</code>.\nThey can't call <code>console.log</code> or <code>Math.max</code>.</p>\n<h3 id=\"statement-guidelines\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#statement-guidelines\"><i class=\"material-icons\">link</i></a>Statement guidelines</h3>\n<p>As with expressions, avoid writing complex template statements.\nA method call or simple property assignment should be the norm.</p>\n<p>Now that you have a feel for template expressions and statements,\nyou're ready to learn about the varieties of data binding syntax beyond interpolation.</p>\n<p><a href=\"guide/template-syntax#top-of-page\">back to top</a></p>\n<hr>\n<a id=\"binding-syntax\"></a>\n<h2 id=\"binding-syntax-an-overview\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#binding-syntax-an-overview\"><i class=\"material-icons\">link</i></a>Binding syntax: An overview</h2>\n<p>Data binding is a mechanism for coordinating what users see, with application data values.\nWhile you could push values to and pull values from HTML,\nthe application is easier to write, read, and maintain if you turn these chores over to a binding framework.\nYou simply declare bindings between binding sources and target HTML elements and let the framework do the work.</p>\n<p>Angular provides many kinds of data binding.\nThis guide covers most of them, after a high-level view of Angular data binding and its syntax.</p>\n<p>Binding types can be grouped into three categories distinguished by the direction of data flow:\nfrom the <em>source-to-view</em>, from <em>view-to-source</em>, and in the two-way sequence: <em>view-to-source-to-view</em>:</p>\n<style>\n  td, th {vertical-align: top}\n</style>\n<table width=\"100%\">\n  <colgroup><col width=\"30%\">\n  \n  <col width=\"50%\">\n  \n  <col width=\"20%\">\n  \n  </colgroup><tbody><tr>\n    <th>\n      Data direction\n    </th>\n    <th>\n      Syntax\n    </th>\n    <th>\n      Type\n    </th>\n  </tr>\n  <tr>\n    <td>\n      One-way<br>from data source<br>to view target\n    </td>\n    <td>\n      <code-example>\n        {{expression}}\n        [target]=\"expression\"\n        bind-target=\"expression\"\n      </code-example>\n    </td>\n    <td>\n      Interpolation<br>\n      Property<br>\n      Attribute<br>\n      Class<br>\n      Style\n    </td>\n    </tr><tr>\n      <td>\n        One-way<br>from view target<br>to data source\n      </td>\n      <td>\n        <code-example>\n          (target)=\"statement\"\n          on-target=\"statement\"\n        </code-example>\n      </td>\n      <td>\n        Event\n      </td>\n    </tr>\n    <tr>\n      <td>\n        Two-way\n      </td>\n      <td>\n        <code-example>\n          [(target)]=\"expression\"\n          bindon-target=\"expression\"\n        </code-example>\n      </td>\n      <td>\n        Two-way\n      </td>\n    </tr>\n  \n</tbody></table>\n<p>Binding types other than interpolation have a <strong>target name</strong> to the left of the equal sign,\neither surrounded by punctuation (<code>[]</code>, <code>()</code>) or preceded by a prefix (<code>bind-</code>, <code>on-</code>, <code>bindon-</code>).</p>\n<p>The target name is the name of a <em>property</em>. It may look like the name of an <em>attribute</em> but it never is.\nTo appreciate the difference, you must develop a new way to think about template HTML.</p>\n<h3 id=\"a-new-mental-model\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#a-new-mental-model\"><i class=\"material-icons\">link</i></a>A new mental model</h3>\n<p>With all the power of data binding and the ability to extend the HTML vocabulary\nwith custom markup, it is tempting to think of template HTML as <em>HTML Plus</em>.</p>\n<p>It really <em>is</em> HTML Plus.\nBut it's also significantly different than the HTML you're used to.\nIt requires a new mental model.</p>\n<p>In the normal course of HTML development, you create a visual structure with HTML elements, and\nyou modify those elements by setting element attributes with string constants.</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"img+button\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;div class=\"special\">Mental Model&#x3C;/div>\n&#x3C;img src=\"images/hero.png\">\n&#x3C;button disabled>Save&#x3C;/button>\n\n</code-example>\n<p>You still create a structure and initialize attribute values this way in Angular templates.</p>\n<p>Then you learn to create new elements with components that encapsulate HTML\nand drop them into templates as if they were native HTML elements.</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"hero-detail-1\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;!-- Normal HTML -->\n&#x3C;div class=\"special\">Mental Model&#x3C;/div>\n&#x3C;!-- Wow! A new element! -->\n&#x3C;hero-detail>&#x3C;/hero-detail>\n\n</code-example>\n<p>That's HTML Plus.</p>\n<p>Then you learn about data binding. The first binding you meet might look like this:</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"disabled-button-1\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;!-- Bind button disabled state to `isUnchanged` property -->\n&#x3C;button [disabled]=\"isUnchanged\">Save&#x3C;/button>\n\n</code-example>\n<p>You'll get to that peculiar bracket notation in a moment. Looking beyond it,\nyour intuition suggests that you're binding to the button's <code>disabled</code> attribute and setting\nit to the current value of the component's <code>isUnchanged</code> property.</p>\n<p>Your intuition is incorrect! Your everyday HTML mental model is misleading.\nIn fact, once you start data binding, you are no longer working with HTML <em>attributes</em>. You aren't setting attributes.\nYou are setting the <em>properties</em> of DOM elements, components, and directives.</p>\n<div class=\"l-sub-section\">\n<h3 id=\"html-attribute-vs-dom-property\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#html-attribute-vs-dom-property\"><i class=\"material-icons\">link</i></a>HTML attribute vs. DOM property</h3>\n<p>The distinction between an HTML attribute and a DOM property is crucial to understanding how Angular binding works.</p>\n<p><strong>Attributes are defined by HTML. Properties are defined by the DOM (Document Object Model).</strong></p>\n<ul>\n<li>\n<p>A few HTML attributes have 1:1 mapping to properties. <code>id</code> is one example.</p>\n</li>\n<li>\n<p>Some HTML attributes don't have corresponding properties. <code>colspan</code> is one example.</p>\n</li>\n<li>\n<p>Some DOM properties don't have corresponding attributes. <code>textContent</code> is one example.</p>\n</li>\n<li>\n<p>Many HTML attributes appear to map to properties ... but not in the way you might think!</p>\n</li>\n</ul>\n<p>That last category is confusing until you grasp this general rule:</p>\n<p><strong>Attributes <em>initialize</em> DOM properties and then they are done.\nProperty values can change; attribute values can't.</strong></p>\n<p>For example, when the browser renders <code>&#x3C;input type=\"text\" value=\"Bob\"></code>, it creates a\ncorresponding DOM node with a <code>value</code> property <em>initialized</em> to \"Bob\".</p>\n<p>When the user enters \"Sally\" into the input box, the DOM element <code>value</code> <em>property</em> becomes \"Sally\".\nBut the HTML <code>value</code> <em>attribute</em> remains unchanged as you discover if you ask the input element\nabout that attribute: <code>input.getAttribute('value')</code> returns \"Bob\".</p>\n<p>The HTML attribute <code>value</code> specifies the <em>initial</em> value; the DOM <code>value</code> property is the <em>current</em> value.</p>\n<p>The <code>disabled</code> attribute is another peculiar example. A button's <code>disabled</code> <em>property</em> is\n<code>false</code> by default so the button is enabled.\nWhen you add the <code>disabled</code> <em>attribute</em>, its presence alone initializes the  button's <code>disabled</code> <em>property</em> to <code>true</code>\nso the button is disabled.</p>\n<p>Adding and removing the <code>disabled</code> <em>attribute</em> disables and enables the button. The value of the <em>attribute</em> is irrelevant,\nwhich is why you cannot enable a button by writing <code>&#x3C;button disabled=\"false\">Still Disabled&#x3C;/button></code>.</p>\n<p>Setting the button's <code>disabled</code> <em>property</em>  (say, with an Angular binding) disables or enables the button.\nThe value of the <em>property</em> matters.</p>\n<p><strong>The HTML attribute and the DOM property are not the same thing, even when they have the same name.</strong></p>\n</div>\n<p>This fact bears repeating:\n<strong>Template binding works with <em>properties</em> and <em>events</em>, not <em>attributes</em>.</strong></p>\n<div class=\"callout is-helpful\">\n<header>\n  A world without attributes\n</header>\n<p>In the world of Angular, the only role of attributes is to initialize element and directive state.\nWhen you write a data binding, you're dealing exclusively with properties and events of the target object.\nHTML attributes effectively disappear.</p>\n</div>\n<p>With this model firmly in mind, read on to learn about binding targets.</p>\n<h3 id=\"binding-targets\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#binding-targets\"><i class=\"material-icons\">link</i></a>Binding targets</h3>\n<p>The <strong>target of a data binding</strong> is something in the DOM.\nDepending on the binding type, the target can be an\n(element | component | directive) property, an\n(element | component | directive) event, or (rarely) an attribute name.\nThe following table summarizes:</p>\n<style>\n  td, th {vertical-align: top}\n</style>\n<table width=\"100%\">\n  <colgroup><col width=\"10%\">\n  \n  <col width=\"15%\">\n  \n  <col width=\"75%\">\n  \n  </colgroup><tbody><tr>\n    <th>\n      Type\n    </th>\n    <th>\n      Target\n    </th>\n    <th>\n      Examples\n    </th>\n  </tr>\n  <tr>\n    <td>\n      Property\n    </td>\n    <td>\n      Element property<br>\n      Component property<br>\n      Directive property\n    </td>\n    <td>\n      <code-example path=\"template-syntax/src/app/app.component.html\" region=\"property-binding-syntax-1\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;img [src]=\"heroImageUrl\">\n&#x3C;hero-detail [hero]=\"currentHero\">&#x3C;/hero-detail>\n&#x3C;div [ngClass]=\"{'special': isSpecial}\">&#x3C;/div>\n\n</code-example>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      Event\n    </td>\n    <td>\n      Element event<br>\n      Component event<br>\n      Directive event\n    </td>\n    <td>\n      <code-example path=\"template-syntax/src/app/app.component.html\" region=\"event-binding-syntax-1\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;button (click)=\"onSave()\">Save&#x3C;/button>\n&#x3C;hero-detail (deleteRequest)=\"deleteHero()\">&#x3C;/hero-detail>\n&#x3C;div (myClick)=\"clicked=$event\" clickable>click me&#x3C;/div>\n\n</code-example>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      Two-way\n    </td>\n    <td>\n      Event and property\n    </td>\n    <td>\n      <code-example path=\"template-syntax/src/app/app.component.html\" region=\"2-way-binding-syntax-1\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;input [(ngModel)]=\"name\">\n\n</code-example>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      Attribute\n    </td>\n    <td>\n      Attribute\n      (the exception)\n    </td>\n    <td>\n      <code-example path=\"template-syntax/src/app/app.component.html\" region=\"attribute-binding-syntax-1\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;button [attr.aria-label]=\"help\">help&#x3C;/button>\n\n</code-example>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      Class\n    </td>\n    <td>\n      <code>class</code> property\n    </td>\n    <td>\n      <code-example path=\"template-syntax/src/app/app.component.html\" region=\"class-binding-syntax-1\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;div [class.special]=\"isSpecial\">Special&#x3C;/div>\n\n</code-example>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      Style\n    </td>\n    <td>\n      <code>style</code> property\n    </td>\n    <td>\n      <code-example path=\"template-syntax/src/app/app.component.html\" region=\"style-binding-syntax-1\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;button [style.color]=\"isSpecial ? 'red' : 'green'\">\n\n</code-example>\n    </td>\n  </tr>\n</tbody></table>\n<p>With this broad view in mind, you're ready to look at binding types in detail.\n<a href=\"guide/template-syntax#top-of-page\">back to top</a></p>\n<hr>\n<a id=\"property-binding\"></a>\n<h2 id=\"property-binding--property-\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#property-binding--property-\"><i class=\"material-icons\">link</i></a>Property binding ( <span class=\"syntax\">[property]</span> )</h2>\n<p>Write a template <strong>property binding</strong> to set a property of a view element.\nThe binding sets the property to the value of a <a href=\"guide/template-syntax#template-expressions\">template expression</a>.</p>\n<p>The most common property binding sets an element property to a component property value. An example is\nbinding the <code>src</code> property of an image element to a component's <code>heroImageUrl</code> property:</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"property-binding-1\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;img [src]=\"heroImageUrl\">\n\n</code-example>\n<p>Another example is disabling a button when the component says that it <code>isUnchanged</code>:</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"property-binding-2\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;button [disabled]=\"isUnchanged\">Cancel is disabled&#x3C;/button>\n\n</code-example>\n<p>Another is setting a property of a directive:</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"property-binding-3\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;div [ngClass]=\"classes\">[ngClass] binding to the classes property&#x3C;/div>\n\n</code-example>\n<p>Yet another is setting the model property of a custom component (a great way\nfor parent and child components to communicate):</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"property-binding-4\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;hero-detail [hero]=\"currentHero\">&#x3C;/hero-detail>\n\n</code-example>\n<h3 id=\"one-way-in\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#one-way-in\"><i class=\"material-icons\">link</i></a>One-way <em>in</em></h3>\n<p>People often describe property binding as <em>one-way data binding</em> because it flows a value in one direction,\nfrom a component's data property into a target element property.</p>\n<p>You cannot use property binding to pull values <em>out</em> of the target element.\nYou can't bind to a property of the target element to <em>read</em> it. You can only <em>set</em> it.</p>\n<div class=\"l-sub-section\">\n<p>Similarly, you cannot use property binding to <em>call</em> a method on the target element.</p>\n<p>If the element raises events, you can listen to them with an <a href=\"guide/template-syntax#event-binding\">event binding</a>.</p>\n<p>If you must read a target element property or call one of its methods,\nyou'll need a different technique.\nSee the API reference for\n<a href=\"api/core/ViewChild\">ViewChild</a> and\n<a href=\"api/core/ContentChild\">ContentChild</a>.</p>\n</div>\n<h3 id=\"binding-target\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#binding-target\"><i class=\"material-icons\">link</i></a>Binding target</h3>\n<p>An element property between enclosing square brackets identifies the target property.\nThe target property in the following code is the image element's <code>src</code> property.</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"property-binding-1\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;img [src]=\"heroImageUrl\">\n\n</code-example>\n<p>Some people prefer the <code>bind-</code> prefix alternative, known as the <em>canonical form</em>:</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"property-binding-5\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;img bind-src=\"heroImageUrl\">\n\n</code-example>\n<p>The target name is always the name of a property, even when it appears to be the name of something else.\nYou see <code>src</code> and may think it's the name of an attribute. No. It's the name of an image element property.</p>\n<p>Element properties may be the more common targets,\nbut Angular looks first to see if the name is a property of a known directive,\nas it is in the following example:</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"property-binding-3\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;div [ngClass]=\"classes\">[ngClass] binding to the classes property&#x3C;/div>\n\n</code-example>\n<div class=\"l-sub-section\">\n<p>Technically, Angular is matching the name to a directive <a href=\"guide/template-syntax#inputs-outputs\">input</a>,\none of the property names listed in the directive's <code>inputs</code> array or a property decorated with <code>@Input()</code>.\nSuch inputs map to the directive's own properties.</p>\n</div>\n<p>If the name fails to match a property of a known directive or element, Angular reports an “unknown directive” error.</p>\n<h3 id=\"avoid-side-effects\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#avoid-side-effects\"><i class=\"material-icons\">link</i></a>Avoid side effects</h3>\n<p>As mentioned previously, evaluation of a template expression should have no visible side effects.\nThe expression language itself does its part to keep you safe.\nYou can't assign a value to anything in a property binding expression nor use the increment and decrement operators.</p>\n<p>Of course, the expression might invoke a property or method that has side effects.\nAngular has no way of knowing that or stopping you.</p>\n<p>The expression could call something like <code>getFoo()</code>. Only you know what <code>getFoo()</code> does.\nIf <code>getFoo()</code> changes something and you happen to be binding to that something, you risk an unpleasant experience.\nAngular may or may not display the changed value. Angular may detect the change and throw a warning error.\nIn general, stick to data properties and to methods that return values and do no more.</p>\n<h3 id=\"return-the-proper-type\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#return-the-proper-type\"><i class=\"material-icons\">link</i></a>Return the proper type</h3>\n<p>The template expression should evaluate to the type of value expected by the target property.\nReturn a string if the target property expects a string.\nReturn a number if the target property expects a number.\nReturn an object if the target property expects an object.</p>\n<p>The <code>hero</code> property of the <code>HeroDetail</code> component expects a <code>Hero</code> object, which is exactly what you're sending in the property binding:</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"property-binding-4\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;hero-detail [hero]=\"currentHero\">&#x3C;/hero-detail>\n\n</code-example>\n<h3 id=\"remember-the-brackets\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#remember-the-brackets\"><i class=\"material-icons\">link</i></a>Remember the brackets</h3>\n<p>The brackets tell Angular to evaluate the template expression.\nIf you omit the brackets, Angular treats the string as a constant\nand <em>initializes the target property</em> with that string.\nIt does <em>not</em> evaluate the string!</p>\n<p>Don't make the following mistake:</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"property-binding-6\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;!-- ERROR: HeroDetailComponent.hero expects a\n     Hero object, not the string \"currentHero\" -->\n  &#x3C;hero-detail hero=\"currentHero\">&#x3C;/hero-detail>\n\n</code-example>\n<a id=\"one-time-initialization\"></a>\n<h3 id=\"one-time-string-initialization\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#one-time-string-initialization\"><i class=\"material-icons\">link</i></a>One-time string initialization</h3>\n<p>You <em>should</em> omit the brackets when all of the following are true:</p>\n<ul>\n<li>The target property accepts a string value.</li>\n<li>The string is a fixed value that you can bake into the template.</li>\n<li>This initial value never changes.</li>\n</ul>\n<p>You routinely initialize attributes this way in standard HTML, and it works\njust as well for directive and component property initialization.\nThe following example initializes the <code>prefix</code> property of the <code>HeroDetailComponent</code> to a fixed string,\nnot a template expression. Angular sets it and forgets about it.</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"property-binding-7\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;hero-detail prefix=\"You are my\" [hero]=\"currentHero\">&#x3C;/hero-detail>\n\n</code-example>\n<p>The <code>[hero]</code> binding, on the other hand, remains a live binding to the component's <code>currentHero</code> property.</p>\n<a id=\"property-binding-or-interpolation\"></a>\n<h3 id=\"property-binding-or-interpolation\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#property-binding-or-interpolation\"><i class=\"material-icons\">link</i></a>Property binding or interpolation?</h3>\n<p>You often have a choice between interpolation and property binding.\nThe following binding pairs do the same thing:</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"property-binding-vs-interpolation\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;p>&#x3C;img src=\"{{heroImageUrl}}\"> is the &#x3C;i>interpolated&#x3C;/i> image.&#x3C;/p>\n&#x3C;p>&#x3C;img [src]=\"heroImageUrl\"> is the &#x3C;i>property bound&#x3C;/i> image.&#x3C;/p>\n\n&#x3C;p>&#x3C;span>\"{{title}}\" is the &#x3C;i>interpolated&#x3C;/i> title.&#x3C;/span>&#x3C;/p>\n&#x3C;p>\"&#x3C;span [innerHTML]=\"title\">&#x3C;/span>\" is the &#x3C;i>property bound&#x3C;/i> title.&#x3C;/p>\n\n</code-example>\n<p><em>Interpolation</em> is a convenient alternative to <em>property binding</em> in many cases.</p>\n<p>When rendering data values as strings, there is no technical reason to prefer one form to the other.\nYou lean toward readability, which tends to favor interpolation.\nYou suggest establishing coding style rules and choosing the form that\nboth conforms to the rules and feels most natural for the task at hand.</p>\n<p>When setting an element property to a non-string data value, you must use <em>property binding</em>.</p>\n<h4 id=\"content-security\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#content-security\"><i class=\"material-icons\">link</i></a>Content security</h4>\n<p>Imagine the following <em>malicious content</em>.</p>\n<code-example path=\"template-syntax/src/app/app.component.ts\" region=\"evil-title\" title=\"src/app/app.component.ts\" linenums=\"false\">\nevilTitle = 'Template &#x3C;script>alert(\"evil never sleeps\")&#x3C;/script>Syntax';\n\n</code-example>\n<p>Fortunately, Angular data binding is on alert for dangerous HTML.\nIt <a href=\"guide/security#sanitization-and-security-contexts\"><em>sanitizes</em></a> the values before displaying them.\nIt <strong>will not</strong> allow HTML with script tags to leak into the browser, neither with interpolation\nnor property binding.</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"property-binding-vs-interpolation-sanitization\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;!--\n  Angular generates warnings for these two lines as it sanitizes them\n  WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).\n -->\n&#x3C;p>&#x3C;span>\"{{evilTitle}}\" is the &#x3C;i>interpolated&#x3C;/i> evil title.&#x3C;/span>&#x3C;/p>\n&#x3C;p>\"&#x3C;span [innerHTML]=\"evilTitle\">&#x3C;/span>\" is the &#x3C;i>property bound&#x3C;/i> evil title.&#x3C;/p>\n\n</code-example>\n<p>Interpolation handles the script tags differently than property binding but both approaches render the\ncontent harmlessly.</p>\n<figure>\n  <img src=\"generated/images/guide/template-syntax/evil-title.png\" alt=\"evil title made safe\" width=\"500\" height=\"40\">\n</figure>\n<p><a href=\"guide/template-syntax#top-of-page\">back to top</a></p>\n<hr>\n<a id=\"other-bindings\"></a>\n<h2 id=\"attribute-class-and-style-bindings\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#attribute-class-and-style-bindings\"><i class=\"material-icons\">link</i></a>Attribute, class, and style bindings</h2>\n<p>The template syntax provides specialized one-way bindings for scenarios less well suited to property binding.</p>\n<h3 id=\"attribute-binding\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#attribute-binding\"><i class=\"material-icons\">link</i></a>Attribute binding</h3>\n<p>You can set the value of an attribute directly with an <strong>attribute binding</strong>.</p>\n<div class=\"l-sub-section\">\n<p>This is the only exception to the rule that a binding sets a target property.\nThis is the only binding that creates and sets an attribute.</p>\n</div>\n<p>This guide stresses repeatedly that setting an element property with a property binding\nis always preferred to setting the attribute with a string. Why does Angular offer attribute binding?</p>\n<p><strong>You must use attribute binding when there is no element property to bind.</strong></p>\n<p>Consider the <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA\">ARIA</a>,\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG\">SVG</a>, and\ntable span attributes. They are pure attributes.\nThey do not correspond to element properties, and they do not set element properties.\nThere are no property targets to bind to.</p>\n<p>This fact becomes painfully obvious when you write something like this.</p>\n<code-example language=\"html\">\n  &#x3C;tr>&#x3C;td colspan=\"{{1 + 1}}\">Three-Four&#x3C;/td>&#x3C;/tr>\n</code-example>\n<p>And you get this error:</p>\n<code-example format=\"nocode\">\n  Template parse errors:\n  Can't bind to 'colspan' since it isn't a known native property\n</code-example>\n<p>As the message says, the <code>&#x3C;td></code> element does not have a <code>colspan</code> property.\nIt has the \"colspan\" <em>attribute</em>, but\ninterpolation and property binding can set only <em>properties</em>, not attributes.</p>\n<p>You need attribute bindings to create and bind to such attributes.</p>\n<p>Attribute binding syntax resembles property binding.\nInstead of an element property between brackets, start with the prefix <strong><code>attr</code></strong>,\nfollowed by a dot (<code>.</code>) and the name of the attribute.\nYou then set the attribute value, using an expression that resolves to a string.</p>\n<p>Bind <code>[attr.colspan]</code> to a calculated value:</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"attrib-binding-colspan\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;table border=1>\n  &#x3C;!--  expression calculates colspan=2 -->\n  &#x3C;tr>&#x3C;td [attr.colspan]=\"1 + 1\">One-Two&#x3C;/td>&#x3C;/tr>\n\n  &#x3C;!-- ERROR: There is no `colspan` property to set!\n    &#x3C;tr>&#x3C;td colspan=\"{{1 + 1}}\">Three-Four&#x3C;/td>&#x3C;/tr>\n  -->\n\n  &#x3C;tr>&#x3C;td>Five&#x3C;/td>&#x3C;td>Six&#x3C;/td>&#x3C;/tr>\n&#x3C;/table>\n\n</code-example>\n<p>Here's how the table renders:</p>\n<table border=\"1px\">\n  <tbody><tr><td colspan=\"2\">One-Two</td></tr>\n  <tr><td>Five</td><td>Six</td></tr>\n </tbody></table>\n<p>One of the primary use cases for attribute binding\nis to set ARIA attributes, as in this example:</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"attrib-binding-aria\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;!-- create and set an aria attribute for assistive technology -->\n&#x3C;button [attr.aria-label]=\"actionName\">{{actionName}} with Aria&#x3C;/button>\n\n</code-example>\n<p><a href=\"guide/template-syntax#top-of-page\">back to top</a></p>\n<hr>\n<h3 id=\"class-binding\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#class-binding\"><i class=\"material-icons\">link</i></a>Class binding</h3>\n<p>You can add and remove CSS class names from an element's <code>class</code> attribute with\na <strong>class binding</strong>.</p>\n<p>Class binding syntax resembles property binding.\nInstead of an element property between brackets, start with the prefix <code>class</code>,\noptionally followed by a dot (<code>.</code>) and the name of a CSS class: <code>[class.class-name]</code>.</p>\n<p>The following examples show how to add and remove the application's \"special\" class\nwith class bindings.  Here's how to set the attribute without binding:</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"class-binding-1\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;!-- standard class attribute setting  -->\n&#x3C;div class=\"bad curly special\">Bad curly special&#x3C;/div>\n\n</code-example>\n<p>You can replace that with a binding to a string of the desired class names; this is an all-or-nothing, replacement binding.</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"class-binding-2\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;!-- reset/override all class names with a binding  -->\n&#x3C;div class=\"bad curly special\"\n     [class]=\"badCurly\">Bad curly&#x3C;/div>\n\n</code-example>\n<p>Finally, you can bind to a specific class name.\nAngular adds the class when the template expression evaluates to truthy.\nIt removes the class when the expression is falsy.</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"class-binding-3\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;!-- toggle the \"special\" class on/off with a property -->\n&#x3C;div [class.special]=\"isSpecial\">The class binding is special&#x3C;/div>\n\n&#x3C;!-- binding to `class.special` trumps the class attribute -->\n&#x3C;div class=\"special\"\n     [class.special]=\"!isSpecial\">This one is not so special&#x3C;/div>\n\n</code-example>\n<div class=\"l-sub-section\">\n<p>While this is a fine way to toggle a single class name,\nthe <a href=\"guide/template-syntax#ngClass\">NgClass directive</a> is usually preferred when managing multiple class names at the same time.</p>\n</div>\n<p><a href=\"guide/template-syntax#top-of-page\">back to top</a></p>\n<hr>\n<h3 id=\"style-binding\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#style-binding\"><i class=\"material-icons\">link</i></a>Style binding</h3>\n<p>You can set inline styles with a <strong>style binding</strong>.</p>\n<p>Style binding syntax resembles property binding.\nInstead of an element property between brackets, start with the prefix <code>style</code>,\nfollowed by a dot (<code>.</code>) and the name of a CSS style property: <code>[style.style-property]</code>.</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"style-binding-1\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;button [style.color]=\"isSpecial ? 'red': 'green'\">Red&#x3C;/button>\n&#x3C;button [style.background-color]=\"canSave ? 'cyan': 'grey'\" >Save&#x3C;/button>\n\n</code-example>\n<p>Some style binding styles have a unit extension.\nThe following example conditionally sets the font size in  “em” and “%” units .</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"style-binding-2\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;button [style.font-size.em]=\"isSpecial ? 3 : 1\" >Big&#x3C;/button>\n&#x3C;button [style.font-size.%]=\"!isSpecial ? 150 : 50\" >Small&#x3C;/button>\n\n</code-example>\n<div class=\"l-sub-section\">\n<p>While this is a fine way to set a single style,\nthe <a href=\"guide/template-syntax#ngStyle\">NgStyle directive</a> is generally preferred when setting several inline styles at the same time.</p>\n</div>\n<div class=\"l-sub-section\">\n<p>Note that a <em>style property</em> name can be written in either\n<a href=\"guide/glossary#dash-case\">dash-case</a>, as shown above, or\n<a href=\"guide/glossary#camelcase\">camelCase</a>, such as <code>fontSize</code>.</p>\n</div>\n<p><a href=\"guide/template-syntax#top-of-page\">back to top</a></p>\n<hr>\n<a id=\"event-binding\"></a>\n<h2 id=\"event-binding---event-\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#event-binding---event-\"><i class=\"material-icons\">link</i></a>Event binding  ( <span class=\"syntax\">(event)</span> )</h2>\n<p>The bindings directives you've met so far flow data in one direction: <strong>from a component to an element</strong>.</p>\n<p>Users don't just stare at the screen. They enter text into input boxes. They pick items from lists.\nThey click buttons. Such user actions may result in a flow of data in the opposite direction:\n<strong>from an element to a component</strong>.</p>\n<p>The only way to know about a user action is to listen for certain events such as\nkeystrokes, mouse movements, clicks, and touches.\nYou declare your interest in user actions through Angular event binding.</p>\n<p>Event binding syntax consists of a <strong>target event</strong> name\nwithin parentheses on the left of an equal sign, and a quoted\n<a href=\"guide/template-syntax#template-statements\">template statement</a> on the right.\nThe following event binding listens for the button's click events, calling\nthe component's <code>onSave()</code> method whenever a click occurs:</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"event-binding-1\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;button (click)=\"onSave()\">Save&#x3C;/button>\n\n</code-example>\n<h3 id=\"target-event\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#target-event\"><i class=\"material-icons\">link</i></a>Target event</h3>\n<p>A <strong>name between parentheses</strong> — for example, <code>(click)</code> —\nidentifies the target event. In the following example, the target is the button's click event.</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"event-binding-1\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;button (click)=\"onSave()\">Save&#x3C;/button>\n\n</code-example>\n<p>Some people prefer the <code>on-</code> prefix alternative, known as the <strong>canonical form</strong>:</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"event-binding-2\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;button on-click=\"onSave()\">On Save&#x3C;/button>\n\n</code-example>\n<p>Element events may be the more common targets, but Angular looks first to see if the name matches an event property\nof a known directive, as it does in the following example:</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"event-binding-3\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;!-- `myClick` is an event on the custom `ClickDirective` -->\n&#x3C;div (myClick)=\"clickMessage=$event\" clickable>click with myClick&#x3C;/div>\n\n</code-example>\n<div class=\"l-sub-section\">\n<p>The <code>myClick</code> directive is further described in the section\non <a href=\"guide/template-syntax#aliasing-io\">aliasing input/output properties</a>.</p>\n</div>\n<p>If the name fails to match an element event or an output property of a known directive,\nAngular reports an “unknown directive” error.</p>\n<h3 id=\"event-and-event-handling-statements\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#event-and-event-handling-statements\"><i class=\"material-icons\">link</i></a><em>$event</em> and event handling statements</h3>\n<p>In an event binding, Angular sets up an event handler for the target event.</p>\n<p>When the event is raised, the handler executes the template statement.\nThe template statement typically involves a receiver, which performs an action\nin response to the event, such as storing a value from the HTML control\ninto a model.</p>\n<p>The binding conveys information about the event, including data values, through\nan <strong>event object named <code>$event</code></strong>.</p>\n<p>The shape of the event object is determined by the target event.\nIf the target event is a native DOM element event, then <code>$event</code> is a\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/Events\">DOM event object</a>,\nwith properties such as <code>target</code> and <code>target.value</code>.</p>\n<p>Consider this example:</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"without-NgModel\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;input [value]=\"currentHero.name\"\n       (input)=\"currentHero.name=$event.target.value\" >\n\n</code-example>\n<p>This code sets the input box <code>value</code> property by binding to the <code>name</code> property.\nTo listen for changes to the value, the code binds to the input box's <code>input</code> event.\nWhen the user makes changes, the <code>input</code> event is raised, and the binding executes\nthe statement within a context that includes the DOM event object, <code>$event</code>.</p>\n<p>To update the <code>name</code> property, the changed text is retrieved by following the path <code>$event.target.value</code>.</p>\n<p>If the event belongs to a directive (recall that components are directives),\n<code>$event</code> has whatever shape the directive decides to produce.</p>\n<a id=\"eventemitter\"></a>\n<a id=\"custom-event\"></a>\n<h3 id=\"custom-events-with-eventemitter\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#custom-events-with-eventemitter\"><i class=\"material-icons\">link</i></a>Custom events with <span class=\"syntax\">EventEmitter</span></h3>\n<p>Directives typically raise custom events with an Angular <a href=\"api/core/EventEmitter\">EventEmitter</a>.\nThe directive creates an <code><a href=\"api/core/EventEmitter\">EventEmitter</a></code> and exposes it as a property.\nThe directive calls <code>EventEmitter.emit(payload)</code> to fire an event, passing in a message payload, which can be anything.\nParent directives listen for the event by binding to this property and accessing the payload through the <code>$event</code> object.</p>\n<p>Consider a <code>HeroDetailComponent</code> that presents hero information and responds to user actions.\nAlthough the <code>HeroDetailComponent</code> has a delete button it doesn't know how to delete the hero itself.\nThe best it can do is raise an event reporting the user's delete request.</p>\n<p>Here are the pertinent excerpts from that <code>HeroDetailComponent</code>:</p>\n<code-example path=\"template-syntax/src/app/hero-detail.component.ts\" linenums=\"false\" title=\"src/app/hero-detail.component.ts (template)\" region=\"template-1\">\ntemplate: `\n&#x3C;div>\n  &#x3C;img src=\"{{heroImageUrl}}\">\n  &#x3C;span [style.text-decoration]=\"lineThrough\">\n    {{prefix}} {{hero?.name}}\n  &#x3C;/span>\n  &#x3C;button (click)=\"delete()\">Delete&#x3C;/button>\n&#x3C;/div>`\n\n</code-example>\n<code-example path=\"template-syntax/src/app/hero-detail.component.ts\" linenums=\"false\" title=\"src/app/hero-detail.component.ts (deleteRequest)\" region=\"deleteRequest\">\n// This component make a request but it can't actually delete a hero.\ndeleteRequest = new EventEmitter&#x3C;Hero>();\n\ndelete() {\n  this.deleteRequest.emit(this.hero);\n}\n\n</code-example>\n<p>The component defines a <code>deleteRequest</code> property that returns an <code><a href=\"api/core/EventEmitter\">EventEmitter</a></code>.\nWhen the user clicks <em>delete</em>, the component invokes the <code>delete()</code> method,\ntelling the <code><a href=\"api/core/EventEmitter\">EventEmitter</a></code> to emit a <code>Hero</code> object.</p>\n<p>Now imagine a hosting parent component that binds to the <code>HeroDetailComponent</code>'s <code>deleteRequest</code> event.</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" linenums=\"false\" title=\"src/app/app.component.html (event-binding-to-component)\" region=\"event-binding-to-component\">\n&#x3C;hero-detail (deleteRequest)=\"deleteHero($event)\" [hero]=\"currentHero\">&#x3C;/hero-detail>\n\n</code-example>\n<p>When the <code>deleteRequest</code> event fires, Angular calls the parent component's <code>deleteHero</code> method,\npassing the <em>hero-to-delete</em> (emitted by <code>HeroDetail</code>) in the <code>$event</code> variable.</p>\n<h3 id=\"template-statements-have-side-effects\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#template-statements-have-side-effects\"><i class=\"material-icons\">link</i></a>Template statements have side effects</h3>\n<p>The <code>deleteHero</code> method has a side effect: it deletes a hero.\nTemplate statement side effects are not just OK, but expected.</p>\n<p>Deleting the hero updates the model, perhaps triggering other changes\nincluding queries and saves to a remote server.\nThese changes percolate through the system and are ultimately displayed in this and other views.</p>\n<p><a href=\"guide/template-syntax#top-of-page\">back to top</a></p>\n<hr>\n<a id=\"two-way\"></a>\n<h2 id=\"two-way-binding---\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#two-way-binding---\"><i class=\"material-icons\">link</i></a>Two-way binding ( <span class=\"syntax\">[(...)]</span> )</h2>\n<p>You often want to both display a data property and update that property when the user makes changes.</p>\n<p>On the element side that takes a combination of setting a specific element property\nand listening for an element change event.</p>\n<p>Angular offers a special <em>two-way data binding</em> syntax for this purpose, <strong><code>[(x)]</code></strong>.\nThe <code>[(x)]</code> syntax combines the brackets\nof <em>property binding</em>, <code>[x]</code>, with the parentheses of <em>event binding</em>, <code>(x)</code>.</p>\n<div class=\"callout is-important\">\n<header>\n  [( )] = banana in a box\n</header>\n<p>Visualize a <em>banana in a box</em> to remember that the parentheses go <em>inside</em> the brackets.</p>\n</div>\n<p>The <code>[(x)]</code> syntax is easy to demonstrate when the element has a settable property called <code>x</code>\nand a corresponding event named <code>xChange</code>.\nHere's a <code>SizerComponent</code> that fits the pattern.\nIt has a <code>size</code> value property and a companion <code>sizeChange</code> event:</p>\n<code-example path=\"template-syntax/src/app/sizer.component.ts\" title=\"src/app/sizer.component.ts\">\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n  selector: 'my-sizer',\n  template: `\n  &#x3C;div>\n    &#x3C;button (click)=\"dec()\" title=\"smaller\">-&#x3C;/button>\n    &#x3C;button (click)=\"inc()\" title=\"bigger\">+&#x3C;/button>\n    &#x3C;label [style.font-size.px]=\"size\">FontSize: {{size}}px&#x3C;/label>\n  &#x3C;/div>`\n})\nexport class SizerComponent {\n  @Input()  size: number | string;\n  @Output() sizeChange = new EventEmitter&#x3C;number>();\n\n  dec() { this.resize(-1); }\n  inc() { this.resize(+1); }\n\n  resize(delta: number) {\n    this.size = Math.min(40, Math.max(8, +this.size + delta));\n    this.sizeChange.emit(this.size);\n  }\n}\n\n\n</code-example>\n<p>The initial <code>size</code> is an input value from a property binding.\nClicking the buttons increases or decreases the <code>size</code>, within min/max values constraints,\nand then raises (<em>emits</em>) the <code>sizeChange</code> event with the adjusted size.</p>\n<p>Here's an example in which the <code>AppComponent.fontSizePx</code> is two-way bound to the <code>SizerComponent</code>:</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" linenums=\"false\" title=\"src/app/app.component.html (two-way-1)\" region=\"two-way-1\">\n&#x3C;my-sizer [(size)]=\"fontSizePx\">&#x3C;/my-sizer>\n&#x3C;div [style.font-size.px]=\"fontSizePx\">Resizable Text&#x3C;/div>\n\n</code-example>\n<p>The <code>AppComponent.fontSizePx</code> establishes the initial <code>SizerComponent.size</code> value.\nClicking the buttons updates the <code>AppComponent.fontSizePx</code> via the two-way binding.\nThe revised <code>AppComponent.fontSizePx</code> value flows through to the <em>style</em> binding,\nmaking the displayed text bigger or smaller.</p>\n<p>The two-way binding syntax is really just syntactic sugar for a <em>property</em> binding and an <em>event</em> binding.\nAngular <em>desugars</em> the <code>SizerComponent</code> binding into this:</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" linenums=\"false\" title=\"src/app/app.component.html (two-way-2)\" region=\"two-way-2\">\n&#x3C;my-sizer [size]=\"fontSizePx\" (sizeChange)=\"fontSizePx=$event\">&#x3C;/my-sizer>\n\n</code-example>\n<p>The <code>$event</code> variable contains the payload of the <code>SizerComponent.sizeChange</code> event.\nAngular assigns the <code>$event</code> value to the <code>AppComponent.fontSizePx</code> when the user clicks the buttons.</p>\n<p>Clearly the two-way binding syntax is a great convenience compared to separate property and event bindings.</p>\n<p>It would be convenient to use two-way binding with HTML form elements like <code>&#x3C;input></code> and <code>&#x3C;select></code>.\nHowever, no native HTML element follows the <code>x</code> value and <code>xChange</code> event pattern.</p>\n<p>Fortunately, the Angular <a href=\"guide/template-syntax#ngModel\"><em>NgModel</em></a> directive is a bridge that enables two-way binding to form elements.</p>\n<p><a href=\"guide/template-syntax#top-of-page\">back to top</a></p>\n<hr>\n<a id=\"directives\"></a>\n<h2 id=\"built-in-directives\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#built-in-directives\"><i class=\"material-icons\">link</i></a>Built-in directives</h2>\n<p>Earlier versions of Angular included over seventy built-in directives.\nThe community contributed many more, and countless private directives\nhave been created for internal applications.</p>\n<p>You don't need many of those directives in Angular.\nYou can often achieve the same results with the more capable and expressive Angular binding system.\nWhy create a directive to handle a click when you can write a simple binding such as this?</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"event-binding-1\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;button (click)=\"onSave()\">Save&#x3C;/button>\n\n</code-example>\n<p>You still benefit from directives that simplify complex tasks.\nAngular still ships with built-in directives; just not as many.\nYou'll write your own directives, just not as many.</p>\n<p>This segment reviews some of the most frequently used built-in directives,\nclassified as either <a href=\"guide/template-syntax#attribute-directives\"><em>attribute</em> directives</a> or <a href=\"guide/template-syntax#structural-directives\"><em>structural</em> directives</a>.</p>\n<hr>\n<a id=\"attribute-directives\"></a>\n<h2 id=\"built-in-attribute-directives\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#built-in-attribute-directives\"><i class=\"material-icons\">link</i></a>Built-in <em>attribute</em> directives</h2>\n<p>Attribute directives listen to and modify the behavior of\nother HTML elements, attributes, properties, and components.\nThey are usually applied to elements as if they were HTML attributes, hence the name.</p>\n<p>Many details are covered in the <a href=\"guide/attribute-directives\"><em>Attribute Directives</em></a> guide.\nMany NgMdules such as the <a href=\"guide/router\" title=\"Routing and Navigation\"><code><a href=\"api/router/RouterModule\">RouterModule</a></code></a>\nand the <a href=\"guide/forms\" title=\"Forms\"><code><a href=\"api/forms/FormsModule\">FormsModule</a></code></a> define their own attribute directives.\nThis section is an introduction to the most commonly used attribute directives:</p>\n<ul>\n<li><a href=\"guide/template-syntax#ngClass\"><code><a href=\"api/common/NgClass\">NgClass</a></code></a> - add and remove a set of CSS classes</li>\n<li><a href=\"guide/template-syntax#ngStyle\"><code><a href=\"api/common/NgStyle\">NgStyle</a></code></a> - add and remove a set of HTML styles</li>\n<li><a href=\"guide/template-syntax#ngModel\"><code><a href=\"api/forms/NgModel\">NgModel</a></code></a> - two-way data binding to an HTML form element\n<a href=\"guide/template-syntax#top-of-page\">back to top</a></li>\n</ul>\n<hr>\n<a id=\"ngClass\"></a>\n<h3 id=\"ngclass\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#ngclass\"><i class=\"material-icons\">link</i></a>NgClass</h3>\n<p>You typically control how elements appear\nby adding and removing CSS classes dynamically.\nYou can bind to the <code>ngClass</code> to add or remove several classes simultaneously.</p>\n<p>A <a href=\"guide/template-syntax#class-binding\">class binding</a> is a good way to add or remove a <em>single</em> class.</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"class-binding-3a\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;!-- toggle the \"special\" class on/off with a property -->\n&#x3C;div [class.special]=\"isSpecial\">The class binding is special&#x3C;/div>\n\n</code-example>\n<p>To add or remove <em>many</em> CSS classes at the same time, the <code><a href=\"api/common/NgClass\">NgClass</a></code> directive may be the better choice.</p>\n<p>Try binding <code>ngClass</code> to a key:value control object.\nEach key of the object is a CSS class name; its value is <code>true</code> if the class should be added,\n<code>false</code> if it should be removed.</p>\n<p>Consider a <code>setCurrentClasses</code> component method that sets a component property,\n<code>currentClasses</code> with an object that adds or removes three classes based on the\n<code>true</code>/<code>false</code> state of three other component properties:</p>\n<code-example path=\"template-syntax/src/app/app.component.ts\" region=\"setClasses\" title=\"src/app/app.component.ts\" linenums=\"false\">\ncurrentClasses: {};\nsetCurrentClasses() {\n  // CSS classes: added/removed per current state of component properties\n  this.currentClasses =  {\n    'saveable': this.canSave,\n    'modified': !this.isUnchanged,\n    'special':  this.isSpecial\n  };\n}\n\n</code-example>\n<p>Adding an <code>ngClass</code> property binding to <code>currentClasses</code> sets the element's classes accordingly:</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"NgClass-1\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;div [ngClass]=\"currentClasses\">This div is initially saveable, unchanged, and special&#x3C;/div>\n\n</code-example>\n<div class=\"l-sub-section\">\n<p>It's up to you to call <code>setCurrentClassess()</code>, both initially and when the dependent properties change.</p>\n</div>\n<p><a href=\"guide/template-syntax#top-of-page\">back to top</a></p>\n<hr>\n<a id=\"ngStyle\"></a>\n<h3 id=\"ngstyle\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#ngstyle\"><i class=\"material-icons\">link</i></a>NgStyle</h3>\n<p>You can set inline styles dynamically, based on the state of the component.\nWith <code><a href=\"api/common/NgStyle\">NgStyle</a></code> you can set many inline styles simultaneously.</p>\n<p>A <a href=\"guide/template-syntax#style-binding\">style binding</a> is an easy way to set a <em>single</em> style value.</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"NgStyle-1\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;div [style.font-size]=\"isSpecial ? 'x-large' : 'smaller'\" >\n  This div is x-large or smaller.\n&#x3C;/div>\n\n</code-example>\n<p>To set <em>many</em> inline styles at the same time, the <code><a href=\"api/common/NgStyle\">NgStyle</a></code> directive may be the better choice.</p>\n<p>Try binding <code>ngStyle</code> to a key:value control object.\nEach key of the object is a style name; its value is whatever is appropriate for that style.</p>\n<p>Consider a <code>setCurrentStyles</code> component method that sets a component property, <code>currentStyles</code>\nwith an object that defines three styles, based on the state of three other component propertes:</p>\n<code-example path=\"template-syntax/src/app/app.component.ts\" region=\"setStyles\" title=\"src/app/app.component.ts\" linenums=\"false\">\ncurrentStyles: {};\nsetCurrentStyles() {\n  // CSS styles: set per current state of component properties\n  this.currentStyles = {\n    'font-style':  this.canSave      ? 'italic' : 'normal',\n    'font-weight': !this.isUnchanged ? 'bold'   : 'normal',\n    'font-size':   this.isSpecial    ? '24px'   : '12px'\n  };\n}\n\n</code-example>\n<p>Adding an <code>ngStyle</code> property binding to <code>currentStyles</code> sets the element's styles accordingly:</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"NgStyle-2\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;div [ngStyle]=\"currentStyles\">\n  This div is initially italic, normal weight, and extra large (24px).\n&#x3C;/div>\n\n</code-example>\n<div class=\"l-sub-section\">\n<p>It's up to you to call <code>setCurrentStyles()</code>, both initially and when the dependent properties change.</p>\n</div>\n<p><a href=\"guide/template-syntax#top-of-page\">back to top</a></p>\n<hr>\n<a id=\"ngModel\"></a>\n<h3 id=\"ngmodel---two-way-binding-to-form-elements-with-ngmodel\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#ngmodel---two-way-binding-to-form-elements-with-ngmodel\"><i class=\"material-icons\">link</i></a>NgModel - Two-way binding to form elements with <span class=\"syntax\">[(ngModel)]</span></h3>\n<p>When developing data entry forms, you often both display a data property and\nupdate that property when the user makes changes.</p>\n<p>Two-way data binding with the <code><a href=\"api/forms/NgModel\">NgModel</a></code> directive makes that easy. Here's an example:</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" linenums=\"false\" title=\"src/app/app.component.html (NgModel-1)\" region=\"NgModel-1\">\n&#x3C;input [(ngModel)]=\"currentHero.name\">\n\n</code-example>\n<h4 id=\"formsmodule-is-required-to-use-ngmodel\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#formsmodule-is-required-to-use-ngmodel\"><i class=\"material-icons\">link</i></a><em>FormsModule</em> is required to use <em>ngModel</em></h4>\n<p>Before using the <code>ngModel</code> directive in a two-way data binding,\nyou must import the <code><a href=\"api/forms/FormsModule\">FormsModule</a></code> and add it to the NgModule's <code>imports</code> list.\nLearn more about the <code><a href=\"api/forms/FormsModule\">FormsModule</a></code> and <code>ngModel</code> in the\n<a href=\"guide/forms#ngModel\">Forms</a> guide.</p>\n<p>Here's how to import the <code><a href=\"api/forms/FormsModule\">FormsModule</a></code> to make <code>[(ngModel)]</code> available.</p>\n<code-example path=\"template-syntax/src/app/app.module.1.ts\" linenums=\"false\" title=\"src/app/app.module.ts (FormsModule import)\">\nimport { NgModule } from '@angular/core';\nimport { BrowserModule }  from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms'; // &#x3C;--- JavaScript import from Angular\n\n/* Other imports */\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    FormsModule  // &#x3C;--- import into the NgModule\n  ],\n  /* Other module metadata */\n})\nexport class AppModule { }\n\n\n</code-example>\n<h4 id=\"inside-ngmodel\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#inside-ngmodel\"><i class=\"material-icons\">link</i></a>Inside <span class=\"syntax\">[(ngModel)]</span></h4>\n<p>Looking back at the <code>name</code> binding, note that\nyou could have achieved the same result with separate bindings to\nthe <code>&#x3C;input></code> element's  <code>value</code> property and <code>input</code> event.</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"without-NgModel\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;input [value]=\"currentHero.name\"\n       (input)=\"currentHero.name=$event.target.value\" >\n\n</code-example>\n<p>That's cumbersome. Who can remember which element property to set and which element event emits user changes?\nHow do you extract the currently displayed text from the input box so you can update the data property?\nWho wants to look that up each time?</p>\n<p>That <code>ngModel</code> directive hides these onerous details behind its own  <code>ngModel</code> input and <code>ngModelChange</code> output properties.</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"NgModel-3\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;input\n  [ngModel]=\"currentHero.name\"\n  (ngModelChange)=\"currentHero.name=$event\">\n\n</code-example>\n<div class=\"l-sub-section\">\n<p>The <code>ngModel</code> data property sets the element's value property and the <code>ngModelChange</code> event property\nlistens for changes to the element's value.</p>\n<p>The details are specific to each kind of element and therefore the <code><a href=\"api/forms/NgModel\">NgModel</a></code> directive only works for an element\nsupported by a <a href=\"api/forms/ControlValueAccessor\">ControlValueAccessor</a>\nthat adapts an element to this protocol.\nThe <code>&#x3C;input></code> box is one of those elements.\nAngular provides <em>value accessors</em> for all of the basic HTML form elements and the\n<a href=\"guide/forms\"><em>Forms</em></a> guide shows how to bind to them.</p>\n<p>You can't apply <code>[(ngModel)]</code> to a non-form native element or a third-party custom component\nuntil you write a suitable <em>value accessor</em>,\na technique that is beyond the scope of this guide.</p>\n<p>You don't need a <em>value accessor</em> for an Angular component that you write because you\ncan name the value and event properties\nto suit Angular's basic <a href=\"guide/template-syntax#two-way\">two-way binding syntax</a> and skip <code><a href=\"api/forms/NgModel\">NgModel</a></code> altogether.\nThe <a href=\"guide/template-syntax#two-way\"><code>sizer</code> shown above</a> is an example of this technique.</p>\n</div>\n<p>Separate <code>ngModel</code> bindings is an improvement over binding to the element's native properties. You can do better.</p>\n<p>You shouldn't have to mention the data property twice. Angular should be able to capture\nthe component's data property and set it\nwith a single declaration, which it can with the <code>[(ngModel)]</code> syntax:</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"NgModel-1\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;input [(ngModel)]=\"currentHero.name\">\n\n</code-example>\n<p>Is <code>[(ngModel)]</code> all you need? Is there ever a reason to fall back to its expanded form?</p>\n<p>The <code>[(ngModel)]</code> syntax can only <em>set</em> a data-bound property.\nIf you need to do something more or something different, you can write the expanded form.</p>\n<p>The following contrived example forces the input value to uppercase:</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"NgModel-4\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;input\n  [ngModel]=\"currentHero.name\"\n  (ngModelChange)=\"setUppercaseName($event)\">\n\n</code-example>\n<p>Here are all variations in action, including the uppercase version:</p>\n<figure>\n  <img src=\"generated/images/guide/template-syntax/ng-model-anim.gif\" alt=\"NgModel variations\" width=\"548\" height=\"208\">\n</figure>\n<p><a href=\"guide/template-syntax#top-of-page\">back to top</a></p>\n<hr>\n<a id=\"structural-directives\"></a>\n<h2 id=\"built-in-structural-directives\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#built-in-structural-directives\"><i class=\"material-icons\">link</i></a>Built-in <em>structural</em> directives</h2>\n<p>Structural directives are responsible for HTML layout.\nThey shape or reshape the DOM's <em>structure</em>, typically by adding, removing, and manipulating\nthe host elements to which they are attached.</p>\n<p>The deep details of structural directives are covered in the\n<a href=\"guide/structural-directives\"><em>Structural Directives</em></a> guide\nwhere you'll learn:</p>\n<ul>\n<li>why you\n<a href=\"guide/structural-directives#asterisk\" title=\"The * in *ngIf\"><em>prefix the directive name with an asterisk</em> (*)</a>.</li>\n<li>to use <a href=\"guide/structural-directives#ngcontainer\" title=\"<ng-container>\"><code>&#x3C;ng-container></code></a>\nto group elements when there is no suitable host element for the directive.</li>\n<li>how to write your own structural directive.</li>\n<li>that you can only apply <a href=\"guide/structural-directives#one-per-element\" title=\"one per host element\">one structural directive</a> to an element.</li>\n</ul>\n<p><em>This</em> section is an introduction to the common structural directives:</p>\n<ul>\n<li><a href=\"guide/template-syntax#ngIf\"><code><a href=\"api/common/NgIf\">NgIf</a></code></a> - conditionally add or remove an element from the DOM</li>\n<li><a href=\"guide/template-syntax#ngFor\"><code><a href=\"api/common/NgFor\">NgFor</a></code></a> - repeat a template for each item in a list</li>\n<li><a href=\"guide/template-syntax#ngSwitch\"><code><a href=\"api/common/NgSwitch\">NgSwitch</a></code></a> - a set of directives that switch among alternative views</li>\n</ul>\n<hr>\n<a id=\"ngIf\"></a>\n<h3 id=\"ngif\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#ngif\"><i class=\"material-icons\">link</i></a>NgIf</h3>\n<p>You can add or remove an element from the DOM by applying an <code><a href=\"api/common/NgIf\">NgIf</a></code> directive to\nthat element (called the <em>host element</em>).\nBind the directive to a condition expression like <code>isActive</code> in this example.</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"NgIf-1\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;hero-detail *ngIf=\"isActive\">&#x3C;/hero-detail>\n\n</code-example>\n<div class=\"alert is-critical\">\n<p>Don't forget the asterisk (<code>*</code>) in front of <code>ngIf</code>.</p>\n</div>\n<p>When the <code>isActive</code> expression returns a truthy value, <code><a href=\"api/common/NgIf\">NgIf</a></code> adds the <code>HeroDetailComponent</code> to the DOM.\nWhen the expression is falsy, <code><a href=\"api/common/NgIf\">NgIf</a></code> removes the <code>HeroDetailComponent</code>\nfrom the DOM, destroying that component and all of its sub-components.</p>\n<h4 id=\"showhide-is-not-the-same-thing\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#showhide-is-not-the-same-thing\"><i class=\"material-icons\">link</i></a>Show/hide is not the same thing</h4>\n<p>You can control the visibility of an element with a\n<a href=\"guide/template-syntax#class-binding\">class</a> or <a href=\"guide/template-syntax#style-binding\">style</a> binding:</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"NgIf-3\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;!-- isSpecial is true -->\n&#x3C;div [class.hidden]=\"!isSpecial\">Show with class&#x3C;/div>\n&#x3C;div [class.hidden]=\"isSpecial\">Hide with class&#x3C;/div>\n\n&#x3C;!-- HeroDetail is in the DOM but hidden -->\n&#x3C;hero-detail [class.hidden]=\"isSpecial\">&#x3C;/hero-detail>\n\n&#x3C;div [style.display]=\"isSpecial ? 'block' : 'none'\">Show with style&#x3C;/div>\n&#x3C;div [style.display]=\"isSpecial ? 'none'  : 'block'\">Hide with style&#x3C;/div>\n\n</code-example>\n<p>Hiding an element is quite different from removing an element with <code><a href=\"api/common/NgIf\">NgIf</a></code>.</p>\n<p>When you hide an element, that element and all of its descendents remain in the DOM.\nAll components for those elements stay in memory and\nAngular may continue to check for changes.\nYou could be holding onto considerable computing resources and degrading performance,\nfor something the user can't see.</p>\n<p>When <code><a href=\"api/common/NgIf\">NgIf</a></code> is <code>false</code>, Angular removes the element and its descendents from the DOM.\nIt destroys their components, potentially freeing up substantial resources,\nresulting in a more responsive user experience.</p>\n<p>The show/hide technique is fine for a few elements with few children.\nYou should be wary when hiding large component trees; <code><a href=\"api/common/NgIf\">NgIf</a></code> may be the safer choice.</p>\n<h4 id=\"guard-against-null\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#guard-against-null\"><i class=\"material-icons\">link</i></a>Guard against null</h4>\n<p>The <code>ngIf</code> directive is often used to guard against null.\nShow/hide is useless as a guard.\nAngular will throw an error if a nested expression tries to access a property of <code>null</code>.</p>\n<p>Here we see <code><a href=\"api/common/NgIf\">NgIf</a></code> guarding two <code>&#x3C;div></code>s.\nThe <code>currentHero</code> name will appear only when there is a <code>currentHero</code>.\nThe <code>nullHero</code> will never be displayed.</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"NgIf-2\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;div *ngIf=\"currentHero\">Hello, {{currentHero.name}}&#x3C;/div>\n&#x3C;div *ngIf=\"nullHero\">Hello, {{nullHero.name}}&#x3C;/div>\n\n</code-example>\n<div class=\"l-sub-section\">\n<p>See also the\n<a href=\"guide/template-syntax#safe-navigation-operator\" title=\"Safe naviation operator (?.)\"><em>safe navigation operator</em></a>\ndescribed below.</p>\n</div>\n<p><a href=\"guide/template-syntax#top-of-page\">back to top</a></p>\n<hr>\n<a id=\"ngFor\"></a>\n<h3 id=\"ngfor\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#ngfor\"><i class=\"material-icons\">link</i></a>NgFor</h3>\n<p><code><a href=\"api/common/NgFor\">NgFor</a></code> is a <em>repeater</em> directive — a way to present a list of items.\nYou define a block of HTML that defines how a single item should be displayed.\nYou tell Angular to use that block as a template for rendering each item in the list.</p>\n<p>Here is an example of <code><a href=\"api/common/NgFor\">NgFor</a></code> applied to a simple <code>&#x3C;div></code>:</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"NgFor-1\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;div *ngFor=\"let hero of heroes\">{{hero.name}}&#x3C;/div>\n\n</code-example>\n<p>You can also apply an <code><a href=\"api/common/NgFor\">NgFor</a></code> to a component element, as in this example:</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"NgFor-2\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;hero-detail *ngFor=\"let hero of heroes\" [hero]=\"hero\">&#x3C;/hero-detail>\n\n</code-example>\n<div class=\"alert is-critical\">\n<p>Don't forget the asterisk (<code>*</code>) in front of <code>ngFor</code>.</p>\n</div>\n<p>The text assigned to <code>*ngFor</code> is the instruction that guides the repeater process.</p>\n<a id=\"microsyntax\"></a>\n<h4 id=\"ngfor-microsyntax\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#ngfor-microsyntax\"><i class=\"material-icons\">link</i></a>*ngFor microsyntax</h4>\n<p>The string assigned to <code>*ngFor</code> is not a <a href=\"guide/template-syntax#template-expressions\">template expression</a>.\nIt's a <em>microsyntax</em> — a little language of its own that Angular interprets.\nThe string <code>\"let hero of heroes\"</code> means:</p>\n<blockquote>\n<p><em>Take each hero in the <code>heroes</code> array, store it in the local <code>hero</code> looping variable, and\nmake it available to the templated HTML for each iteration.</em></p>\n</blockquote>\n<p>Angular translates this instruction into a <code>&#x3C;ng-template></code> around the host element,\nthen uses this template repeatedly to create a new set of elements and bindings for each <code>hero</code>\nin the list.</p>\n<p>Learn about the <em>microsyntax</em> in the <a href=\"guide/structural-directives#microsyntax\"><em>Structural Directives</em></a> guide.</p>\n<a id=\"template-input-variable\"></a>\n<a id=\"template-input-variables\"></a>\n<h3 id=\"template-input-variables\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#template-input-variables\"><i class=\"material-icons\">link</i></a>Template input variables</h3>\n<p>The <code>let</code> keyword before <code>hero</code> creates a <em>template input variable</em> called <code>hero</code>.\nThe <code>ngFor</code> directive iterates over the <code>heroes</code> array returned by the parent component's <code>heroes</code> property\nand sets <code>hero</code> to the current item from the array during each iteration.</p>\n<p>You reference the <code>hero</code> input variable within the <code>ngFor</code> host element\n(and within its descendents) to access the hero's properties.\nHere it is referenced first in an interpolation\nand then passed in a binding to the <code>hero</code> property of the <code>&#x3C;hero-detail></code> component.</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"NgFor-1-2\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;div *ngFor=\"let hero of heroes\">{{hero.name}}&#x3C;/div>\n&#x3C;hero-detail *ngFor=\"let hero of heroes\" [hero]=\"hero\">&#x3C;/hero-detail>\n\n</code-example>\n<p>Learn more about <em>template input variables</em> in the\n<a href=\"guide/structural-directives#template-input-variable\"><em>Structural Directives</em></a> guide.</p>\n<h4 id=\"ngfor-with-index\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#ngfor-with-index\"><i class=\"material-icons\">link</i></a>*ngFor with <em>index</em></h4>\n<p>The <code>index</code> property of the <code><a href=\"api/common/NgFor\">NgFor</a></code> directive context  returns the zero-based index of the item in each iteration.\nYou can capture the <code>index</code> in a template input variable and use it in the template.</p>\n<p>The next example captures the <code>index</code> in a variable named <code>i</code> and displays it with the hero name like this.</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"NgFor-3\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;div *ngFor=\"let hero of heroes; let i=index\">{{i + 1}} - {{hero.name}}&#x3C;/div>\n\n</code-example>\n<div class=\"l-sub-section\">\n<p>Learn about the other <code><a href=\"api/common/NgFor\">NgFor</a></code> context values such as <code>last</code>, <code>even</code>,\nand <code>odd</code> in the <a href=\"api/common/NgFor\">NgFor API reference</a>.</p>\n</div>\n<a id=\"trackBy\"></a>\n<h4 id=\"ngfor-with-trackby\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#ngfor-with-trackby\"><i class=\"material-icons\">link</i></a>*ngFor with <em>trackBy</em></h4>\n<p>The <code><a href=\"api/common/NgFor\">NgFor</a></code> directive may perform poorly, especially with large lists.\nA small change to one item, an item removed, or an item added can trigger a cascade of DOM manipulations.</p>\n<p>For example, re-querying the server could reset the list with all new hero objects.</p>\n<p>Most, if not all, are previously displayed heroes.\n<em>You</em> know this because the <code>id</code> of each hero hasn't changed.\nBut Angular sees only a fresh list of new object references.\nIt has no choice but to tear down the old DOM elements and insert all new DOM elements.</p>\n<p>Angular can avoid this churn with <code>trackBy</code>.\nAdd a method to the component that returns the value <code><a href=\"api/common/NgFor\">NgFor</a></code> <em>should</em> track.\nIn this case, that value is the hero's <code>id</code>.</p>\n<code-example path=\"template-syntax/src/app/app.component.ts\" region=\"trackByHeroes\" title=\"src/app/app.component.ts\" linenums=\"false\">\ntrackByHeroes(index: number, hero: Hero): number { return hero.id; }\n\n</code-example>\n<p>In the microsyntax expression, set <code>trackBy</code> to this method.</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"trackBy\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;div *ngFor=\"let hero of heroes; trackBy: trackByHeroes\">\n  ({{hero.id}}) {{hero.name}}\n&#x3C;/div>\n\n</code-example>\n<p>Here is an illustration of the <em>trackBy</em> effect.\n\"Reset heroes\" creates new heroes with the same <code>hero.id</code>s.\n\"Change ids\" creates new heroes with new <code>hero.id</code>s.</p>\n<ul>\n<li>With no <code>trackBy</code>, both buttons trigger complete DOM element replacement.</li>\n<li>With <code>trackBy</code>, only changing the <code>id</code> triggers element replacement.</li>\n</ul>\n<figure>\n  <img src=\"generated/images/guide/template-syntax/ng-for-track-by-anim.gif\" alt=\"trackBy\" width=\"626\" height=\"578\">\n</figure>\n<p><a href=\"guide/template-syntax#top-of-page\">back to top</a></p>\n<hr>\n<a id=\"ngSwitch\"></a>\n<h3 id=\"the-ngswitch-directives\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#the-ngswitch-directives\"><i class=\"material-icons\">link</i></a>The <em>NgSwitch</em> directives</h3>\n<p><em>NgSwitch</em> is like the JavaScript <code>switch</code> statement.\nIt can display <em>one</em> element from among several possible elements, based on a <em>switch condition</em>.\nAngular puts only the <em>selected</em> element into the DOM.</p>\n<p><em>NgSwitch</em> is actually a set of three, cooperating directives:\n<code><a href=\"api/common/NgSwitch\">NgSwitch</a></code>, <code><a href=\"api/common/NgSwitchCase\">NgSwitchCase</a></code>, and <code><a href=\"api/common/NgSwitchDefault\">NgSwitchDefault</a></code> as seen in this example.</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"NgSwitch\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;div [ngSwitch]=\"currentHero.emotion\">\n  &#x3C;happy-hero    *ngSwitchCase=\"'happy'\"    [hero]=\"currentHero\">&#x3C;/happy-hero>\n  &#x3C;sad-hero      *ngSwitchCase=\"'sad'\"      [hero]=\"currentHero\">&#x3C;/sad-hero>\n  &#x3C;confused-hero *ngSwitchCase=\"'confused'\" [hero]=\"currentHero\">&#x3C;/confused-hero>\n  &#x3C;unknown-hero  *ngSwitchDefault           [hero]=\"currentHero\">&#x3C;/unknown-hero>\n&#x3C;/div>\n\n</code-example>\n<figure>\n  <img src=\"generated/images/guide/template-syntax/switch-anim.gif\" alt=\"trackBy\" width=\"444\" height=\"100\">\n</figure>\n<p><code><a href=\"api/common/NgSwitch\">NgSwitch</a></code> is the controller directive. Bind it to an expression that returns the <em>switch value</em>.\nThe <code>emotion</code> value in this example is a string, but the switch value can be of any type.</p>\n<p><strong>Bind to <code>[ngSwitch]</code></strong>. You'll get an error if you try to set <code>*ngSwitch</code> because\n<code><a href=\"api/common/NgSwitch\">NgSwitch</a></code> is an <em>attribute</em> directive, not a <em>structural</em> directive.\nIt changes the behavior of its companion directives.\nIt doesn't touch the DOM directly.</p>\n<p><strong>Bind to <code>*ngSwitchCase</code> and <code>*ngSwitchDefault</code></strong>.\nThe <code><a href=\"api/common/NgSwitchCase\">NgSwitchCase</a></code> and <code><a href=\"api/common/NgSwitchDefault\">NgSwitchDefault</a></code> directives are <em>structural</em> directives\nbecause they add or remove elements from the DOM.</p>\n<ul>\n<li><code><a href=\"api/common/NgSwitchCase\">NgSwitchCase</a></code> adds its element to the DOM when its bound value equals the switch value.</li>\n<li><code><a href=\"api/common/NgSwitchDefault\">NgSwitchDefault</a></code> adds its element to the DOM when there is no selected <code><a href=\"api/common/NgSwitchCase\">NgSwitchCase</a></code>.</li>\n</ul>\n<p>The switch directives are particularly useful for adding and removing <em>component elements</em>.\nThis example switches among four \"emotional hero\" components defined in the <code>hero-switch.components.ts</code> file.\nEach component has a <code>hero</code> <a href=\"guide/template-syntax#inputs-outputs\" title=\"Input property\">input property</a>\nwhich is bound to the <code>currentHero</code> of the parent component.</p>\n<p>Switch directives work as well with native elements and web components too.\nFor example, you could replace the <code>&#x3C;confused-hero></code> switch case with the following.</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"NgSwitch-div\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;div *ngSwitchCase=\"'confused'\">Are you as confused as {{currentHero.name}}?&#x3C;/div>\n\n</code-example>\n<p><a href=\"guide/template-syntax#top-of-page\">back to top</a></p>\n<hr>\n<a id=\"template-reference-variable\"></a>\n<a id=\"ref-vars\"></a>\n<a id=\"ref-var\"></a>\n<h2 id=\"template-reference-variables--var-\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#template-reference-variables--var-\"><i class=\"material-icons\">link</i></a>Template reference variables ( <span class=\"syntax\">#var</span> )</h2>\n<p>A <strong>template reference variable</strong> is often a reference to a DOM element within a template.\nIt can also be a reference to an Angular component or directive or a\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components\" title=\"MDN: Web Components\">web component</a>.</p>\n<p>Use the hash symbol (#) to declare a reference variable.\nThe <code>#phone</code> declares a <code>phone</code> variable on an <code>&#x3C;input></code> element.</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"ref-var\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;input #phone placeholder=\"phone number\">\n\n</code-example>\n<p>You can refer to a template reference variable <em>anywhere</em> in the template.\nThe <code>phone</code> variable declared on this <code>&#x3C;input></code> is\nconsumed in a <code>&#x3C;button></code> on the other side of the template</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"ref-phone\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;input #phone placeholder=\"phone number\">\n\n&#x3C;!-- lots of other elements -->\n\n&#x3C;!-- phone refers to the input element; pass its `value` to an event handler -->\n&#x3C;button (click)=\"callPhone(phone.value)\">Call&#x3C;/button>\n\n</code-example>\n<h3 class=\"no-toc\" id=\"how-a-reference-variable-gets-its-value\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#how-a-reference-variable-gets-its-value\"><i class=\"material-icons\">link</i></a>How a reference variable gets its value</h3>\n<p>In most cases, Angular sets the reference variable's value to the element on which it was declared.\nIn the previous example, <code>phone</code> refers to the <em>phone number</em> <code>&#x3C;input></code> box.\nThe phone button click handler passes the <em>input</em> value to the component's <code>callPhone</code> method.\nBut a directive can change that behavior and set the value to something else, such as itself.\nThe <code><a href=\"api/forms/NgForm\">NgForm</a></code> directive does that.</p>\n<p>The following is a <em>simplified</em> version of the form example in the <a href=\"guide/forms\">Forms</a> guide.</p>\n<code-example path=\"template-syntax/src/app/hero-form.component.html\" title=\"src/app/hero-form.component.html\" linenums=\"false\">\n&#x3C;form (ngSubmit)=\"onSubmit(heroForm)\" #heroForm=\"ngForm\">\n  &#x3C;div class=\"form-group\">\n    &#x3C;label for=\"name\">Name\n      &#x3C;input class=\"form-control\" name=\"name\" required [(ngModel)]=\"hero.name\">\n    &#x3C;/label>\n  &#x3C;/div>\n  &#x3C;button type=\"submit\" [disabled]=\"!heroForm.form.valid\">Submit&#x3C;/button>\n&#x3C;/form>\n&#x3C;div [hidden]=\"!heroForm.form.valid\">\n  {{submitMessage}}\n&#x3C;/div>\n\n</code-example>\n<p>A template reference variable, <code>heroForm</code>, appears three times in this example, separated\nby a large amount of HTML.\nWhat is the value of <code>heroForm</code>?</p>\n<p>If Angular hadn't taken it over when you imported the <code><a href=\"api/forms/FormsModule\">FormsModule</a></code>,\nit would be the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement\">HTMLFormElement</a>.\nThe <code>heroForm</code> is actually a reference to an Angular <a href=\"api/forms/NgForm\" title=\"API: NgForm\">NgForm</a>\ndirective with the ability to track the value and validity of every control in the form.</p>\n<p>The native <code>&#x3C;form></code> element doesn't have a <code>form</code> property.\nBut the <code><a href=\"api/forms/NgForm\">NgForm</a></code> directive does, which explains how you can disable the submit button\nif the <code>heroForm.form.valid</code> is invalid and pass the entire form control tree\nto the parent component's <code>onSubmit</code> method.</p>\n<h3 class=\"no-toc\" id=\"template-reference-variable-warning-notes\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#template-reference-variable-warning-notes\"><i class=\"material-icons\">link</i></a>Template reference variable warning notes</h3>\n<p>A template <em>reference</em> variable (<code>#phone</code>) is <em>not</em> the same as a template <em>input</em> variable (<code>let phone</code>)\nsuch as you might see in an <a href=\"guide/template-syntax#template-input-variable\"><code>*ngFor</code></a>.\nLearn the difference in the <a href=\"guide/structural-directives#template-input-variable\"><em>Structural Directives</em></a> guide.</p>\n<p>The scope of a reference variable is the <em>entire template</em>.\nDo not define the same variable name more than once in the same template.\nThe runtime value will be unpredictable.</p>\n<p>You can use the <code>ref-</code> prefix alternative to <code>#</code>.\nThis example declares the <code>fax</code> variable as <code>ref-fax</code> instead of <code>#fax</code>.</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"ref-fax\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;input ref-fax placeholder=\"fax number\">\n&#x3C;button (click)=\"callFax(fax.value)\">Fax&#x3C;/button>\n\n</code-example>\n<p><a href=\"guide/template-syntax#top-of-page\">back to top</a></p>\n<hr>\n<a id=\"inputs-outputs\"></a>\n<h2 id=\"input-and-output-properties--input-and-output-\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#input-and-output-properties--input-and-output-\"><i class=\"material-icons\">link</i></a>Input and output properties ( <span class=\"syntax\">@Input</span> and <span class=\"syntax\">@Output</span> )</h2>\n<p>So far, you've focused mainly on binding to component members within template expressions and statements\nthat appear on the <em>right side of the binding declaration</em>.\nA member in that position is a data binding <strong>source</strong>.</p>\n<p>This section concentrates on binding to <strong>targets</strong>, which are directive\nproperties on the <em>left side of the binding declaration</em>.\nThese directive properties must be declared as <strong>inputs</strong> or <strong>outputs</strong>.</p>\n<div class=\"alert is-important\">\n<p>Remember: All <strong>components</strong> are <strong>directives</strong>.</p>\n</div>\n<div class=\"l-sub-section\">\n<p>Note the important distinction between a data binding <strong>target</strong> and a data binding <strong>source</strong>.</p>\n<p>The <em>target</em> of a binding is to the <em>left</em> of the <code>=</code>.\nThe <em>source</em> is on the <em>right</em> of the <code>=</code>.</p>\n<p>The <em>target</em> of a binding is the property or event inside the binding punctuation: <code>[]</code>, <code>()</code> or <code>[()]</code>.\nThe <em>source</em> is either inside quotes (<code>\" \"</code>) or within an interpolation (<code>{{}}</code>).</p>\n<p>Every member of a <strong>source</strong> directive is automatically available for binding.\nYou don't have to do anything special to access a directive member in a template expression or statement.</p>\n<p>You have <em>limited</em> access to members of a <strong>target</strong> directive.\nYou can only bind to properties that are explicitly identified as <em>inputs</em> and <em>outputs</em>.</p>\n</div>\n<p>In the following snippet, <code>iconUrl</code> and <code>onSave</code> are data-bound members of the <code>AppComponent</code>\nand are referenced within quoted syntax to the <em>right</em> of the equals (<code>=</code>).</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"io-1\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;img [src]=\"iconUrl\"/>\n&#x3C;button (click)=\"onSave()\">Save&#x3C;/button>\n\n</code-example>\n<p>They are <em>neither inputs nor outputs</em> of the component. They are <strong>sources</strong> for their bindings.\nThe targets are the native <code>&#x3C;img></code> and <code>&#x3C;button></code> elements.</p>\n<p>Now look at a another snippet in which the <code>HeroDetailComponent</code>\nis the <strong>target</strong> of a binding on the <em>left</em> of the equals (<code>=</code>).</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"io-2\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;hero-detail [hero]=\"currentHero\" (deleteRequest)=\"deleteHero($event)\">\n&#x3C;/hero-detail>\n\n</code-example>\n<p>Both <code>HeroDetailComponent.hero</code> and <code>HeroDetailComponent.deleteRequest</code> are on the <strong>left side</strong> of binding declarations.\n<code>HeroDetailComponent.hero</code> is inside brackets; it is the target of a property binding.\n<code>HeroDetailComponent.deleteRequest</code> is inside parentheses; it is the target of an event binding.</p>\n<h3 id=\"declaring-input-and-output-properties\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#declaring-input-and-output-properties\"><i class=\"material-icons\">link</i></a>Declaring input and output properties</h3>\n<p>Target properties must be explicitly marked as inputs or outputs.</p>\n<p>In the <code>HeroDetailComponent</code>, such properties are marked as input or output properties using decorators.</p>\n<code-example path=\"template-syntax/src/app/hero-detail.component.ts\" region=\"input-output-1\" title=\"src/app/hero-detail.component.ts\" linenums=\"false\">\n@Input()  hero: Hero;\n@Output() deleteRequest = new EventEmitter&#x3C;Hero>();\n\n</code-example>\n<div class=\"l-sub-section\">\n<p>Alternatively, you can identify members in the <code>inputs</code> and <code>outputs</code> arrays\nof the directive metadata, as in this example:</p>\n<code-example path=\"template-syntax/src/app/hero-detail.component.ts\" region=\"input-output-2\" title=\"src/app/hero-detail.component.ts\" linenums=\"false\">\n@Component({\n  inputs: ['hero'],\n  outputs: ['deleteRequest'],\n})\n\n</code-example>\n<p>You can specify an input/output property either with a decorator or in a metadata array.\nDon't do both!</p>\n</div>\n<h3 id=\"input-or-output\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#input-or-output\"><i class=\"material-icons\">link</i></a>Input or output?</h3>\n<p><em>Input</em> properties usually receive data values.\n<em>Output</em> properties expose event producers, such as <code><a href=\"api/core/EventEmitter\">EventEmitter</a></code> objects.</p>\n<p>The terms <em>input</em> and <em>output</em> reflect the perspective of the target directive.</p>\n<figure>\n  <img src=\"generated/images/guide/template-syntax/input-output.png\" alt=\"Inputs and outputs\" width=\"546\" height=\"50\">\n</figure>\n<p><code>HeroDetailComponent.hero</code> is an <strong>input</strong> property from the perspective of <code>HeroDetailComponent</code>\nbecause data flows <em>into</em> that property from a template binding expression.</p>\n<p><code>HeroDetailComponent.deleteRequest</code> is an <strong>output</strong> property from the perspective of <code>HeroDetailComponent</code>\nbecause events stream <em>out</em> of that property and toward the handler in a template binding statement.</p>\n<h3 id=\"aliasing-io\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#aliasing-io\"><i class=\"material-icons\">link</i></a>\n  Aliasing input/output properties\n</h3>\n<p>Sometimes the public name of an input/output property should be different from the internal name.</p>\n<p>This is frequently the case with <a href=\"guide/attribute-directives\">attribute directives</a>.\nDirective consumers expect to bind to the name of the directive.\nFor example, when you apply a directive with a <code>myClick</code> selector to a <code>&#x3C;div></code> tag,\nyou expect to bind to an event property that is also called <code>myClick</code>.</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"myClick\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;div (myClick)=\"clickMessage=$event\" clickable>click with myClick&#x3C;/div>\n\n</code-example>\n<p>However, the directive name is often a poor choice for the name of a property within the directive class.\nThe directive name rarely describes what the property does.\nThe <code>myClick</code> directive name is not a good name for a property that emits click messages.</p>\n<p>Fortunately, you can have a public name for the property that meets conventional expectations,\nwhile using a different name internally.\nIn the example immediately above, you are actually binding <em>through the</em> <code>myClick</code> <em>alias</em> to\nthe directive's own <code>clicks</code> property.</p>\n<p>You can specify the alias for the property name by passing it into the input/output decorator like this:</p>\n<code-example path=\"template-syntax/src/app/click.directive.ts\" region=\"output-myClick\" title=\"src/app/click.directive.ts\" linenums=\"false\">\n@Output('myClick') clicks = new EventEmitter&#x3C;string>(); //  @Output(alias) propertyName = ...\n\n</code-example>\n<div class=\"l-sub-section\">\n<p>You can also alias property names in the <code>inputs</code> and <code>outputs</code> arrays.\nYou write a colon-delimited (<code>:</code>) string with\nthe directive property name on the <em>left</em> and the public alias on the <em>right</em>:</p>\n<code-example path=\"template-syntax/src/app/click.directive.ts\" region=\"output-myClick2\" title=\"src/app/click.directive.ts\" linenums=\"false\">\n@Directive({\n  outputs: ['clicks:myClick']  // propertyName:alias\n})\n\n</code-example>\n</div>\n<p><a href=\"guide/template-syntax#top-of-page\">back to top</a></p>\n<hr>\n<a id=\"expression-operators\"></a>\n<h2 id=\"template-expression-operators\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#template-expression-operators\"><i class=\"material-icons\">link</i></a>Template expression operators</h2>\n<p>The template expression language employs a subset of JavaScript syntax supplemented with a few special operators\nfor specific scenarios. The next sections cover two of these operators: <em>pipe</em> and <em>safe navigation operator</em>.</p>\n<a id=\"pipe\"></a>\n<h3 id=\"the-pipe-operator---\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#the-pipe-operator---\"><i class=\"material-icons\">link</i></a>The pipe operator ( <span class=\"syntax\">|</span> )</h3>\n<p>The result of an expression might require some transformation before you're ready to use it in a binding.\nFor example, you might display a number as a currency, force text to uppercase, or filter a list and sort it.</p>\n<p>Angular <a href=\"guide/pipes\">pipes</a> are a good choice for small transformations such as these.\nPipes are simple functions that accept an input value and return a transformed value.\nThey're easy to apply within template expressions, using the <strong>pipe operator (<code>|</code>)</strong>:</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"pipes-1\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;div>Title through uppercase pipe: {{title | uppercase}}&#x3C;/div>\n\n</code-example>\n<p>The pipe operator passes the result of an expression on the left to a pipe function on the right.</p>\n<p>You can chain expressions through multiple pipes:</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"pipes-2\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;!-- Pipe chaining: convert title to uppercase, then to lowercase -->\n&#x3C;div>\n  Title through a pipe chain:\n  {{title | uppercase | lowercase}}\n&#x3C;/div>\n\n</code-example>\n<p>And you can also <a href=\"guide/pipes#parameterizing-a-pipe\">apply parameters</a> to a pipe:</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"pipes-3\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;!-- pipe with configuration argument => \"February 25, 1970\" -->\n&#x3C;div>Birthdate: {{currentHero?.birthdate | date:'longDate'}}&#x3C;/div>\n\n</code-example>\n<p>The <code>json</code> pipe is particularly helpful for debugging bindings:</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" linenums=\"false\" title=\"src/app/app.component.html (pipes-json)\" region=\"pipes-json\">\n&#x3C;div>{{currentHero | json}}&#x3C;/div>\n\n</code-example>\n<p>The generated output would look something like this</p>\n<code-example language=\"json\">\n  { \"id\": 0, \"name\": \"Hercules\", \"emotion\": \"happy\",\n    \"birthdate\": \"1970-02-25T08:00:00.000Z\",\n    \"url\": \"http://www.imdb.com/title/tt0065832/\",\n    \"rate\": 325 }\n</code-example>\n<p><a href=\"guide/template-syntax#top-of-page\">back to top</a></p>\n<hr>\n<a id=\"safe-navigation-operator\"></a>\n<h3 id=\"the-safe-navigation-operator----and-null-property-paths\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#the-safe-navigation-operator----and-null-property-paths\"><i class=\"material-icons\">link</i></a>The safe navigation operator ( <span class=\"syntax\">?.</span> ) and null property paths</h3>\n<p>The Angular <strong>safe navigation operator (<code>?.</code>)</strong> is a fluent and convenient way to\nguard against null and undefined values in property paths.\nHere it is, protecting against a view render failure if the <code>currentHero</code> is null.</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"safe-2\" title=\"src/app/app.component.html\" linenums=\"false\">\nThe current hero's name is {{currentHero?.name}}\n\n</code-example>\n<p>What happens when the following data bound <code>title</code> property is null?</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"safe-1\" title=\"src/app/app.component.html\" linenums=\"false\">\nThe title is {{title}}\n\n</code-example>\n<p>The view still renders but the displayed value is blank; you see only \"The title is\" with nothing after it.\nThat is reasonable behavior. At least the app doesn't crash.</p>\n<p>Suppose the template expression involves a property path, as in this next example\nthat displays the <code>name</code> of a null hero.</p>\n<code-example language=\"html\">\n  The null hero's name is {{nullHero.name}}\n</code-example>\n<p>JavaScript throws a null reference error, and so does Angular:</p>\n<code-example format=\"nocode\">\n  TypeError: Cannot read property 'name' of null in [null].\n</code-example>\n<p>Worse, the <em>entire view disappears</em>.</p>\n<p>This would be reasonable behavior if the <code>hero</code> property could never be null.\nIf it must never be null and yet it is null,\nthat's a programming error that should be caught and fixed.\nThrowing an exception is the right thing to do.</p>\n<p>On the other hand, null values in the property path may be OK from time to time,\nespecially when the data are null now and will arrive eventually.</p>\n<p>While waiting for data, the view should render without complaint, and\nthe null property path should display as blank just as the <code>title</code> property does.</p>\n<p>Unfortunately, the app crashes when the <code>currentHero</code> is null.</p>\n<p>You could code around that problem with <a href=\"guide/template-syntax#ngIf\">*ngIf</a>.</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"safe-4\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;!--No hero, div not displayed, no error -->\n&#x3C;div *ngIf=\"nullHero\">The null hero's name is {{nullHero.name}}&#x3C;/div>\n\n</code-example>\n<p>You could try to chain parts of the property path with <code>&#x26;&#x26;</code>, knowing that the expression bails out\nwhen it encounters the first null.</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"safe-5\" title=\"src/app/app.component.html\" linenums=\"false\">\nThe null hero's name is {{nullHero &#x26;&#x26; nullHero.name}}\n\n</code-example>\n<p>These approaches have merit but can be cumbersome, especially if the property path is long.\nImagine guarding against a null somewhere in a long property path such as <code>a.b.c.d</code>.</p>\n<p>The Angular safe navigation operator (<code>?.</code>) is a more fluent and convenient way to guard against nulls in property paths.\nThe expression bails out when it hits the first null value.\nThe display is blank, but the app keeps rolling without errors.</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"safe-6\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;!-- No hero, no problem! -->\nThe null hero's name is {{nullHero?.name}}\n\n</code-example>\n<p>It works perfectly with long property paths such as <code>a?.b?.c?.d</code>.</p>\n<p><a href=\"guide/template-syntax#top-of-page\">back to top</a></p>\n<hr>\n<a id=\"non-null-assertion-operator\"></a>\n<h3 id=\"the-non-null-assertion-operator---\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#the-non-null-assertion-operator---\"><i class=\"material-icons\">link</i></a>The non-null assertion operator ( <span class=\"syntax\">!</span> )</h3>\n<p>As of Typescript 2.0, you can enforce <a href=\"http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html\" title=\"Strict null checking in TypeScript\">strict null checking</a> with the <code>--strictNullChecks</code> flag. TypeScript then ensures that no variable is <em>unintentionally</em> null or undefined.</p>\n<p>In this mode, typed variables disallow null and undefined by default. The type checker throws an error if you leave a variable unassigned or try to assign null or undefined to a variable whose type disallows null and undefined.</p>\n<p>The type checker also throws an error if it can't determine whether a variable will be null or undefined at runtime.\nYou may know that can't happen but the type checker doesn't know.\nYou tell the type checker that it can't happen by applying the post-fix\n<a href=\"http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#non-null-assertion-operator\" title=\"Non-null assertion operator\"><em>non-null assertion operator (!)</em></a>.</p>\n<p>The <em>Angular</em> <strong>non-null assertion operator (<code>!</code>)</strong> serves the same purpose in an Angular template.</p>\n<p>For example, after you use <a href=\"guide/template-syntax#ngIf\">*ngIf</a> to check that <code>hero</code> is defined, you can assert that\n<code>hero</code> properties are also defined.</p>\n<code-example path=\"template-syntax/src/app/app.component.html\" region=\"non-null-assertion-1\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;!--No hero, no text -->\n&#x3C;div *ngIf=\"hero\">\n  The hero's name is {{hero!.name}}\n&#x3C;/div>\n\n</code-example>\n<p>When the Angular compiler turns your template into TypeScript code,\nit prevents TypeScript from reporting that <code>hero.name</code> might be null or undefined.</p>\n<p>Unlike the <a href=\"guide/template-syntax#safe-navigation-operator\" title=\"Safe naviation operator (?.)\"><em>safe navigation operator</em></a>,\nthe <strong>non-null assertion operator</strong> does not guard against null or undefined.\nRather it tells the TypeScript type checker to suspend strict null checks for a specific property expression.</p>\n<p>You'll need this template operator when you turn on strict null checks. It's optional otherwise.</p>\n<p><a href=\"guide/template-syntax#top-of-page\">back to top</a></p>\n<hr>\n<h2 id=\"summary\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/template-syntax#summary\"><i class=\"material-icons\">link</i></a>Summary</h2>\n<p>You've completed this survey of template syntax.\nNow it's time to put that knowledge to work on your own components and directives.</p>\n\n</div>"
}