{
  "id": "guide/dependency-injection-in-action",
  "title": "Dependency Injection",
  "contents": "\n<div class=\"content\">\n<h1 id=\"dependency-injection\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection-in-action#dependency-injection\"><i class=\"material-icons\">link</i></a>Dependency Injection</h1>\n<p>Dependency Injection is a powerful pattern for managing code dependencies.\nThis cookbook explores many of the features of Dependency Injection (DI) in Angular.\n<a id=\"toc\"></a></p>\n<!--\n\n# Contents\n\n* [Application-wide dependencies](guide/dependency-injection-in-action#app-wide-dependencies)\n* [External module configuration](guide/dependency-injection-in-action#external-module-configuration)\n* [`@Injectable()` and nested service dependencies](guide/dependency-injection-in-action#nested-dependencies)\n\n  * [`@Injectable()`](guide/dependency-injection-in-action#injectable-1)\n\n* [Limit service scope to a component subtree](guide/dependency-injection-in-action#service-scope)\n* [Multiple service instances (sandboxing)](guide/dependency-injection-in-action#multiple-service-instances)\n* [Qualify dependency lookup with `@Optional()` and `@Host()`](guide/dependency-injection-in-action#qualify-dependency-lookup)\n\n  * [Demonstration](guide/dependency-injection-in-action#demonstration)\n\n* [Inject the component's DOM element](guide/dependency-injection-in-action#component-element)\n* [Define dependencies with providers](guide/dependency-injection-in-action#providers)\n\n  * [Defining providers](guide/dependency-injection-in-action#defining-providers)\n  * [The *provide* object literal](guide/dependency-injection-in-action#provide)\n  * [`useValue`&mdash;the *value provider*](guide/dependency-injection-in-action#usevalue)\n  * [`useClass`&mdash;the *class provider*](guide/dependency-injection-in-action#useclass)\n  * [`useExisting`&mdash;the *alias provider*](guide/dependency-injection-in-action#useexisting)\n  * [`useFactory`&mdash;the *factory provider*](guide/dependency-injection-in-action#usefactory)\n\n* [Provider token alternatives: the class-interface and `InjectionToken`](guide/dependency-injection-in-action#tokens)\n\n  * [class-interface](guide/dependency-injection-in-action#class-interface)\n  * [`InjectionToken`](guide/dependency-injection-in-action#injection-token)\n\n* [Inject into a derived class](guide/dependency-injection-in-action#di-inheritance)\n* [Find a parent component by injection](guide/dependency-injection-in-action#find-parent)\n\n  * [Find parent with a known component type](guide/dependency-injection-in-action#known-parent)\n  * [Cannot find a parent by its base class](guide/dependency-injection-in-action#base-parent)\n  * [Find a parent by its class-interface](guide/dependency-injection-in-action#class-interface-parent)\n  * [Find a parent in a tree of parents with `@SkipSelf()`](guide/dependency-injection-in-action#parent-tree)\n  * [The `Parent` class-interface](guide/dependency-injection-in-action#parent-token)\n  * [A `provideParent()` helper function](guide/dependency-injection-in-action#provideparent)\n\n* [Break circularities with a forward class reference (*forwardRef*)](guide/dependency-injection-in-action#forwardref)\n\n-->\n<p>See the <live-example name=\"dependency-injection-in-action\"></live-example>\nof the code in this cookbook.</p>\n<a id=\"app-wide-dependencies\"></a>\n<h2 id=\"application-wide-dependencies\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection-in-action#application-wide-dependencies\"><i class=\"material-icons\">link</i></a>Application-wide dependencies</h2>\n<p>Register providers for dependencies used throughout the application in the root application component, <code>AppComponent</code>.</p>\n<p>The following example shows importing and registering\nthe <code>LoggerService</code>, <code>UserContext</code>, and the <code>UserService</code>\nin the <code>@Component</code> metadata <code>providers</code> array.</p>\n<code-example path=\"dependency-injection-in-action/src/app/app.component.ts\" region=\"import-services\" title=\"src/app/app.component.ts (excerpt)\" linenums=\"false\">\nimport { LoggerService }      from './logger.service';\nimport { UserContextService } from './user-context.service';\nimport { UserService }        from './user.service';\n\n@Component({\n  selector: 'my-app',\n  templateUrl: './app.component.html',\n  providers: [ LoggerService, UserContextService, UserService ]\n})\nexport class AppComponent {\n/* . . . */\n}\n\n</code-example>\n<p>All of these services are implemented as classes.\nService classes can act as their own providers which is why listing them in the <code>providers</code> array\nis all the registration you need.</p>\n<div class=\"l-sub-section\">\n<p>A <em>provider</em> is something that can create or deliver a service.\nAngular creates a service instance from a class provider by using <code>new</code>.\nRead more about providers in the <a href=\"guide/dependency-injection#injector-providers\">Dependency Injection</a>\nguide.</p>\n</div>\n<p>Now that you've registered these services,\nAngular can inject them into the constructor of <em>any</em> component or service, <em>anywhere</em> in the application.</p>\n<code-example path=\"dependency-injection-in-action/src/app/hero-bios.component.ts\" region=\"ctor\" title=\"src/app/hero-bios.component.ts (component constructor injection)\" linenums=\"false\">\nconstructor(logger: LoggerService) {\n  logger.logInfo('Creating HeroBiosComponent');\n}\n\n</code-example>\n<code-example path=\"dependency-injection-in-action/src/app/user-context.service.ts\" region=\"ctor\" title=\"src/app/user-context.service.ts (service constructor injection)\" linenums=\"false\">\nconstructor(private userService: UserService, private loggerService: LoggerService) {\n}\n\n</code-example>\n<a id=\"external-module-configuration\"></a>\n<h2 id=\"external-module-configuration\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection-in-action#external-module-configuration\"><i class=\"material-icons\">link</i></a>External module configuration</h2>\n<p>Generally, register providers in the <code><a href=\"api/core/NgModule\">NgModule</a></code> rather than in the root application component.</p>\n<p>Do this when you expect the service to be injectable everywhere,\nor you are configuring another application global service <em>before the application starts</em>.</p>\n<p>Here is an example of the second case, where the component router configuration includes a non-default\n<a href=\"guide/router#location-strategy\">location strategy</a> by listing its provider\nin the <code>providers</code> list of the <code>AppModule</code>.</p>\n<code-example path=\"dependency-injection-in-action/src/app/app.module.ts\" region=\"providers\" title=\"src/app/app.module.ts (providers)\" linenums=\"false\">\nproviders: [\n  { provide: LocationStrategy, useClass: HashLocationStrategy }\n]\n\n</code-example>\n<a id=\"injectable\"></a>\n<a id=\"nested-dependencies\"></a>\n<h2 id=\"injectable-and-nested-service-dependencies\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection-in-action#injectable-and-nested-service-dependencies\"><i class=\"material-icons\">link</i></a><em>@Injectable()</em> and nested service dependencies</h2>\n<p>The consumer of an injected service does not know how to create that service.\nIt shouldn't care.\nIt's the dependency injection's job to create and cache that service.</p>\n<p>Sometimes a service depends on other services, which may depend on yet other services.\nResolving these nested dependencies in the correct order is also the framework's job.\nAt each step, the consumer of dependencies simply declares what it requires in its\nconstructor and the framework takes over.</p>\n<p>The following example shows injecting both the <code>LoggerService</code> and the <code>UserContext</code> in the <code>AppComponent</code>.</p>\n<code-example path=\"dependency-injection-in-action/src/app/app.component.ts\" region=\"ctor\" title=\"src/app/app.component.ts\" linenums=\"false\">\nconstructor(logger: LoggerService, public userContext: UserContextService) {\n  userContext.loadUser(this.userId);\n  logger.logInfo('AppComponent initialized');\n}\n\n</code-example>\n<p>The <code>UserContext</code> in turn has its own dependencies on both the <code>LoggerService</code> and\na <code>UserService</code> that gathers information about a particular user.</p>\n<code-example path=\"dependency-injection-in-action/src/app/user-context.service.ts\" region=\"injectables\" title=\"user-context.service.ts (injection)\" linenums=\"false\">\n@Injectable()\nexport class UserContextService {\n  constructor(private userService: UserService, private loggerService: LoggerService) {\n  }\n}\n\n</code-example>\n<p>When Angular creates the <code>AppComponent</code>, the dependency injection framework creates an instance of the <code>LoggerService</code> and\nstarts to create the <code>UserContextService</code>.\nThe <code>UserContextService</code> needs the <code>LoggerService</code>, which the framework already has, and the <code>UserService</code>, which it has yet to create.\nThe <code>UserService</code> has no dependencies so the dependency injection framework can just\nuse <code>new</code> to instantiate one.</p>\n<p>The beauty of dependency injection is that <code>AppComponent</code> doesn't care about any of this.\nYou simply declare what is needed in the constructor (<code>LoggerService</code> and <code>UserContextService</code>)\nand the framework does the rest.</p>\n<p>Once all the dependencies are in place, the <code>AppComponent</code> displays the user information:</p>\n<figure>\n  <img src=\"generated/images/guide/dependency-injection-in-action/logged-in-user.png\" alt=\"Logged In User\" width=\"145\" height=\"99\">\n</figure>\n<a id=\"injectable-1\"></a>\n<h3 id=\"injectable\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection-in-action#injectable\"><i class=\"material-icons\">link</i></a><em>@Injectable()</em></h3>\n<p>Notice the <code>@Injectable()</code>decorator on the <code>UserContextService</code> class.</p>\n<code-example path=\"dependency-injection-in-action/src/app/user-context.service.ts\" region=\"injectable\" title=\"user-context.service.ts (@Injectable)\" linenums=\"false\">\n@Injectable()\nexport class UserContextService {\n}\n\n</code-example>\n<p>That decorator makes it possible for Angular to identify the types of its two dependencies, <code>LoggerService</code> and <code>UserService</code>.</p>\n<p>Technically, the <code>@Injectable()</code>decorator is only required for a service class that has <em>its own dependencies</em>.\nThe <code>LoggerService</code> doesn't depend on anything. The logger would work if you omitted <code>@Injectable()</code>\nand the generated code would be slightly smaller.</p>\n<p>But the service would break the moment you gave it a dependency and you'd have to go back\nand add <code>@Injectable()</code> to fix it. Add <code>@Injectable()</code> from the start for the sake\nof consistency and to avoid future pain.</p>\n<div class=\"alert is-helpful\">\n<p>Although this site recommends applying <code>@Injectable()</code> to all service classes, don't feel bound by it.\nSome developers prefer to add it only where needed and that's a reasonable policy too.</p>\n</div>\n<div class=\"l-sub-section\">\n<p>The <code>AppComponent</code> class had two dependencies as well but no <code>@Injectable()</code>.\nIt didn't need <code>@Injectable()</code> because that component class has the <code>@Component</code> decorator.\nIn Angular with TypeScript, a <em>single</em> decorator—<em>any</em> decorator—is sufficient to identify dependency types.</p>\n</div>\n<a id=\"service-scope\"></a>\n<h2 id=\"limit-service-scope-to-a-component-subtree\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection-in-action#limit-service-scope-to-a-component-subtree\"><i class=\"material-icons\">link</i></a>Limit service scope to a component subtree</h2>\n<p>All injected service dependencies are singletons meaning that,\nfor a given dependency injector, there is only one instance of service.</p>\n<p>But an Angular application has multiple dependency injectors, arranged in a tree hierarchy that parallels the component tree.\nSo a particular service can be <em>provided</em> and created at any component level and multiple times\nif provided in multiple components.</p>\n<p>By default, a service dependency provided in one component is visible to all of its child components and\nAngular injects the same service instance into all child components that ask for that service.</p>\n<p>Accordingly, dependencies provided in the root <code>AppComponent</code> can be injected into <em>any</em> component <em>anywhere</em> in the application.</p>\n<p>That isn't always desirable.\nSometimes you want to restrict service availability to a particular region of the application.</p>\n<p>You can limit the scope of an injected service to a <em>branch</em> of the application hierarchy\nby providing that service <em>at the sub-root component for that branch</em>.\nThis example shows how similar providing a service to a sub-root component is\nto providing a service in the root <code>AppComponent</code>. The syntax is the same.\nHere, the <code>HeroService</code> is available to the <code>HeroesBaseComponent</code> because it is in the <code>providers</code> array:</p>\n<code-example path=\"dependency-injection-in-action/src/app/sorted-heroes.component.ts\" region=\"injection\" title=\"src/app/sorted-heroes.component.ts (HeroesBaseComponent excerpt)\">\n@Component({\n  selector: 'unsorted-heroes',\n  template: `&#x3C;div *ngFor=\"let hero of heroes\">{{hero.name}}&#x3C;/div>`,\n  providers: [HeroService]\n})\nexport class HeroesBaseComponent implements OnInit {\n  constructor(private heroService: HeroService) { }\n}\n\n</code-example>\n<p>When Angular creates the <code>HeroesBaseComponent</code>, it also creates a new instance of <code>HeroService</code>\nthat is visible only to the component and its children, if any.</p>\n<p>You could also provide the <code>HeroService</code> to a <em>different</em> component elsewhere in the application.\nThat would result in a <em>different</em> instance of the service, living in a <em>different</em> injector.</p>\n<div class=\"l-sub-section\">\n<p>Examples of such scoped <code>HeroService</code> singletons appear throughout the accompanying sample code,\nincluding the <code>HeroBiosComponent</code>, <code>HeroOfTheMonthComponent</code>, and <code>HeroesBaseComponent</code>.\nEach of these components has its own <code>HeroService</code> instance managing its own independent collection of heroes.</p>\n</div>\n<div class=\"alert is-helpful\">\n<h3 id=\"take-a-break\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection-in-action#take-a-break\"><i class=\"material-icons\">link</i></a>Take a break!</h3>\n<p>This much Dependency Injection knowledge may be all that many Angular developers\never need to build their applications. It doesn't always have to be more complicated.</p>\n</div>\n<a id=\"multiple-service-instances\"></a>\n<h2 id=\"multiple-service-instances-sandboxing\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection-in-action#multiple-service-instances-sandboxing\"><i class=\"material-icons\">link</i></a>Multiple service instances (sandboxing)</h2>\n<p>Sometimes you want multiple instances of a service at <em>the same level of the component hierarchy</em>.</p>\n<p>A good example is a service that holds state for its companion component instance.\nYou need a separate instance of the service for each component.\nEach service has its own work-state, isolated from the service-and-state of a different component.\nThis is called <em>sandboxing</em> because each service and component instance has its own sandbox to play in.</p>\n<a id=\"hero-bios-component\"></a>\n<p>Imagine a <code>HeroBiosComponent</code> that presents three instances of the <code>HeroBioComponent</code>.</p>\n<code-example path=\"dependency-injection-in-action/src/app/hero-bios.component.ts\" region=\"simple\" title=\"ap/hero-bios.component.ts\">\n@Component({\n  selector: 'hero-bios',\n  template: `\n    &#x3C;hero-bio [heroId]=\"1\">&#x3C;/hero-bio>\n    &#x3C;hero-bio [heroId]=\"2\">&#x3C;/hero-bio>\n    &#x3C;hero-bio [heroId]=\"3\">&#x3C;/hero-bio>`,\n  providers: [HeroService]\n})\nexport class HeroBiosComponent {\n}\n\n</code-example>\n<p>Each <code>HeroBioComponent</code> can edit a single hero's biography.\nA <code>HeroBioComponent</code> relies on a <code>HeroCacheService</code> to fetch, cache, and perform other persistence operations on that hero.</p>\n<code-example path=\"dependency-injection-in-action/src/app/hero-cache.service.ts\" region=\"service\" title=\"src/app/hero-cache.service.ts\">\n@Injectable()\nexport class HeroCacheService {\n  hero: Hero;\n  constructor(private heroService: HeroService) {}\n\n  fetchCachedHero(id: number) {\n    if (!this.hero) {\n      this.hero = this.heroService.getHeroById(id);\n    }\n    return this.hero;\n  }\n}\n\n</code-example>\n<p>Clearly the three instances of the <code>HeroBioComponent</code> can't share the same <code>HeroCacheService</code>.\nThey'd be competing with each other to determine which hero to cache.</p>\n<p>Each <code>HeroBioComponent</code> gets its <em>own</em> <code>HeroCacheService</code> instance\nby listing the <code>HeroCacheService</code> in its metadata <code>providers</code> array.</p>\n<code-example path=\"dependency-injection-in-action/src/app/hero-bio.component.ts\" region=\"component\" title=\"src/app/hero-bio.component.ts\">\n@Component({\n  selector: 'hero-bio',\n  template: `\n    &#x3C;h4>{{hero.name}}&#x3C;/h4>\n    &#x3C;ng-content>&#x3C;/ng-content>\n    &#x3C;textarea cols=\"25\" [(ngModel)]=\"hero.description\">&#x3C;/textarea>`,\n  providers: [HeroCacheService]\n})\n\nexport class HeroBioComponent implements OnInit  {\n  @Input() heroId: number;\n\n  constructor(private heroCache: HeroCacheService) { }\n\n  ngOnInit() { this.heroCache.fetchCachedHero(this.heroId); }\n\n  get hero() { return this.heroCache.hero; }\n}\n\n</code-example>\n<p>The parent <code>HeroBiosComponent</code> binds a value to the <code>heroId</code>.\nThe <code>ngOnInit</code> passes that <code>id</code> to the service, which fetches and caches the hero.\nThe getter for the <code>hero</code> property pulls the cached hero from the service.\nAnd the template displays this data-bound property.</p>\n<p>Find this example in <live-example name=\"dependency-injection-in-action\">live code</live-example>\nand confirm that the three <code>HeroBioComponent</code> instances have their own cached hero data.</p>\n<figure>\n  <img src=\"generated/images/guide/dependency-injection-in-action/hero-bios.png\" alt=\"Bios\" width=\"199\" height=\"317\">\n</figure>\n<a id=\"optional\"></a>\n<a id=\"qualify-dependency-lookup\"></a>\n<h2 id=\"qualify-dependency-lookup-with-optional-and-host\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection-in-action#qualify-dependency-lookup-with-optional-and-host\"><i class=\"material-icons\">link</i></a>Qualify dependency lookup with <em>@Optional()</em> and <code>@Host()</code></h2>\n<p>As you now know, dependencies can be registered at any level in the component hierarchy.</p>\n<p>When a component requests a dependency, Angular starts with that component's injector and walks up the injector tree\nuntil it finds the first suitable provider.  Angular throws an error if it can't find the dependency during that walk.</p>\n<p>You <em>want</em> this behavior most of the time.\nBut sometimes you need to limit the search and/or accommodate a missing dependency.\nYou can modify Angular's search behavior with the <code>@Host</code> and <code>@Optional</code> qualifying decorators,\nused individually or together.</p>\n<p>The <code>@Optional</code> decorator tells Angular to continue when it can't find the dependency.\nAngular sets the injection parameter to <code>null</code> instead.</p>\n<p>The <code>@Host</code> decorator stops the upward search at the <em>host component</em>.</p>\n<p>The host component is typically the component requesting the dependency.\nBut when this component is projected into a <em>parent</em> component, that parent component becomes the host.\nThe next example covers this second case.</p>\n<a id=\"demonstration\"></a>\n<h3 id=\"demonstration\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection-in-action#demonstration\"><i class=\"material-icons\">link</i></a>Demonstration</h3>\n<p>The <code>HeroBiosAndContactsComponent</code> is a revision of the <code>HeroBiosComponent</code> that you looked at <a href=\"guide/dependency-injection-in-action#hero-bios-component\">above</a>.</p>\n<code-example path=\"dependency-injection-in-action/src/app/hero-bios.component.ts\" region=\"hero-bios-and-contacts\" title=\"src/app/hero-bios.component.ts (HeroBiosAndContactsComponent)\">\n@Component({\n  selector: 'hero-bios-and-contacts',\n  template: `\n    &#x3C;hero-bio [heroId]=\"1\"> &#x3C;hero-contact>&#x3C;/hero-contact> &#x3C;/hero-bio>\n    &#x3C;hero-bio [heroId]=\"2\"> &#x3C;hero-contact>&#x3C;/hero-contact> &#x3C;/hero-bio>\n    &#x3C;hero-bio [heroId]=\"3\"> &#x3C;hero-contact>&#x3C;/hero-contact> &#x3C;/hero-bio>`,\n  providers: [HeroService]\n})\nexport class HeroBiosAndContactsComponent {\n  constructor(logger: LoggerService) {\n    logger.logInfo('Creating HeroBiosAndContactsComponent');\n  }\n}\n\n</code-example>\n<p>Focus on the template:</p>\n<code-example path=\"dependency-injection-in-action/src/app/hero-bios.component.ts\" region=\"template\" title=\"dependency-injection-in-action/src/app/hero-bios.component.ts\" linenums=\"false\">\ntemplate: `\n  &#x3C;hero-bio [heroId]=\"1\"> &#x3C;hero-contact>&#x3C;/hero-contact> &#x3C;/hero-bio>\n  &#x3C;hero-bio [heroId]=\"2\"> &#x3C;hero-contact>&#x3C;/hero-contact> &#x3C;/hero-bio>\n  &#x3C;hero-bio [heroId]=\"3\"> &#x3C;hero-contact>&#x3C;/hero-contact> &#x3C;/hero-bio>`,\n\n</code-example>\n<p>Now there is a new <code>&#x3C;hero-contact></code> element between the <code>&#x3C;hero-bio></code> tags.\nAngular <em>projects</em>, or <em>transcludes</em>, the corresponding <code>HeroContactComponent</code> into the <code>HeroBioComponent</code> view,\nplacing it in the <code>&#x3C;ng-content></code> slot of the <code>HeroBioComponent</code> template:</p>\n<code-example path=\"dependency-injection-in-action/src/app/hero-bio.component.ts\" region=\"template\" title=\"src/app/hero-bio.component.ts (template)\" linenums=\"false\">\ntemplate: `\n  &#x3C;h4>{{hero.name}}&#x3C;/h4>\n  &#x3C;ng-content>&#x3C;/ng-content>\n  &#x3C;textarea cols=\"25\" [(ngModel)]=\"hero.description\">&#x3C;/textarea>`,\n\n</code-example>\n<p>It looks like this, with the hero's telephone number from <code>HeroContactComponent</code> projected above the hero description:</p>\n<figure>\n  <img src=\"generated/images/guide/dependency-injection-in-action/hero-bio-and-content.png\" alt=\"bio and contact\" width=\"199\" height=\"92\">\n</figure>\n<p>Here's the <code>HeroContactComponent</code> which demonstrates the qualifying decorators:</p>\n<code-example path=\"dependency-injection-in-action/src/app/hero-contact.component.ts\" region=\"component\" title=\"src/app/hero-contact.component.ts\">\n@Component({\n  selector: 'hero-contact',\n  template: `\n  &#x3C;div>Phone #: {{phoneNumber}}\n  &#x3C;span *ngIf=\"hasLogger\">!!!&#x3C;/span>&#x3C;/div>`\n})\nexport class HeroContactComponent {\n\n  hasLogger = false;\n\n  constructor(\n      @Host() // limit to the host component's instance of the HeroCacheService\n      private heroCache: HeroCacheService,\n\n      @Host()     // limit search for logger; hides the application-wide logger\n      @Optional() // ok if the logger doesn't exist\n      private loggerService: LoggerService\n  ) {\n    if (loggerService) {\n      this.hasLogger = true;\n      loggerService.logInfo('HeroContactComponent can log!');\n    }\n  }\n\n  get phoneNumber() { return this.heroCache.hero.phone; }\n\n}\n\n</code-example>\n<p>Focus on the constructor parameters:</p>\n<code-example path=\"dependency-injection-in-action/src/app/hero-contact.component.ts\" region=\"ctor-params\" title=\"src/app/hero-contact.component.ts\" linenums=\"false\">\n@Host() // limit to the host component's instance of the HeroCacheService\nprivate heroCache: HeroCacheService,\n\n@Host()     // limit search for logger; hides the application-wide logger\n@Optional() // ok if the logger doesn't exist\nprivate loggerService: LoggerService\n\n</code-example>\n<p>The <code>@Host()</code> function decorating the  <code>heroCache</code> property ensures that\nyou get a reference to the cache service from the parent <code>HeroBioComponent</code>.\nAngular throws an error if the parent lacks that service, even if a component higher\nin the component tree happens to have it.</p>\n<p>A second <code>@Host()</code> function decorates the <code>loggerService</code> property.\nThe only <code>LoggerService</code> instance in the app is provided at the <code>AppComponent</code> level.\nThe host <code>HeroBioComponent</code> doesn't have its own <code>LoggerService</code> provider.</p>\n<p>Angular would throw an error if you hadn't also decorated the property with the <code>@Optional()</code> function.\nThanks to <code>@Optional()</code>, Angular sets the <code>loggerService</code> to null and the rest of the component adapts.</p>\n<p>Here's the <code>HeroBiosAndContactsComponent</code> in action.</p>\n<figure>\n  <img src=\"generated/images/guide/dependency-injection-in-action/hero-bios-and-contacts.png\" alt=\"Bios with contact into\" width=\"206\" height=\"393\">\n</figure>\n<p>If you comment out the <code>@Host()</code> decorator, Angular now walks up the injector ancestor tree\nuntil it finds the logger at the <code>AppComponent</code> level. The logger logic kicks in and the hero display updates\nwith the gratuitous \"!!!\", indicating that the logger was found.</p>\n<figure>\n  <img src=\"generated/images/guide/dependency-injection-in-action/hero-bio-contact-no-host.png\" alt=\"Without @Host\" width=\"199\" height=\"93\">\n</figure>\n<p>On the other hand, if you restore the <code>@Host()</code> decorator and comment out <code>@Optional</code>,\nthe application fails for lack of the required logger at the host component level.\n<br>\n<code>EXCEPTION: No provider for LoggerService! (HeroContactComponent -> LoggerService)</code>\n<a id=\"component-element\"></a></p>\n<h2 id=\"inject-the-components-dom-element\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection-in-action#inject-the-components-dom-element\"><i class=\"material-icons\">link</i></a>Inject the component's DOM element</h2>\n<p>On occasion you might need to access a component's corresponding DOM element.\nAlthough developers strive to avoid it, many visual effects and 3rd party tools, such as jQuery,\nrequire DOM access.</p>\n<p>To illustrate, here's a simplified version of the <code>HighlightDirective</code> from\nthe <a href=\"guide/attribute-directives\">Attribute Directives</a> page.</p>\n<code-example path=\"dependency-injection-in-action/src/app/highlight.directive.ts\" title=\"src/app/highlight.directive.ts\">\nimport { Directive, ElementRef, HostListener, Input } from '@angular/core';\n\n@Directive({\n  selector: '[myHighlight]'\n})\nexport class HighlightDirective {\n\n  @Input('myHighlight') highlightColor: string;\n\n  private el: HTMLElement;\n\n  constructor(el: ElementRef) {\n    this.el = el.nativeElement;\n  }\n\n  @HostListener('mouseenter') onMouseEnter() {\n    this.highlight(this.highlightColor || 'cyan');\n  }\n\n  @HostListener('mouseleave') onMouseLeave() {\n    this.highlight(null);\n  }\n\n  private highlight(color: string) {\n    this.el.style.backgroundColor = color;\n  }\n}\n\n\n</code-example>\n<p>The directive sets the background to a highlight color when the user mouses over the\nDOM element to which it is applied.</p>\n<p>Angular sets the constructor's <code>el</code> parameter to the injected <code><a href=\"api/core/ElementRef\">ElementRef</a></code>, which is\na wrapper around that DOM element.\nIts <code>nativeElement</code> property exposes the DOM element for the directive to manipulate.</p>\n<p>The sample code applies the directive's <code>myHighlight</code> attribute to two <code>&#x3C;div></code> tags,\nfirst without a value (yielding the default color) and then with an assigned color value.</p>\n<code-example path=\"dependency-injection-in-action/src/app/app.component.html\" region=\"highlight\" title=\"src/app/app.component.html (highlight)\" linenums=\"false\">\n&#x3C;div id=\"highlight\"  class=\"di-component\"  myHighlight>\n  &#x3C;h3>Hero Bios and Contacts&#x3C;/h3>\n  &#x3C;div myHighlight=\"yellow\">\n    &#x3C;hero-bios-and-contacts>&#x3C;/hero-bios-and-contacts>\n  &#x3C;/div>\n&#x3C;/div>\n\n</code-example>\n<p>The following image shows the effect of mousing over the <code>&#x3C;hero-bios-and-contacts></code> tag.</p>\n<figure>\n  <img src=\"generated/images/guide/dependency-injection-in-action/highlight.png\" alt=\"Highlighted bios\" width=\"318\" height=\"196\">\n</figure>\n<a id=\"providers\"></a>\n<h2 id=\"define-dependencies-with-providers\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection-in-action#define-dependencies-with-providers\"><i class=\"material-icons\">link</i></a>Define dependencies with providers</h2>\n<p>This section demonstrates how to write providers that deliver dependent services.</p>\n<p>Get a service from a dependency injector by giving it a <strong><em>token</em></strong>.</p>\n<p>You usually let Angular handle this transaction by specifying a constructor parameter and its type.\nThe parameter type serves as the injector lookup <em>token</em>.\nAngular passes this token to the injector and assigns the result to the parameter.\nHere's a typical example:</p>\n<code-example path=\"dependency-injection-in-action/src/app/hero-bios.component.ts\" region=\"ctor\" title=\"src/app/hero-bios.component.ts (component constructor injection)\" linenums=\"false\">\nconstructor(logger: LoggerService) {\n  logger.logInfo('Creating HeroBiosComponent');\n}\n\n</code-example>\n<p>Angular asks the injector for the service associated with the <code>LoggerService</code>\nand assigns the returned value to the <code>logger</code> parameter.</p>\n<p>Where did the injector get that value?\nIt may already have that value in its internal container.\nIf it doesn't, it may be able to make one with the help of a <strong><em>provider</em></strong>.\nA <em>provider</em> is a recipe for delivering a service associated with a <em>token</em>.</p>\n<div class=\"l-sub-section\">\n<p>If the injector doesn't have a provider for the requested <em>token</em>, it delegates the request\nto its parent injector, where the process repeats until there are no more injectors.\nIf the search is futile, the injector throws an error—unless the request was <a href=\"guide/dependency-injection-in-action#optional\">optional</a>.</p>\n</div>\n<p>A new injector has no providers.\nAngular initializes the injectors it creates with some providers it cares about.\nYou have to register your <em>own</em> application providers manually,\nusually in the <code>providers</code> array of the <code><a href=\"api/core/Component\">Component</a></code> or <code><a href=\"api/core/Directive\">Directive</a></code> metadata:</p>\n<code-example path=\"dependency-injection-in-action/src/app/app.component.ts\" region=\"providers\" title=\"src/app/app.component.ts (providers)\">\nproviders: [ LoggerService, UserContextService, UserService ]\n\n</code-example>\n<a id=\"defining-providers\"></a>\n<h3 id=\"defining-providers\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection-in-action#defining-providers\"><i class=\"material-icons\">link</i></a>Defining providers</h3>\n<p>The simple class provider is the most typical by far.\nYou mention the class in the <code>providers</code> array and you're done.</p>\n<code-example path=\"dependency-injection-in-action/src/app/hero-bios.component.ts\" region=\"class-provider\" title=\"src/app/hero-bios.component.ts (class provider)\" linenums=\"false\">\nproviders: [HeroService]\n\n</code-example>\n<p>It's that simple because the most common injected service is an instance of a class.\nBut not every dependency can be satisfied by creating a new instance of a class.\nYou need other ways to deliver dependency values and that means you need other ways to specify a provider.</p>\n<p>The <code>HeroOfTheMonthComponent</code> example demonstrates many of the alternatives and why you need them.\nIt's visually simple: a few properties and the logs produced by a logger.</p>\n<figure>\n  <img src=\"generated/images/guide/dependency-injection-in-action/hero-of-month.png\" alt=\"Hero of the month\" width=\"300\" height=\"165\">\n</figure>\n<p>The code behind it gives you plenty to think about.</p>\n<code-example path=\"dependency-injection-in-action/src/app/hero-of-the-month.component.ts\" region=\"hero-of-the-month\" title=\"hero-of-the-month.component.ts\">\nimport { Component, Inject } from '@angular/core';\n\nimport { DateLoggerService } from './date-logger.service';\nimport { Hero }              from './hero';\nimport { HeroService }       from './hero.service';\nimport { LoggerService }     from './logger.service';\nimport { MinimalLogger }     from './minimal-logger.service';\nimport { RUNNERS_UP,\n         runnersUpFactory }  from './runners-up';\n\n@Component({\n  selector: 'hero-of-the-month',\n  templateUrl: './hero-of-the-month.component.html',\n  providers: [\n    { provide: Hero,          useValue:    someHero },\n    { provide: TITLE,         useValue:   'Hero of the Month' },\n    { provide: HeroService,   useClass:    HeroService },\n    { provide: LoggerService, useClass:    DateLoggerService },\n    { provide: MinimalLogger, useExisting: LoggerService },\n    { provide: RUNNERS_UP,    useFactory:  runnersUpFactory(2), deps: [Hero, HeroService] }\n  ]\n})\nexport class HeroOfTheMonthComponent {\n  logs: string[] = [];\n\n  constructor(\n      logger: MinimalLogger,\n      public heroOfTheMonth: Hero,\n      @Inject(RUNNERS_UP) public runnersUp: string,\n      @Inject(TITLE) public title: string)\n  {\n    this.logs = logger.logs;\n    logger.logInfo('starting up');\n  }\n}\n\n</code-example>\n<a id=\"provide\"></a>\n<h4 id=\"the-provide-object-literal\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection-in-action#the-provide-object-literal\"><i class=\"material-icons\">link</i></a>The <em>provide</em> object literal</h4>\n<p>The <code>provide</code> object literal takes a <em>token</em> and a <em>definition object</em>.\nThe <em>token</em> is usually a class but <a href=\"guide/dependency-injection-in-action#tokens\">it doesn't have to be</a>.</p>\n<p>The <em>definition</em> object has a required property that specifies how to create the singleton instance of the service. In this case, the property.</p>\n<a id=\"usevalue\"></a>\n<h4 id=\"usevaluethe-value-provider\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection-in-action#usevaluethe-value-provider\"><i class=\"material-icons\">link</i></a>useValue—the <em>value provider</em></h4>\n<p>Set the <code>useValue</code> property to a <strong><em>fixed value</em></strong> that the provider can return as the service instance (AKA, the \"dependency object\").</p>\n<p>Use this technique to provide <em>runtime configuration constants</em> such as website base addresses and feature flags.\nYou can use a <em>value provider</em> in a unit test to replace a production service with a fake or mock.</p>\n<p>The <code>HeroOfTheMonthComponent</code> example has two <em>value providers</em>.\nThe first provides an instance of the <code>Hero</code> class;\nthe second specifies a literal string resource:</p>\n<code-example path=\"dependency-injection-in-action/src/app/hero-of-the-month.component.ts\" region=\"use-value\" title=\"dependency-injection-in-action/src/app/hero-of-the-month.component.ts\" linenums=\"false\">\n{ provide: Hero,          useValue:    someHero },\n{ provide: TITLE,         useValue:   'Hero of the Month' },\n\n</code-example>\n<p>The <code>Hero</code> provider token is a class which makes sense because the value is a <code>Hero</code>\nand the consumer of the injected hero would want the type information.</p>\n<p>The <code>TITLE</code> provider token is <em>not a class</em>.\nIt's a special kind of provider lookup key called an <a href=\"guide/dependency-injection-in-action#injection-token\">InjectionToken</a>.\nYou can use an <code><a href=\"api/core/InjectionToken\">InjectionToken</a></code> for any kind of provider but it's particular\nhelpful when the dependency is a simple value like a string, a number, or a function.</p>\n<p>The value of a <em>value provider</em> must be defined <em>now</em>. You can't create the value later.\nObviously the title string literal is immediately available.\nThe <code>someHero</code> variable in this example was set earlier in the file:</p>\n<code-example path=\"dependency-injection-in-action/src/app/hero-of-the-month.component.ts\" region=\"some-hero\" title=\"dependency-injection-in-action/src/app/hero-of-the-month.component.ts\">\nconst someHero = new Hero(42, 'Magma', 'Had a great month!', '555-555-5555');\n\n</code-example>\n<p>The other providers create their values <em>lazily</em> when they're needed for injection.</p>\n<a id=\"useclass\"></a>\n<h4 id=\"useclassthe-class-provider\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection-in-action#useclassthe-class-provider\"><i class=\"material-icons\">link</i></a>useClass—the <em>class provider</em></h4>\n<p>The <code>useClass</code> provider creates and returns new instance of the specified class.</p>\n<p>Use this technique to <strong><em>substitute an alternative implementation</em></strong> for a common or default class.\nThe alternative could implement a different strategy, extend the default class,\nor fake the behavior of the real class in a test case.</p>\n<p>Here are two examples in the <code>HeroOfTheMonthComponent</code>:</p>\n<code-example path=\"dependency-injection-in-action/src/app/hero-of-the-month.component.ts\" region=\"use-class\" title=\"dependency-injection-in-action/src/app/hero-of-the-month.component.ts\" linenums=\"false\">\n{ provide: HeroService,   useClass:    HeroService },\n{ provide: LoggerService, useClass:    DateLoggerService },\n\n</code-example>\n<p>The first provider is the <em>de-sugared</em>, expanded form of the most typical case in which the\nclass to be created (<code>HeroService</code>) is also the provider's dependency injection token.\nIt's in this long form to de-mystify the preferred short form.</p>\n<p>The second provider substitutes the <code>DateLoggerService</code> for the <code>LoggerService</code>.\nThe <code>LoggerService</code> is already registered at the <code>AppComponent</code> level.\nWhen <em>this component</em> requests the <code>LoggerService</code>, it receives the <code>DateLoggerService</code> instead.</p>\n<div class=\"l-sub-section\">\n<p>This component and its tree of child components receive the <code>DateLoggerService</code> instance.\nComponents outside the tree continue to receive the original <code>LoggerService</code> instance.</p>\n</div>\n<p>The <code>DateLoggerService</code> inherits from <code>LoggerService</code>; it appends the current date/time to each message:</p>\n<code-example path=\"dependency-injection-in-action/src/app/date-logger.service.ts\" region=\"date-logger-service\" title=\"src/app/date-logger.service.ts\" linenums=\"false\">\n@Injectable()\nexport class DateLoggerService extends LoggerService\n{\n  logInfo(msg: any)  { super.logInfo(stamp(msg)); }\n  logDebug(msg: any) { super.logInfo(stamp(msg)); }\n  logError(msg: any) { super.logError(stamp(msg)); }\n}\n\nfunction stamp(msg: any) { return msg + ' at ' + new Date(); }\n\n</code-example>\n<a id=\"useexisting\"></a>\n<h4 id=\"useexistingthe-alias-provider\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection-in-action#useexistingthe-alias-provider\"><i class=\"material-icons\">link</i></a><em>useExisting</em>—the <em>alias provider</em></h4>\n<p>The <code>useExisting</code> provider maps one token to another.\nIn effect, the first token is an <strong><em>alias</em></strong> for the service associated with the second token,\ncreating <strong><em>two ways to access the same service object</em></strong>.</p>\n<code-example path=\"dependency-injection-in-action/src/app/hero-of-the-month.component.ts\" region=\"use-existing\" title=\"dependency-injection-in-action/src/app/hero-of-the-month.component.ts\">\n{ provide: MinimalLogger, useExisting: LoggerService },\n\n</code-example>\n<p>Narrowing an API through an aliasing interface is <em>one</em> important use case for this technique.\nThe following example shows aliasing for that purpose.</p>\n<p>Imagine that the <code>LoggerService</code> had a large API, much larger than the actual three methods and a property.\nYou might want to shrink that API surface to just the members you actually need.\nHere the <code>MinimalLogger</code> <a href=\"guide/dependency-injection-in-action#class-interface\"><em>class-interface</em></a> reduces the API to two members:</p>\n<code-example path=\"dependency-injection-in-action/src/app/minimal-logger.service.ts\" title=\"src/app/minimal-logger.service.ts\" linenums=\"false\">\n// Class used as a \"narrowing\" interface that exposes a minimal logger\n// Other members of the actual implementation are invisible\nexport abstract class MinimalLogger {\n  logs: string[];\n  logInfo: (msg: string) => void;\n}\n\n</code-example>\n<p>Now put it to use in a simplified version of the <code>HeroOfTheMonthComponent</code>.</p>\n<code-example path=\"dependency-injection-in-action/src/app/hero-of-the-month.component.1.ts\" title=\"src/app/hero-of-the-month.component.ts (minimal version)\" linenums=\"false\">\n@Component({\n  selector: 'hero-of-the-month',\n  templateUrl: './hero-of-the-month.component.html',\n  // Todo: move this aliasing, `useExisting` provider to the AppModule\n  providers: [{ provide: MinimalLogger, useExisting: LoggerService }]\n})\nexport class HeroOfTheMonthComponent {\n  logs: string[] = [];\n  constructor(logger: MinimalLogger) {\n    logger.logInfo('starting up');\n  }\n}\n\n</code-example>\n<p>The <code>HeroOfTheMonthComponent</code> constructor's <code>logger</code> parameter is typed as <code>MinimalLogger</code> so only the <code>logs</code> and <code>logInfo</code> members are visible in a TypeScript-aware editor:</p>\n<figure>\n  <img src=\"generated/images/guide/dependency-injection-in-action/minimal-logger-intellisense.png\" alt=\"MinimalLogger restricted API\" width=\"532\" height=\"60\">\n</figure>\n<p>Behind the scenes, Angular actually sets the <code>logger</code> parameter to the full service registered under the <code>LoggingService</code> token which happens to be the <code>DateLoggerService</code> that was <a href=\"guide/dependency-injection-in-action#useclass\">provided above</a>.</p>\n<div class=\"l-sub-section\">\n<p>The following image, which displays the logging date, confirms the point:</p>\n<figure>\n  <img src=\"generated/images/guide/dependency-injection-in-action/date-logger-entry.png\" alt=\"DateLoggerService entry\" width=\"300\" height=\"32\">\n</figure>\n</div>\n<a id=\"usefactory\"></a>\n<h4 id=\"usefactorythe-factory-provider\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection-in-action#usefactorythe-factory-provider\"><i class=\"material-icons\">link</i></a><em>useFactory</em>—the <em>factory provider</em></h4>\n<p>The <code>useFactory</code> provider creates a dependency object by calling a factory function\nas in this example.</p>\n<code-example path=\"dependency-injection-in-action/src/app/hero-of-the-month.component.ts\" region=\"use-factory\" title=\"dependency-injection-in-action/src/app/hero-of-the-month.component.ts\">\n{ provide: RUNNERS_UP,    useFactory:  runnersUpFactory(2), deps: [Hero, HeroService] }\n\n</code-example>\n<p>Use this technique to <strong><em>create a dependency object</em></strong>\nwith a factory function whose inputs are some <strong><em>combination of injected services and local state</em></strong>.</p>\n<p>The <em>dependency object</em> doesn't have to be a class instance. It could be anything.\nIn this example, the <em>dependency object</em> is a string of the names of the runners-up\nto the \"Hero of the Month\" contest.</p>\n<p>The local state is the number <code>2</code>, the number of runners-up this component should show.\nIt executes <code>runnersUpFactory</code> immediately with <code>2</code>.</p>\n<p>The <code>runnersUpFactory</code> itself isn't the provider factory function.\nThe true provider factory function is the function that <code>runnersUpFactory</code> returns.</p>\n<code-example path=\"dependency-injection-in-action/src/app/runners-up.ts\" region=\"factory-synopsis\" title=\"runners-up.ts (excerpt)\" linenums=\"false\">\nexport function runnersUpFactory(take: number) {\n  return (winner: Hero, heroService: HeroService): string => {\n    /* ... */\n  };\n};\n\n</code-example>\n<p>That returned function takes a winning <code>Hero</code> and a <code>HeroService</code> as arguments.</p>\n<p>Angular supplies these arguments from injected values identified by\nthe two <em>tokens</em> in the <code>deps</code> array.\nThe two <code>deps</code> values are <em>tokens</em> that the injector uses\nto provide these factory function dependencies.</p>\n<p>After some undisclosed work, the function returns the string of names\nand Angular injects it into the <code>runnersUp</code> parameter of the <code>HeroOfTheMonthComponent</code>.</p>\n<div class=\"l-sub-section\">\n<p>The function retrieves candidate heroes from the <code>HeroService</code>,\ntakes <code>2</code> of them to be the runners-up, and returns their concatenated names.\nLook at the <live-example name=\"dependency-injection-in-action\"></live-example>\nfor the full source code.</p>\n</div>\n<a id=\"tokens\"></a>\n<h2 id=\"provider-token-alternatives-the-class-interface-and-injectiontoken\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection-in-action#provider-token-alternatives-the-class-interface-and-injectiontoken\"><i class=\"material-icons\">link</i></a>Provider token alternatives: the <em>class-interface</em> and <em>InjectionToken</em></h2>\n<p>Angular dependency injection is easiest when the provider <em>token</em> is a class\nthat is also the type of the returned dependency object, or what you usually call the <em>service</em>.</p>\n<p>But the token doesn't have to be a class and even when it is a class,\nit doesn't have to be the same type as the returned object.\nThat's the subject of the next section.\n<a id=\"class-interface\"></a></p>\n<h3 id=\"class-interface\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection-in-action#class-interface\"><i class=\"material-icons\">link</i></a>class-interface</h3>\n<p>The previous <em>Hero of the Month</em> example used the <code>MinimalLogger</code> class\nas the token for a provider of a <code>LoggerService</code>.</p>\n<code-example path=\"dependency-injection-in-action/src/app/hero-of-the-month.component.ts\" region=\"use-existing\" title=\"dependency-injection-in-action/src/app/hero-of-the-month.component.ts\">\n{ provide: MinimalLogger, useExisting: LoggerService },\n\n</code-example>\n<p>The <code>MinimalLogger</code> is an abstract class.</p>\n<code-example path=\"dependency-injection-in-action/src/app/minimal-logger.service.ts\" title=\"dependency-injection-in-action/src/app/minimal-logger.service.ts\" linenums=\"false\">\n// Class used as a \"narrowing\" interface that exposes a minimal logger\n// Other members of the actual implementation are invisible\nexport abstract class MinimalLogger {\n  logs: string[];\n  logInfo: (msg: string) => void;\n}\n\n</code-example>\n<p>You usually inherit from an abstract class.\nBut <em>no class</em> in this application inherits from <code>MinimalLogger</code>.</p>\n<p>The <code>LoggerService</code> and the <code>DateLoggerService</code> <em>could</em> have inherited from <code>MinimalLogger</code>.\nThey could have <em>implemented</em> it instead in the manner of an interface.\nBut they did neither.\nThe <code>MinimalLogger</code> is used exclusively as a dependency injection token.</p>\n<p>When you use a class this way, it's called a <strong><em>class-interface</em></strong>.\nThe key benefit of a <em>class-interface</em> is that you can get the strong-typing of an interface\nand you can <strong><em>use it as a provider token</em></strong> in the way you would a normal class.</p>\n<p>A <strong><em>class-interface</em></strong> should define <em>only</em> the members that its consumers are allowed to call.\nSuch a narrowing interface helps decouple the concrete class from its consumers.</p>\n<div class=\"l-sub-section\">\n<h4 id=\"why-minimallogger-is-a-class-and-not-a-typescript-interface\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection-in-action#why-minimallogger-is-a-class-and-not-a-typescript-interface\"><i class=\"material-icons\">link</i></a>Why <em>MinimalLogger</em> is a class and not a TypeScript interface</h4>\n<p>You can't use an interface as a provider token because\ninterfaces are not JavaScript objects.\nThey exist only in the TypeScript design space.\nThey disappear after the code is transpiled to JavaScript.</p>\n<p>A provider token must be a real JavaScript object of some kind:\nsuch as a function, an object, a string, or a class.</p>\n<p>Using a class as an interface gives you the characteristics of an interface in a real JavaScript object.</p>\n<p>Of course a real object occupies memory. To minimize memory cost, the class should have <em>no implementation</em>.\nThe <code>MinimalLogger</code> transpiles to this unoptimized, pre-minified JavaScript for a constructor function:</p>\n<code-example path=\"dependency-injection-in-action/src/app/minimal-logger.service.ts\" region=\"minimal-logger-transpiled\" title=\"dependency-injection-in-action/src/app/minimal-logger.service.ts\" linenums=\"false\">\nvar MinimalLogger = (function () {\n  function MinimalLogger() {}\n  return MinimalLogger;\n}());\nexports(\"MinimalLogger\", MinimalLogger);\n\n</code-example>\n<p>Notice that it doesn't have a single member. It never grows no matter how many members you add to the class <em>as long as those members are typed but not implemented</em>. Look again at the TypeScript <code>MinimalLogger</code> class to confirm that it has no implementation.</p>\n</div>\n<a id=\"injection-token\"></a>\n<h3 id=\"injectiontoken\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection-in-action#injectiontoken\"><i class=\"material-icons\">link</i></a><em>InjectionToken</em></h3>\n<p>Dependency objects can be simple values like dates, numbers and strings, or\nshapeless objects like arrays and functions.</p>\n<p>Such objects don't have application interfaces and therefore aren't well represented by a class.\nThey're better represented by a token that is both unique and symbolic,\na JavaScript object that has a friendly name but won't conflict with\nanother token that happens to have the same name.</p>\n<p>The <code><a href=\"api/core/InjectionToken\">InjectionToken</a></code> has these characteristics.\nYou encountered them twice in the <em>Hero of the Month</em> example,\nin the <em>title</em> value provider and in the <em>runnersUp</em> factory provider.</p>\n<code-example path=\"dependency-injection-in-action/src/app/hero-of-the-month.component.ts\" region=\"provide-injection-token\" title=\"dependency-injection-in-action/src/app/hero-of-the-month.component.ts\" linenums=\"false\">\n{ provide: TITLE,         useValue:   'Hero of the Month' },\n{ provide: RUNNERS_UP,    useFactory:  runnersUpFactory(2), deps: [Hero, HeroService] }\n\n</code-example>\n<p>You created the <code>TITLE</code> token like this:</p>\n<code-example path=\"dependency-injection-in-action/src/app/hero-of-the-month.component.ts\" region=\"injection-token\" title=\"dependency-injection-in-action/src/app/hero-of-the-month.component.ts\" linenums=\"false\">\nimport { InjectionToken } from '@angular/core';\n\nexport const TITLE = new InjectionToken&#x3C;string>('title');\n\n</code-example>\n<p>The type parameter, while optional, conveys the dependency's type to developers and tooling.\nThe token description is another developer aid.</p>\n<a id=\"di-inheritance\"></a>\n<h2 id=\"inject-into-a-derived-class\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection-in-action#inject-into-a-derived-class\"><i class=\"material-icons\">link</i></a>Inject into a derived class</h2>\n<p>Take care when writing a component that inherits from another component.\nIf the base component has injected dependencies,\nyou must re-provide and re-inject them in the derived class\nand then pass them down to the base class through the constructor.</p>\n<p>In this contrived example, <code>SortedHeroesComponent</code> inherits from <code>HeroesBaseComponent</code>\nto display a <em>sorted</em> list of heroes.</p>\n<figure>\n  <img src=\"generated/images/guide/dependency-injection-in-action/sorted-heroes.png\" alt=\"Sorted Heroes\" width=\"135\" height=\"107\">\n</figure>\n<p>The <code>HeroesBaseComponent</code> could stand on its own.\nIt demands its own instance of the <code>HeroService</code> to get heroes\nand displays them in the order they arrive from the database.</p>\n<code-example path=\"dependency-injection-in-action/src/app/sorted-heroes.component.ts\" region=\"heroes-base\" title=\"src/app/sorted-heroes.component.ts (HeroesBaseComponent)\">\n@Component({\n  selector: 'unsorted-heroes',\n  template: `&#x3C;div *ngFor=\"let hero of heroes\">{{hero.name}}&#x3C;/div>`,\n  providers: [HeroService]\n})\nexport class HeroesBaseComponent implements OnInit {\n  constructor(private heroService: HeroService) { }\n\n  heroes: Array&#x3C;Hero>;\n\n  ngOnInit() {\n    this.heroes = this.heroService.getAllHeroes();\n    this.afterGetHeroes();\n  }\n\n  // Post-process heroes in derived class override.\n  protected afterGetHeroes() {}\n\n}\n\n</code-example>\n<div class=\"l-sub-section\">\n<p><strong><em>Keep constructors simple.</em></strong> They should do little more than initialize variables.\nThis rule makes the component safe to construct under test without fear that it will do something dramatic like talk to the server.\nThat's why you call the <code>HeroService</code> from within the <code>ngOnInit</code> rather than the constructor.</p>\n</div>\n<p>Users want to see the heroes in alphabetical order.\nRather than modify the original component, sub-class it and create a\n<code>SortedHeroesComponent</code> that sorts the heroes before presenting them.\nThe <code>SortedHeroesComponent</code> lets the base class fetch the heroes.</p>\n<p>Unfortunately, Angular cannot inject the <code>HeroService</code> directly into the base class.\nYou must provide the <code>HeroService</code> again for <em>this</em> component,\nthen pass it down to the base class inside the constructor.</p>\n<code-example path=\"dependency-injection-in-action/src/app/sorted-heroes.component.ts\" region=\"sorted-heroes\" title=\"src/app/sorted-heroes.component.ts (SortedHeroesComponent)\">\n@Component({\n  selector: 'sorted-heroes',\n  template: `&#x3C;div *ngFor=\"let hero of heroes\">{{hero.name}}&#x3C;/div>`,\n  providers: [HeroService]\n})\nexport class SortedHeroesComponent extends HeroesBaseComponent {\n  constructor(heroService: HeroService) {\n    super(heroService);\n  }\n\n  protected afterGetHeroes() {\n    this.heroes = this.heroes.sort((h1, h2) => {\n      return h1.name &#x3C; h2.name ? -1 :\n            (h1.name > h2.name ? 1 : 0);\n    });\n  }\n}\n\n</code-example>\n<p>Now take note of the <code>afterGetHeroes()</code> method.\nYour first instinct might have been to create an <code>ngOnInit</code> method in <code>SortedHeroesComponent</code> and do the sorting there.\nBut Angular calls the <em>derived</em> class's <code>ngOnInit</code> <em>before</em> calling the base class's <code>ngOnInit</code>\nso you'd be sorting the heroes array <em>before they arrived</em>. That produces a nasty error.</p>\n<p>Overriding the base class's <code>afterGetHeroes()</code> method solves the problem.</p>\n<p>These complications argue for <em>avoiding component inheritance</em>.</p>\n<a id=\"find-parent\"></a>\n<h2 id=\"find-a-parent-component-by-injection\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection-in-action#find-a-parent-component-by-injection\"><i class=\"material-icons\">link</i></a>Find a parent component by injection</h2>\n<p>Application components often need to share information.\nMore loosely coupled techniques such as data binding and service sharing\nare preferable. But sometimes it makes sense for one component\nto have a direct reference to another component\nperhaps to access values or call methods on that component.</p>\n<p>Obtaining a component reference is a bit tricky in Angular.\nAlthough an Angular application is a tree of components,\nthere is no public API for inspecting and traversing that tree.</p>\n<p>There is an API for acquiring a child reference.\nCheck out <code><a href=\"api/core/Query\">Query</a></code>, <code><a href=\"api/core/QueryList\">QueryList</a></code>, <code><a href=\"api/core/ViewChildren\">ViewChildren</a></code>, and <code><a href=\"api/core/ContentChildren\">ContentChildren</a></code>\nin the <a href=\"api/\">API Reference</a>.</p>\n<p>There is no public API for acquiring a parent reference.\nBut because every component instance is added to an injector's container,\nyou can use Angular dependency injection to reach a parent component.</p>\n<p>This section describes some techniques for doing that.</p>\n<a id=\"known-parent\"></a>\n<h3 id=\"find-a-parent-component-of-known-type\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection-in-action#find-a-parent-component-of-known-type\"><i class=\"material-icons\">link</i></a>Find a parent component of known type</h3>\n<p>You use standard class injection to acquire a parent component whose type you know.</p>\n<p>In the following example, the parent <code>AlexComponent</code> has several children including a <code>CathyComponent</code>:</p>\n<a id=\"alex\"></a>\n<code-example path=\"dependency-injection-in-action/src/app/parent-finder.component.ts\" region=\"alex-1\" title=\"parent-finder.component.ts (AlexComponent v.1)\" linenums=\"false\">\n@Component({\n  selector: 'alex',\n  template: `\n    &#x3C;div class=\"a\">\n      &#x3C;h3>{{name}}&#x3C;/h3>\n      &#x3C;cathy>&#x3C;/cathy>\n      &#x3C;craig>&#x3C;/craig>\n      &#x3C;carol>&#x3C;/carol>\n    &#x3C;/div>`,\n})\nexport class AlexComponent extends Base\n{\n  name= 'Alex';\n}\n\n</code-example>\n<p><em>Cathy</em> reports whether or not she has access to <em>Alex</em>\nafter injecting an <code>AlexComponent</code> into her constructor:</p>\n<code-example path=\"dependency-injection-in-action/src/app/parent-finder.component.ts\" region=\"cathy\" title=\"parent-finder.component.ts (CathyComponent)\" linenums=\"false\">\n@Component({\n  selector: 'cathy',\n  template: `\n  &#x3C;div class=\"c\">\n    &#x3C;h3>Cathy&#x3C;/h3>\n    {{alex ? 'Found' : 'Did not find'}} Alex via the component class.&#x3C;br>\n  &#x3C;/div>`\n})\nexport class CathyComponent {\n  constructor( @Optional() public alex: AlexComponent ) { }\n}\n\n</code-example>\n<p>Notice that even though the <a href=\"guide/dependency-injection-in-action#optional\">@Optional</a> qualifier\nis there for safety,\nthe <live-example name=\"dependency-injection-in-action\"></live-example>\nconfirms that the <code>alex</code> parameter is set.</p>\n<a id=\"base-parent\"></a>\n<h3 id=\"cannot-find-a-parent-by-its-base-class\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection-in-action#cannot-find-a-parent-by-its-base-class\"><i class=\"material-icons\">link</i></a>Cannot find a parent by its base class</h3>\n<p>What if you <em>don't</em> know the concrete parent component class?</p>\n<p>A re-usable component might be a child of multiple components.\nImagine a component for rendering breaking news about a financial instrument.\nFor business reasons, this news component makes frequent calls\ndirectly into its parent instrument as changing market data streams by.</p>\n<p>The app probably defines more than a dozen financial instrument components.\nIf you're lucky, they all implement the same base class\nwhose API your <code>NewsComponent</code> understands.</p>\n<div class=\"l-sub-section\">\n<p>Looking for components that implement an interface would be better.\nThat's not possible because TypeScript interfaces disappear\nfrom the transpiled JavaScript, which doesn't support interfaces.\nThere's no artifact to look for.</p>\n</div>\n<p>This isn't necessarily good design.\nThis example is examining <em>whether a component can\ninject its parent via the parent's base class</em>.</p>\n<p>The sample's <code>CraigComponent</code> explores this question. <a href=\"guide/dependency-injection-in-action#alex\">Looking back</a>,\nyou see that the <code>Alex</code> component <em>extends</em> (<em>inherits</em>) from a class named <code>Base</code>.</p>\n<code-example path=\"dependency-injection-in-action/src/app/parent-finder.component.ts\" region=\"alex-class-signature\" title=\"parent-finder.component.ts (Alex class signature)\" linenums=\"false\">\nexport class AlexComponent extends Base\n\n</code-example>\n<p>The <code>CraigComponent</code> tries to inject <code>Base</code> into its <code>alex</code> constructor parameter and reports if it succeeded.</p>\n<code-example path=\"dependency-injection-in-action/src/app/parent-finder.component.ts\" region=\"craig\" title=\"parent-finder.component.ts (CraigComponent)\" linenums=\"false\">\n@Component({\n  selector: 'craig',\n  template: `\n  &#x3C;div class=\"c\">\n    &#x3C;h3>Craig&#x3C;/h3>\n    {{alex ? 'Found' : 'Did not find'}} Alex via the base class.\n  &#x3C;/div>`\n})\nexport class CraigComponent {\n  constructor( @Optional() public alex: Base ) { }\n}\n\n</code-example>\n<p>Unfortunately, this does not work.\nThe <live-example name=\"dependency-injection-in-action\"></live-example>\nconfirms that the <code>alex</code> parameter is null.\n<em>You cannot inject a parent by its base class.</em></p>\n<a id=\"class-interface-parent\"></a>\n<h3 id=\"find-a-parent-by-its-class-interface\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection-in-action#find-a-parent-by-its-class-interface\"><i class=\"material-icons\">link</i></a>Find a parent by its class-interface</h3>\n<p>You can find a parent component with a <a href=\"guide/dependency-injection-in-action#class-interface\">class-interface</a>.</p>\n<p>The parent must cooperate by providing an <em>alias</em> to itself in the name of a <em>class-interface</em> token.</p>\n<p>Recall that Angular always adds a component instance to its own injector;\nthat's why you could inject <em>Alex</em> into <em>Cathy</em> <a href=\"guide/dependency-injection-in-action#known-parent\">earlier</a>.</p>\n<p>Write an <a href=\"guide/dependency-injection-in-action#useexisting\"><em>alias provider</em></a>—a <code>provide</code> object literal with a <code>useExisting</code>\ndefinition—that creates an <em>alternative</em> way to inject the same component instance\nand add that provider to the <code>providers</code> array of the <code>@Component</code> metadata for the <code>AlexComponent</code>:</p>\n<a id=\"alex-providers\"></a>\n<code-example path=\"dependency-injection-in-action/src/app/parent-finder.component.ts\" region=\"alex-providers\" title=\"parent-finder.component.ts (AlexComponent providers)\" linenums=\"false\">\nproviders: [{ provide: Parent, useExisting: forwardRef(() => AlexComponent) }],\n\n</code-example>\n<p><a href=\"guide/dependency-injection-in-action#parent-token\">Parent</a> is the provider's <em>class-interface</em> token.\nThe <a href=\"guide/dependency-injection-in-action#forwardref\"><em>forwardRef</em></a> breaks the circular reference you just created by having the <code>AlexComponent</code> refer to itself.</p>\n<p><em>Carol</em>, the third of <em>Alex</em>'s child components, injects the parent into its <code>parent</code> parameter,\nthe same way you've done it before:</p>\n<code-example path=\"dependency-injection-in-action/src/app/parent-finder.component.ts\" region=\"carol-class\" title=\"parent-finder.component.ts (CarolComponent class)\" linenums=\"false\">\nexport class CarolComponent {\n  name= 'Carol';\n  constructor( @Optional() public parent: Parent ) { }\n}\n\n</code-example>\n<p>Here's <em>Alex</em> and family in action:</p>\n<figure>\n  <img src=\"generated/images/guide/dependency-injection-in-action/alex.png\" alt=\"Alex in action\" width=\"302\" height=\"374\">\n</figure>\n<a id=\"parent-tree\"></a>\n<h3 id=\"find-the-parent-in-a-tree-of-parents-with-skipself\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection-in-action#find-the-parent-in-a-tree-of-parents-with-skipself\"><i class=\"material-icons\">link</i></a>Find the parent in a tree of parents with <em>@SkipSelf()</em></h3>\n<p>Imagine one branch of a component hierarchy: <em>Alice</em> -> <em>Barry</em> -> <em>Carol</em>.\nBoth <em>Alice</em> and <em>Barry</em> implement the <code>Parent</code> <em>class-interface</em>.</p>\n<p><em>Barry</em> is the problem. He needs to reach his parent, <em>Alice</em>, and also be a parent to <em>Carol</em>.\nThat means he must both <em>inject</em> the <code>Parent</code> <em>class-interface</em> to get <em>Alice</em> and\n<em>provide</em> a <code>Parent</code> to satisfy <em>Carol</em>.</p>\n<p>Here's <em>Barry</em>:</p>\n<code-example path=\"dependency-injection-in-action/src/app/parent-finder.component.ts\" region=\"barry\" title=\"parent-finder.component.ts (BarryComponent)\" linenums=\"false\">\nconst templateB = `\n  &#x3C;div class=\"b\">\n    &#x3C;div>\n      &#x3C;h3>{{name}}&#x3C;/h3>\n      &#x3C;p>My parent is {{parent?.name}}&#x3C;/p>\n    &#x3C;/div>\n    &#x3C;carol>&#x3C;/carol>\n    &#x3C;chris>&#x3C;/chris>\n  &#x3C;/div>`;\n\n@Component({\n  selector:   'barry',\n  template:   templateB,\n  providers:  [{ provide: Parent, useExisting: forwardRef(() => BarryComponent) }]\n})\nexport class BarryComponent implements Parent {\n  name = 'Barry';\n  constructor( @SkipSelf() @Optional() public parent: Parent ) { }\n}\n\n</code-example>\n<p><em>Barry</em>'s <code>providers</code> array looks just like <a href=\"guide/dependency-injection-in-action#alex-providers\"><em>Alex</em>'s</a>.\nIf you're going to keep writing <a href=\"guide/dependency-injection-in-action#useexisting\"><em>alias providers</em></a> like this you should create a <a href=\"guide/dependency-injection-in-action#provideparent\">helper function</a>.</p>\n<p>For now, focus on <em>Barry</em>'s constructor:</p>\n<code-tabs>\n\n  <code-pane title=\"Barry&#x27;s constructor\" path=\"dependency-injection-in-action/src/app/parent-finder.component.ts\" region=\"barry-ctor\">\nconstructor( @SkipSelf() @Optional() public parent: Parent ) { }\n\n</code-pane>\n\n  <code-pane title=\"Carol&#x27;s constructor\" path=\"dependency-injection-in-action/src/app/parent-finder.component.ts\" region=\"carol-ctor\">\nconstructor( @Optional() public parent: Parent ) { }\n\n</code-pane>\n\n</code-tabs>\n<p>It's identical to <em>Carol</em>'s constructor except for the additional <code>@SkipSelf</code> decorator.</p>\n<p><code>@SkipSelf</code> is essential for two reasons:</p>\n<ol>\n<li>\n<p>It tells the injector to start its search for a <code>Parent</code> dependency in a component <em>above</em> itself,\nwhich <em>is</em> what parent means.</p>\n</li>\n<li>\n<p>Angular throws a cyclic dependency error if you omit the <code>@SkipSelf</code> decorator.</p>\n<p><code>Cannot instantiate cyclic dependency! (BethComponent -> Parent -> BethComponent)</code></p>\n</li>\n</ol>\n<p>Here's <em>Alice</em>, <em>Barry</em> and family in action:</p>\n<figure>\n  <img src=\"generated/images/guide/dependency-injection-in-action/alice.png\" alt=\"Alice in action\" width=\"298\" height=\"631\">\n</figure>\n<a id=\"parent-token\"></a>\n<h3 id=\"the-parent-class-interface\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection-in-action#the-parent-class-interface\"><i class=\"material-icons\">link</i></a>The <em>Parent</em> class-interface</h3>\n<p>You <a href=\"guide/dependency-injection-in-action#class-interface\">learned earlier</a> that a <em>class-interface</em> is an abstract class used as an interface rather than as a base class.</p>\n<p>The example defines a <code>Parent</code> <em>class-interface</em>.</p>\n<code-example path=\"dependency-injection-in-action/src/app/parent-finder.component.ts\" region=\"parent\" title=\"parent-finder.component.ts (Parent class-interface)\" linenums=\"false\">\nexport abstract class Parent { name: string; }\n\n</code-example>\n<p>The <code>Parent</code> <em>class-interface</em> defines a <code>name</code> property with a type declaration but <em>no implementation</em>.\nThe <code>name</code> property is the only member of a parent component that a child component can call.\nSuch a narrow interface helps decouple the child component class from its parent components.</p>\n<p>A component that could serve as a parent <em>should</em> implement the <em>class-interface</em> as the <code>AliceComponent</code> does:</p>\n<code-example path=\"dependency-injection-in-action/src/app/parent-finder.component.ts\" region=\"alice-class-signature\" title=\"parent-finder.component.ts (AliceComponent class signature)\" linenums=\"false\">\nexport class AliceComponent implements Parent\n\n</code-example>\n<p>Doing so adds clarity to the code.  But it's not technically necessary.\nAlthough the <code>AlexComponent</code> has a <code>name</code> property, as required by its <code>Base</code> class,\nits class signature doesn't mention <code>Parent</code>:</p>\n<code-example path=\"dependency-injection-in-action/src/app/parent-finder.component.ts\" region=\"alex-class-signature\" title=\"parent-finder.component.ts (AlexComponent class signature)\" linenums=\"false\">\nexport class AlexComponent extends Base\n\n</code-example>\n<div class=\"l-sub-section\">\n<p>The <code>AlexComponent</code> <em>should</em> implement <code>Parent</code> as a matter of proper style.\nIt doesn't in this example <em>only</em> to demonstrate that the code will compile and run without the interface</p>\n</div>\n<a id=\"provideparent\"></a>\n<h3 id=\"a-provideparent-helper-function\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection-in-action#a-provideparent-helper-function\"><i class=\"material-icons\">link</i></a>A <em>provideParent()</em> helper function</h3>\n<p>Writing variations of the same parent <em>alias provider</em> gets old quickly,\nespecially this awful mouthful with a <a href=\"guide/dependency-injection-in-action#forwardref\"><em>forwardRef</em></a>:</p>\n<code-example path=\"dependency-injection-in-action/src/app/parent-finder.component.ts\" region=\"alex-providers\" title=\"dependency-injection-in-action/src/app/parent-finder.component.ts\" linenums=\"false\">\nproviders: [{ provide: Parent, useExisting: forwardRef(() => AlexComponent) }],\n\n</code-example>\n<p>You can extract that logic into a helper function like this:</p>\n<code-example path=\"dependency-injection-in-action/src/app/parent-finder.component.ts\" region=\"provide-the-parent\" title=\"dependency-injection-in-action/src/app/parent-finder.component.ts\" linenums=\"false\">\n// Helper method to provide the current component instance in the name of a `parentType`.\nconst provideParent =\n  (component: any) => {\n    return { provide: Parent, useExisting: forwardRef(() => component) };\n  };\n\n</code-example>\n<p>Now you can add a simpler, more meaningful parent provider to your components:</p>\n<code-example path=\"dependency-injection-in-action/src/app/parent-finder.component.ts\" region=\"alice-providers\" title=\"dependency-injection-in-action/src/app/parent-finder.component.ts\" linenums=\"false\">\nproviders:  [ provideParent(AliceComponent) ]\n\n</code-example>\n<p>You can do better. The current version of the helper function can only alias the <code>Parent</code> <em>class-interface</em>.\nThe application might have a variety of parent types, each with its own <em>class-interface</em> token.</p>\n<p>Here's a revised version that defaults to <code>parent</code> but also accepts an optional second parameter for a different parent <em>class-interface</em>.</p>\n<code-example path=\"dependency-injection-in-action/src/app/parent-finder.component.ts\" region=\"provide-parent\" title=\"dependency-injection-in-action/src/app/parent-finder.component.ts\" linenums=\"false\">\n// Helper method to provide the current component instance in the name of a `parentType`.\n// The `parentType` defaults to `Parent` when omitting the second parameter.\nconst provideParent =\n  (component: any, parentType?: any) => {\n    return { provide: parentType || Parent, useExisting: forwardRef(() => component) };\n  };\n\n</code-example>\n<p>And here's how you could use it with a different parent type:</p>\n<code-example path=\"dependency-injection-in-action/src/app/parent-finder.component.ts\" region=\"beth-providers\" title=\"dependency-injection-in-action/src/app/parent-finder.component.ts\" linenums=\"false\">\nproviders:  [ provideParent(BethComponent, DifferentParent) ]\n\n</code-example>\n<a id=\"forwardref\"></a>\n<h2 id=\"break-circularities-with-a-forward-class-reference-forwardref\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/dependency-injection-in-action#break-circularities-with-a-forward-class-reference-forwardref\"><i class=\"material-icons\">link</i></a>Break circularities with a forward class reference (<em>forwardRef</em>)</h2>\n<p>The order of class declaration matters in TypeScript.\nYou can't refer directly to a class until it's been defined.</p>\n<p>This isn't usually a problem, especially if you adhere to the recommended <em>one class per file</em> rule.\nBut sometimes circular references are unavoidable.\nYou're in a bind when class 'A' refers to class 'B' and 'B' refers to 'A'.\nOne of them has to be defined first.</p>\n<p>The Angular <code>forwardRef()</code> function creates an <em>indirect</em> reference that Angular can resolve later.</p>\n<p>The <em>Parent Finder</em> sample is full of circular class references that are impossible to break.</p>\n<p>You face this dilemma when a class makes <em>a reference to itself</em>\nas does the <code>AlexComponent</code> in its <code>providers</code> array.\nThe <code>providers</code> array is a property of the <code>@Component</code> decorator function which must\nappear <em>above</em> the class definition.</p>\n<p>Break the circularity with <code><a href=\"api/core/forwardRef\">forwardRef</a></code>:</p>\n<code-example path=\"dependency-injection-in-action/src/app/parent-finder.component.ts\" region=\"alex-providers\" title=\"parent-finder.component.ts (AlexComponent providers)\" linenums=\"false\">\nproviders: [{ provide: Parent, useExisting: forwardRef(() => AlexComponent) }],\n\n</code-example>\n\n</div>"
}