{
  "id": "guide/typescript-configuration",
  "title": "TypeScript Configuration",
  "contents": "\n<div class=\"content\">\n<h1 id=\"typescript-configuration\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typescript-configuration#typescript-configuration\"><i class=\"material-icons\">link</i></a>TypeScript Configuration</h1>\n<p>TypeScript is a primary language for Angular application development.\nIt is a superset of JavaScript with design-time support for type safety and tooling.</p>\n<p>Browsers can't execute TypeScript directly. Typescript must be \"transpiled\" into JavaScript using the <em>tsc</em> compiler,\nwhich requires some configuration.</p>\n<p>This page covers some aspects of TypeScript configuration and the TypeScript environment\nthat are important to Angular developers, including details about the following files:</p>\n<ul>\n<li><a href=\"guide/typescript-configuration#tsconfig\">tsconfig.json</a>—TypeScript compiler configuration.</li>\n<li><a href=\"guide/typescript-configuration#typings\">typings</a>—TypesScript declaration files.</li>\n</ul>\n<a id=\"tsconfig\"></a>\n<h2 id=\"tsconfigjson\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typescript-configuration#tsconfigjson\"><i class=\"material-icons\">link</i></a><em>tsconfig.json</em></h2>\n<p>Typically, you add a TypeScript configuration file called <code>tsconfig.json</code> to your project to\nguide the compiler as it generates JavaScript files.</p>\n<div class=\"l-sub-section\">\n<p>For details about <code>tsconfig.json</code>, see the official\n<a href=\"http://www.typescriptlang.org/docs/handbook/tsconfig-json.html\">TypeScript wiki</a>.</p>\n</div>\n<p>The <a href=\"guide/setup\">Setup</a> guide uses the following <code>tsconfig.json</code>:</p>\n<code-example path=\"quickstart/src/tsconfig.1.json\" title=\"tsconfig.json\" linenums=\"false\">\n{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"module\": \"commonjs\",\n    \"moduleResolution\": \"node\",\n    \"sourceMap\": true,\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true,\n    \"lib\": [ \"es2015\", \"dom\" ],\n    \"noImplicitAny\": true,\n    \"suppressImplicitAnyIndexErrors\": true\n  }\n}\n\n\n</code-example>\n<p>This file contains options and flags that are essential for Angular applications.</p>\n<a id=\"noImplicitAny\"></a>\n<h3 id=\"noimplicitany-and-suppressimplicitanyindexerrors\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typescript-configuration#noimplicitany-and-suppressimplicitanyindexerrors\"><i class=\"material-icons\">link</i></a><em>noImplicitAny</em> and <em>suppressImplicitAnyIndexErrors</em></h3>\n<p>TypeScript developers disagree about whether the <code>noImplicitAny</code> flag should be <code>true</code> or <code>false</code>.\nThere is no correct answer and you can change the flag later.\nBut your choice now can make a difference in larger projects, so it merits discussion.</p>\n<p>When the <code>noImplicitAny</code> flag is <code>false</code> (the default), and if\nthe compiler cannot infer the variable type based on how it's used,\nthe compiler silently defaults the type to <code>any</code>. That's what is meant by <em>implicit <code>any</code></em>.</p>\n<p>The documentation setup sets the <code>noImplicitAny</code> flag to <code>true</code>.\nWhen the <code>noImplicitAny</code> flag is <code>true</code> and the TypeScript compiler cannot infer\nthe type, it still generates the JavaScript files, but it also <strong>reports an error</strong>.\nMany seasoned developers prefer this stricter setting because type checking catches more\nunintentional errors at compile time.</p>\n<p>You can set a variable's type to <code>any</code> even when the <code>noImplicitAny</code> flag is <code>true</code>.</p>\n<p>When the <code>noImplicitAny</code> flag is <code>true</code>, you may get <em>implicit index errors</em> as well.\nMost developers feel that <em>this particular error</em> is more annoying than helpful.\nYou can suppress them with the following additional flag:</p>\n<code-example format=\".\">\n  \"suppressImplicitAnyIndexErrors\":true\n\n</code-example>\n<p>The documentation setup sets this flag to <code>true</code> as well.</p>\n<a id=\"typings\"></a>\n<h2 id=\"typescript-typings\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typescript-configuration#typescript-typings\"><i class=\"material-icons\">link</i></a>TypeScript Typings</h2>\n<p>Many JavaScript libraries, such as jQuery, the Jasmine testing library, and Angular,\nextend the JavaScript environment with features and syntax\nthat the TypeScript compiler doesn't recognize natively.\nWhen the compiler doesn't recognize something, it throws an error.</p>\n<p>Use <a href=\"https://www.typescriptlang.org/docs/handbook/writing-declaration-files.html\">TypeScript type definition files</a>—<code>d.ts files</code>—to tell the compiler about the libraries you load.</p>\n<p>TypeScript-aware editors leverage these same definition files to display type information about library features.</p>\n<p>Many libraries include definition files in their npm packages where both the TypeScript compiler and editors\ncan find them. Angular is one such library.\nThe <code>node_modules/@angular/core/</code> folder of any Angular application contains several <code>d.ts</code> files that describe parts of Angular.</p>\n<p><strong>You need do nothing to get <em>typings</em> files for library packages that include <code>d.ts</code> files.\nAngular packages include them already.</strong></p>\n<h3 id=\"libdts\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typescript-configuration#libdts\"><i class=\"material-icons\">link</i></a>lib.d.ts</h3>\n<p>TypeScript includes a special declaration file called <code>lib.d.ts</code>. This file contains the ambient declarations for various common JavaScript constructs present in JavaScript runtimes and the DOM.</p>\n<p>Based on the <code>--target</code>, TypeScript adds <em>additional</em> ambient declarations\nlike <code>Promise</code> if the target is <code>es6</code>.</p>\n<p>Since the QuickStart is targeting <code>es5</code>, you can override the\nlist of declaration files to be included:</p>\n<code-example format=\".\">\n  \"lib\": [\"es2015\", \"dom\"]\n\n</code-example>\n<p>Thanks to that, you have all the <code>es6</code> typings even when targeting <code>es5</code>.</p>\n<h3 id=\"installable-typings-files\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typescript-configuration#installable-typings-files\"><i class=\"material-icons\">link</i></a>Installable typings files</h3>\n<p>Many libraries—jQuery, Jasmine, and Lodash among them—do <em>not</em> include <code>d.ts</code> files in their npm packages.\nFortunately, either their authors or community contributors have created separate <code>d.ts</code> files for these libraries and\npublished them in well-known locations.</p>\n<p>You can install these typings via <code>npm</code> using the\n<a href=\"http://www.typescriptlang.org/docs/handbook/declaration-files/consumption.html\"><code>@types/*</code> scoped package</a>\nand Typescript, starting at 2.0, automatically recognizes them.</p>\n<p>For instance, to install typings for <code>jasmine</code> you could do <code>npm install @types/jasmine --save-dev</code>.</p>\n<p>QuickStart identifies two <em>typings</em>, or <code>d.ts</code>, files:</p>\n<ul>\n<li>\n<p><a href=\"http://jasmine.github.io/\">jasmine</a> typings for the Jasmine test framework.</p>\n</li>\n<li>\n<p><a href=\"https://www.npmjs.com/package/@types/node\">node</a> for code that references objects in the <em>nodejs</em> environment;\nyou can view an example in the <a href=\"guide/webpack\">webpack</a> page.</p>\n</li>\n</ul>\n<p>QuickStart doesn't require these typings but many of the samples do.</p>\n\n</div>"
}