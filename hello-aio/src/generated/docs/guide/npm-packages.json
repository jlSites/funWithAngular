{
  "id": "guide/npm-packages",
  "title": "Npm Packages",
  "contents": "\n<div class=\"content\">\n<h1 id=\"npm-packages\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/npm-packages#npm-packages\"><i class=\"material-icons\">link</i></a>Npm Packages</h1>\n<p>Angular applications and Angular itself depend upon features and functionality provided by a variety of third-party packages.\nThese packages are maintained and installed with the Node Package Manager (<a href=\"https://docs.npmjs.com/\">npm</a>).</p>\n<div class=\"l-sub-section\">\n<p>Node.js and npm are essential to Angular development.</p>\n<a href=\"https://docs.npmjs.com/getting-started/installing-node\" title=\"Installing Node.js and updating npm\">\nGet them now</a> if they're not already installed on your machine.\n<p><strong>Verify that you are running node <code>v4.x.x</code> or higher and npm <code>3.x.x</code> or higher</strong>\nby running the commands <code>node -v</code> and <code>npm -v</code> in a terminal/console window.\nOlder versions produce errors.</p>\n<p>Consider using <a href=\"https://github.com/creationix/nvm\">nvm</a> for managing multiple\nversions of node and npm. You may need <a href=\"https://github.com/creationix/nvm\">nvm</a> if\nyou already have projects running on your machine that use other versions of node and npm.</p>\n</div>\n<p>During <a href=\"guide/setup\">Setup</a>, a <a href=\"https://docs.npmjs.com/files/package.json\">package.json</a>\nfile is installed with a comprehensive starter set of\npackages as specified in the <code>dependencies</code> and <code>devDependencies</code> sections.</p>\n<p>You can use other packages but the packages in <em>this particular set</em> work well together and include\neverything you need to build and run the sample applications in this series.</p>\n<div class=\"l-sub-section\">\n<p>Note: A cookbook or guide page may require an additional library such as <em>jQuery</em>.</p>\n</div>\n<p>You'll install more than you need for the QuickStart guide.\nNo worries!\nYou only serve to the client those packages that the application actually requests.</p>\n<p>This page explains what each package does. You can make substitutions later to suit your tastes and experience.</p>\n<h2 id=\"dependencies-and-devdependencies\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/npm-packages#dependencies-and-devdependencies\"><i class=\"material-icons\">link</i></a><em>dependencies</em> and <em>devDependencies</em></h2>\n<p>The <code>package.json</code> includes two sets of packages,\n<a href=\"guide/npm-packages#dependencies\">dependencies</a> and <a href=\"guide/npm-packages#dev-dependencies\">devDependencies</a>.</p>\n<p>The <em>dependencies</em> are essential to <em>running</em> the application.\nThe <em>devDependencies</em> are only necessary to <em>develop</em> the application.\nYou can exclude them from production installations by adding <code>--production</code> to the install command, as follows:</p>\n<code-example format=\".\" language=\"bash\">\n  npm install my-application --production\n\n</code-example>\n<a id=\"dependencies\"></a>\n<h2 id=\"dependencies\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/npm-packages#dependencies\"><i class=\"material-icons\">link</i></a><em>dependencies</em></h2>\n<p>The <code>dependencies</code> section of <code>package.json</code> contains:</p>\n<ul>\n<li>\n<p><strong><em>Features</em></strong>: Feature packages give the application framework and utility capabilities.</p>\n</li>\n<li>\n<p><strong><em>Polyfills</em></strong>: Polyfills plug gaps in the browser's JavaScript implementation.</p>\n</li>\n<li>\n<p><strong><em>Other</em></strong>: Other libraries that support the application such as <code>bootstrap</code> for HTML widgets and styling.</p>\n</li>\n</ul>\n<h3 id=\"feature-packages\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/npm-packages#feature-packages\"><i class=\"material-icons\">link</i></a>Feature Packages</h3>\n<p><strong><em>@angular/core</em></strong>: Critical runtime parts of the framework needed by every application.\nIncludes all metadata decorators, <code><a href=\"api/core/Component\">Component</a></code>, <code><a href=\"api/core/Directive\">Directive</a></code>,  dependency injection, and the component lifecycle hooks.</p>\n<p><strong><em>@angular/common</em></strong>: The commonly needed services, pipes, and directives provided by the Angular team.</p>\n<p><strong><em>@angular/compiler</em></strong>: Angular's <em>Template Compiler</em>.\nIt understands templates and can convert them to code that makes the application run and render.\nTypically you don’t interact with the compiler directly; rather, you use it indirectly via <code>platform-browser-dynamic</code> or the offline template compiler.</p>\n<p><strong><em>@angular/platform-browser</em></strong>: Everything DOM and browser related, especially\nthe pieces that help render into the DOM.\nThis package also includes the <code>bootstrapStatic()</code> method\nfor bootstrapping applications for production builds that pre-compile templates offline.</p>\n<p><strong><em>@angular/platform-browser-dynamic</em></strong>: Includes <a href=\"api/core/Provider\">Providers</a>\nand a <a href=\"guide/ngmodule#bootstrap\">bootstrap</a> method for applications that\ncompile templates on the client. Don’t use offline compilation.\nUse this package for bootstrapping during development and for bootstrapping plunker samples.</p>\n<p><strong><em>@angular/http</em></strong>: Angular's HTTP client.</p>\n<p><strong><em>@angular/router</em></strong>: Component router.</p>\n<p><strong><em>@angular/upgrade</em></strong>: Set of utilities for upgrading AngularJS applications to Angular.</p>\n<p><strong><em><a href=\"https://github.com/systemjs/systemjs\">system.js</a></em></strong>: A dynamic module loader compatible with the\n<a href=\"http://www.2ality.com/2014/09/es6-modules-final.html\">ES2015 module</a> specification.\nOther viable choices include the well-regarded <a href=\"https://webpack.github.io/\">webpack</a>.</p>\n<p>Your future applications are likely to require additional packages that provide\nHTML controls, themes, data access, and various utilities.</p>\n<a id=\"polyfills\"></a>\n<h3 id=\"polyfill-packages\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/npm-packages#polyfill-packages\"><i class=\"material-icons\">link</i></a>Polyfill packages</h3>\n<p>Angular requires certain <a href=\"https://en.wikipedia.org/wiki/Polyfill\">polyfills</a> in the application environment.\nInstall these polyfills using the npm packages that Angular lists in the <em>peerDependencies</em> section of its <code>package.json</code>.</p>\n<p>You must list these packages in the <code>dependencies</code> section of your own <code>package.json</code>.</p>\n<div class=\"l-sub-section\">\n<p>For background on this requirement, see <a href=\"guide/npm-packages#why-peer-dependencies\">Why peerDependencies?</a>.</p>\n</div>\n<p><strong><em>core-js</em></strong>: Patches the global context (window) with essential features of ES2015 (ES6).\nYou may substitute an alternative polyfill that provides the same core APIs.\nWhen these APIs are implemented by the major browsers, this dependency will become unnecessary.</p>\n<p><strong><em>rxjs</em></strong>: A polyfill for the <a href=\"https://github.com/zenparsing/es-observable\">Observables specification</a> currently before the\n<a href=\"http://www.ecma-international.org/memento/TC39.htm\">TC39</a> committee that determines standards for the JavaScript language.\nYou can pick a preferred version of <em>rxjs</em> (within a compatible version range)\nwithout waiting for Angular updates.</p>\n<p><strong><em>zone.js</em></strong>: A polyfill for the <a href=\"https://gist.github.com/mhevery/63fdcdf7c65886051d55\">Zone specification</a> currently before the\n<a href=\"http://www.ecma-international.org/memento/TC39.htm\">TC39</a> committee that determines standards for the JavaScript language.\nYou can pick a preferred version of <em>zone.js</em> to use (within a compatible version range)\nwithout waiting for Angular updates.</p>\n<a id=\"other\"></a>\n<h3 id=\"other-helper-libraries\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/npm-packages#other-helper-libraries\"><i class=\"material-icons\">link</i></a>Other helper libraries</h3>\n<p><strong><em>angular-in-memory-web-api</em></strong>: An Angular-supported library that simulates a remote server's web api\nwithout requiring an actual server or real HTTP calls.\nGood for demos, samples, and early stage development (before you even have a server).\nRead about it in the <a href=\"guide/http#in-mem-web-api\">HTTP Client</a> page.</p>\n<p><strong><em>bootstrap</em></strong>: <a href=\"http://getbootstrap.com/\">Bootstrap</a> is a popular HTML and CSS framework for designing responsive web apps.\nSome of the samples improve their appearance with <em>bootstrap</em>.</p>\n<a id=\"dev-dependencies\"></a>\n<h2 id=\"devdependencies\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/npm-packages#devdependencies\"><i class=\"material-icons\">link</i></a><em>devDependencies</em></h2>\n<p>The packages listed in the <em>devDependencies</em> section of the <code>package.json</code> help you develop the application.\nYou don't have to deploy them with the production application although there is no harm in doing so.</p>\n<p><strong><em><a href=\"https://www.npmjs.com/package/concurrently\">concurrently</a></em></strong>:\nA utility to run multiple <em>npm</em> commands concurrently on OS/X, Windows, and Linux operating systems.</p>\n<p><strong><em><a href=\"https://www.npmjs.com/package/lite-server\">lite-server</a></em></strong>:\nA light-weight, static file server, by <a href=\"http://johnpapa.net/\">John Papa</a>\nwith excellent support for Angular apps that use routing.</p>\n<p><strong><em><a href=\"https://www.npmjs.com/package/typescript\">typescript</a></em></strong>:\nthe TypeScript language server, including the <em>tsc</em> TypeScript compiler.</p>\n<p><strong><em>@types/* </em></strong>: TypeScript definition files.\nLearn more about it in the <a href=\"guide/typescript-configuration#typings\">TypeScript Configuration</a> guide.</p>\n<a id=\"why-peer-dependencies\"></a>\n<h2 id=\"why-peerdependencies\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/npm-packages#why-peerdependencies\"><i class=\"material-icons\">link</i></a>Why <em>peerDependencies</em>?</h2>\n<p>There isn't a <a href=\"https://nodejs.org/en/blog/npm/peer-dependencies/\"><em>peerDependencies</em></a> section in the QuickStart <code>package.json</code>.\nBut Angular has a <em>peerDependencies</em> section in\n<em>its</em> <code>package.json</code>, which has important consequences for your application.</p>\n<p>This section explains why you load the <a href=\"guide/npm-packages#polyfills\">polyfill</a> <em>dependency</em>\npackages in the QuickStart application's <code>package.json</code>,\nand why you'll need those packages in your own applications.</p>\n<p>Packages depend on other packages. For example, your application depends on the Angular package.</p>\n<p>Two packages, \"A\" and \"B\", could depend on the same third package \"C\".\n\"A\" and \"B\" might both list \"C\" among their <em>dependencies</em>.</p>\n<p>What if \"A\" and \"B\" depend on different versions of \"C\" (\"C1\" and \"C2\"). The npm package system supports that.\nIt installs \"C1\" in the <code>node_modules</code> folder for \"A\" and \"C2\" in the <code>node_modules</code> folder for \"B\".\nNow \"A\" and \"B\" have their own copies of \"C\" and they run without interferring with one another.</p>\n<p>But there is a problem. Package \"A\" may require the presence of \"C1\" without actually calling upon it directly.\n\"A\" may only work if <em>everyone is using \"C1\"</em>. It falls down if any part of the application relies on \"C2\".</p>\n<p>The solution is for \"A\" to declare that \"C1\" is a <em>peer dependency</em>.</p>\n<p>The difference between a <code>dependency</code> and a <code>peerDependency</code> is roughly this:</p>\n<blockquote>\n<p>A <strong>dependency</strong> says, \"I need this thing directly available to <em>me</em>.\"</p>\n<p>A <strong>peerDependency</strong> says, \"If you want to use me, you need this thing available to <em>you</em>.\"</p>\n</blockquote>\n<p>The Angular <code>package.json</code> specifies several <em>peer dependency</em> packages,\neach pinned to a particular version of a third-party package.</p>\n<h3 id=\"you-must-install-angulars-peerdependencies-yourself\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/npm-packages#you-must-install-angulars-peerdependencies-yourself\"><i class=\"material-icons\">link</i></a>You must install Angular's <em>peerDependencies</em> yourself.</h3>\n<p>When <em>npm</em> installs packages listed in <em>your</em> <code>dependencies</code> section,\nit also installs the packages listed within <em>their</em> packages <code>dependencies</code> sections.\nThe process is recursive.</p>\n<p>However, as of version 3, <em>npm</em> does <em>not</em> install packages listed in <em>peerDependencies</em> sections.</p>\n<p>This means that when your application installs Angular, <strong><em>npm</em> doesn't automatically install\nthe packages listed in Angular's <em>peerDependencies</em> section</strong>.</p>\n<p>Fortunately, <em>npm</em> issues a warning (a) When any <em>peer dependencies</em> are missing, or (b)\nWhen the application or any of its other dependencies\ninstalls a different version of a <em>peer dependency</em>.</p>\n<p>These warnings guard against accidental failures due to version mismatches.\nThey leave you in control of package and version resolution.</p>\n<p>It is your responsibility to list all <em>peer dependency</em> packages <strong>among your own <em>devDependencies</em></strong>.</p>\n<div class=\"l-sub-section\">\n<h4 id=\"the-future-of-peerdependencies\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/npm-packages#the-future-of-peerdependencies\"><i class=\"material-icons\">link</i></a>The future of <em>peerDependencies</em></h4>\n<p>The Angular polyfill dependencies are hard requirements. Currently, there is no way to make them optional.</p>\n<p>However, there is an npm feature request for \"optional peerDependencies,\" which would allow you to model this relationship better.\nWhen this feature request is implemented, Angular will switch from <em>peerDependencies</em> to <em>optionalPeerDependencies</em> for all polyfills.</p>\n</div>\n\n</div>"
}