{
  "id": "guide/ts-to-js",
  "title": "TypeScript to JavaScript",
  "contents": "\n<div class=\"content\">\n<h1 id=\"typescript-to-javascript\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ts-to-js#typescript-to-javascript\"><i class=\"material-icons\">link</i></a>TypeScript to JavaScript</h1>\n<h2 id=\"introduction\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ts-to-js#introduction\"><i class=\"material-icons\">link</i></a>Introduction</h2>\n<p>Anything you can do with Angular in <em>TypeScript</em>, you can also do\nin JavaScript. Translating from one language to the other is mostly a\nmatter of changing the way you organize your code and access Angular APIs.</p>\n<p><em>TypeScript</em> is a popular language option for Angular development.\nMost code examples on the Internet as well as on this site are written in <em>TypeScript</em>.\nThis cookbook contains recipes for translating <em>TypeScript</em>\ncode examples to <em>ES6</em> and to <em>ES5</em> so that JavaScript developers\ncan read and write Angular apps in their preferred dialect.</p>\n<p>Run and compare the live <live-example name=\"ts-to-js/ts\">TypeScript</live-example> and <live-example name=\"ts-to-js/js\">JavaScript</live-example>\ncode shown in this cookbook.</p>\n<h2 id=\"typescript-to-es6-to-es5\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ts-to-js#typescript-to-es6-to-es5\"><i class=\"material-icons\">link</i></a><em>TypeScript</em> to <em>ES6</em> to <em>ES5</em></h2>\n<p><em>TypeScript</em>\n<a href=\"https://www.typescriptlang.org\" title=\"&#x22;TypeScript is a typed, superset of JavaScript&#x22;\">is a typed superset of <em>ES6 JavaScript</em></a>.\n<em>ES6 JavaScript</em> is a superset of <em>ES5 JavaScript</em>. <em>ES5</em> is the kind of JavaScript that runs natively in all modern browsers.\nThe transformation of <em>TypeScript</em> code all the way down to <em>ES5</em> code can be seen as \"shedding\" features.</p>\n<p>The downgrade progression is as follows:</p>\n<ul>\n<li><em>TypeScript</em> to <em>ES6-with-decorators</em>.</li>\n<li><em>ES6-with-decorators</em> to <em>ES6-without-decorators</em> (\"<em>plain ES6</em>\").</li>\n<li><em>ES6-without-decorators</em> to <em>ES5</em>.</li>\n</ul>\n<p>When translating from <em>TypeScript</em> to <em>ES6-with-decorators</em>, remove\n<a href=\"http://www.typescriptlang.org/docs/handbook/classes.html#public-private-and-protected-modifiers\">class property access modifiers</a>\nsuch as <code>public</code> and <code>private</code>.\nRemove most of the\n<a href=\"https://www.typescriptlang.org/docs/handbook/basic-types.html\">type declarations</a>,\nsuch as <code>:string</code> and <code>:boolean</code>\nbut <strong>keep the constructor parameter types, which are used for dependency injection</strong>.</p>\n<p>From <em>ES6-with-decorators</em> to <em>plain ES6</em>, remove all\n<a href=\"https://www.typescriptlang.org/docs/handbook/decorators.html\">decorators</a>\nand the remaining types.\nYou must declare properties in the class constructor (<code>this.title = '...'</code>) rather than in the body of the class.</p>\n<p>Finally, from <em>plain ES6</em> to <em>ES5</em>, the main missing features are <code>import</code>\nstatements and <code>class</code> declarations.</p>\n<p>For <em>plain ES6</em> transpilation you can <em>start</em> with a setup similar to the\n<a href=\"https://github.com/angular/quickstart\"><em>TypeScript</em> quickstart</a> and adjust the application code accordingly.\nTranspile with <a href=\"https://babeljs.io/\">Babel</a> using the <code>es2015</code> preset.\nTo use decorators and annotations with Babel, install the\n<a href=\"https://github.com/shuhei/babel-plugin-angular2-annotations\"><code>angular2</code></a> preset as well.</p>\n<a id=\"modularity\"></a>\n<h2 id=\"importing-and-exporting\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ts-to-js#importing-and-exporting\"><i class=\"material-icons\">link</i></a>Importing and Exporting</h2>\n<h3 id=\"importing-angular-code\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ts-to-js#importing-angular-code\"><i class=\"material-icons\">link</i></a>Importing Angular Code</h3>\n<p>In both <em>TypeScript</em> and <em>ES6</em>, you import Angular classes, functions, and other members with <em>ES6</em> <code>import</code> statements.</p>\n<p>In <em>ES5</em>, you access the Angular entities of the <a href=\"guide/glossary#scoped-package\">the Angular packages</a>\nthrough the global <code>ng</code> object.\nAnything you can import from <code>@angular</code> is a nested member of this <code>ng</code> object:</p>\n<code-tabs>\n  <code-pane title=\"TypeScript\" path=\"ts-to-js/ts/src/app/app.module.ts\" region=\"ng2import\">\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport {\n  LocationStrategy,\n  HashLocationStrategy\n} from '@angular/common';\n\n</code-pane>\n  <code-pane title=\"ES6 + Decorators\" path=\"ts-to-js/js-es6-decorators/src/app/app.module.es6\" region=\"ng2import\">\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport {\n  LocationStrategy,\n  HashLocationStrategy\n} from '@angular/common';\n\n</code-pane>\n  <code-pane title=\"ES6 JavaScript\" path=\"ts-to-js/js-es6/src/app/app.module.es6\" region=\"ng2import\">\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport {\n  LocationStrategy,\n  HashLocationStrategy\n} from '@angular/common';\n\n</code-pane>\n  <code-pane title=\"ES5 JavaScript\" path=\"ts-to-js/js/src/app/app.module.js\" region=\"ng2import\">\nvar platformBrowserDynamic = ng.platformBrowserDynamic.platformBrowserDynamic;\nvar LocationStrategy = ng.common.LocationStrategy;\nvar HashLocationStrategy = ng.common.HashLocationStrategy;\n\n</code-pane>\n</code-tabs>\n<h3 id=\"exporting-application-code\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ts-to-js#exporting-application-code\"><i class=\"material-icons\">link</i></a>Exporting application code</h3>\n<p>Each file in a <em>TypeScript</em> or <em>ES6</em> Angular application constitutes an <em>ES6</em> module.\nWhen you want to make something available to other modules, you <code>export</code> it.</p>\n<p><em>ES5</em> lacks native support for modules.\nIn an Angular <em>ES5</em> application, you load each file manually by adding a <code>&#x3C;script></code> tag to <code>index.html</code>.</p>\n<div class=\"alert is-important\">\n<p>  The order of <code>&#x3C;script></code> tags is often significant.\nYou must load a file that defines a public JavaScript entity before a file that references that entity.</p>\n</div>\n<p>The best practice in <em>ES5</em> is to create a form of modularity that avoids polluting the global scope.\nAdd one application namespace object such as <code>app</code> to the global <code>document</code>.\nThen each code file \"exports\" public entities by attaching them to that namespace object, for example, <code>app.HeroComponent</code>.\nYou could factor a large application into several sub-namespaces\nwhich leads to \"exports\" along the lines of <code>app.heroQueries.HeroComponent</code>.</p>\n<p>Every <em>ES5</em> file should wrap code in an\n<a href=\"https://en.wikipedia.org/wiki/Immediately-invoked_function_expression\">Immediately Invoked Function Expression (IIFE)</a>\nto limit unintentional leaking of private symbols into the global scope.</p>\n<p>Here is a <code>HeroComponent</code> as it might be defined and \"exported\" in each of the four language variants.</p>\n<code-tabs>\n  <code-pane title=\"TypeScript\" path=\"ts-to-js/ts/src/app/hero.component.ts\" region=\"appexport\">\nexport class HeroComponent {\n  title = 'Hero Detail';\n  getName() {return 'Windstorm'; }\n}\n\n</code-pane>\n  <code-pane title=\"ES6 + Decorators\" path=\"ts-to-js/js-es6-decorators/src/app/hero.component.es6\" region=\"appexport\">\nexport class HeroComponent {\n  title = 'Hero Detail';\n  getName() {return 'Windstorm'; }\n}\n\n</code-pane>\n  <code-pane title=\"ES6 JavaScript\" path=\"ts-to-js/js-es6/src/app/hero.component.es6\" region=\"appexport\">\nexport class HeroComponent {\n  constructor() {\n    this.title = 'Hero Detail';\n  }\n  getName() {return 'Windstorm'; }\n}\n\n</code-pane>\n  <code-pane title=\"ES5 JavaScript\" path=\"ts-to-js/js/src/app/hero.component.js\" region=\"appexport\">\napp.HeroComponent = HeroComponent; // \"export\"\n\nHeroComponent.annotations = [\n  new ng.core.Component({\n    selector: 'hero-view',\n    template: '&#x3C;h1>{{title}}: {{getName()}}&#x3C;/h1>'\n  })\n];\n\nfunction HeroComponent() {\n  this.title = \"Hero Detail\";\n}\n\nHeroComponent.prototype.getName = function() { return 'Windstorm'; };\n\n\n</code-pane>\n</code-tabs>\n<h3 id=\"importing-application-code\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ts-to-js#importing-application-code\"><i class=\"material-icons\">link</i></a>Importing application Code</h3>\n<p>In <em>TypeScript</em> and <em>ES6</em> apps, you <code>import</code> things that have been exported from other modules.</p>\n<p>In <em>ES5</em> you use the shared namespace object to access \"exported\" entities from other files.</p>\n<code-tabs>\n  <code-pane title=\"TypeScript\" path=\"ts-to-js/ts/src/app/app.module.ts\" region=\"appimport\">\nimport { HeroComponent } from './hero.component';\n\n</code-pane>\n  <code-pane title=\"ES6 + Decorators\" path=\"ts-to-js/js-es6-decorators/src/app/app.module.es6\" region=\"appimport\">\nimport { HeroComponent } from './hero.component';\n\n</code-pane>\n  <code-pane title=\"ES6 JavaScript\" path=\"ts-to-js/js-es6/src/app/app.module.es6\" region=\"appimport\">\nimport { HeroComponent } from './hero.component';\n\n\n</code-pane>\n  <code-pane title=\"ES5 JavaScript\" path=\"ts-to-js/js/src/app/app.module.js\" region=\"appimport\">\nvar HeroComponent = app.HeroComponent;\n\n</code-pane>\n</code-tabs>\n<div class=\"alert is-helpful\">\n<p>  Alternatively, you can use a module loader such as Webpack or\nBrowserify in an Angular JavaScript project. In such a project, you   would\nuse <em>CommonJS</em> modules and the <code>require</code> function to load Angular   framework code.\nThen use <code>module.exports</code> and <code>require</code> to export and import  application  code.</p>\n</div>\n<a id=\"class-metadata\"></a>\n<h2 id=\"classes-and-class-metadata\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ts-to-js#classes-and-class-metadata\"><i class=\"material-icons\">link</i></a>Classes and Class Metadata</h2>\n<h3 id=\"classes\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ts-to-js#classes\"><i class=\"material-icons\">link</i></a>Classes</h3>\n<p>Most Angular <em>TypeScript</em> and <em>ES6</em> code is written as classes.</p>\n<p>Properties and method parameters of <em>TypeScript</em> classes may be marked with the access modifiers\n<code>private</code>, <code>internal</code>, and <code>public</code>.\nRemove these modifiers when translating to JavaScript.</p>\n<p>Most type declarations, for example, <code>:string</code> and <code>:boolean</code>, should be removed when translating to JavaScript.\nWhen translating to <em>ES6-with-decorators</em>, <strong><em>do not remove types from constructor parameters!</em></strong></p>\n<p>Look for types in <em>TypeScript</em> property declarations.\nIn general it is better to initialize such properties with default values because\nmany browser JavaScript engines can generate more performant code.\nWhen <em>TypeScript</em> code follows this same advice, it can infer the property types\nand there is nothing to remove during translation.</p>\n<p>In <em>ES6-without-decorators</em>, properties of classes must be assigned inside the constructor.</p>\n<p><em>ES5</em> JavaScript has no classes.\nUse the constructor function pattern instead, adding methods to the prototype.</p>\n<code-tabs>\n  <code-pane title=\"TypeScript\" path=\"ts-to-js/ts/src/app/hero.component.ts\" region=\"class\">\nexport class HeroComponent {\n  title = 'Hero Detail';\n  getName() {return 'Windstorm'; }\n}\n\n</code-pane>\n  <code-pane title=\"ES6 + Decorators\" path=\"ts-to-js/js-es6-decorators/src/app/hero.component.es6\" region=\"class\">\nexport class HeroComponent {\n  title = 'Hero Detail';\n  getName() {return 'Windstorm'; }\n}\n\n</code-pane>\n  <code-pane title=\"ES6 JavaScript\" path=\"ts-to-js/js-es6/src/app/hero.component.es6\" region=\"class\">\nexport class HeroComponent {\n  constructor() {\n    this.title = 'Hero Detail';\n  }\n  getName() {return 'Windstorm'; }\n}\n\n</code-pane>\n  <code-pane title=\"ES5 JavaScript\" path=\"ts-to-js/js/src/app/hero.component.js\" region=\"constructorproto\">\nfunction HeroComponent() {\n  this.title = \"Hero Detail\";\n}\n\nHeroComponent.prototype.getName = function() { return 'Windstorm'; };\n\n</code-pane>\n</code-tabs>\n<h3 id=\"metadata\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ts-to-js#metadata\"><i class=\"material-icons\">link</i></a>Metadata</h3>\n<p>When writing in <em>TypeScript</em> or <em>ES6-with-decorators</em>,\nprovide configuration and metadata by adorning a class with one or more <em>decorators</em>.\nFor example, you supply metadata to a component class by preceding its definition with a\n<a href=\"api/core/Component\"><code>@Component</code></a> decorator function whose\nargument is an object literal with metadata properties.</p>\n<p>In <em>plain ES6</em>, you provide metadata by attaching an <code>annotations</code> array to the <em>class</em>.\nEach item in the array is a new instance of a metadata decorator created with a similar metadata object literal.</p>\n<p>In <em>ES5</em>, you also provide an <code>annotations</code> array but you attach it to the <em>constructor function</em> rather than to a class.</p>\n<p>See these variations side-by-side:</p>\n<code-tabs>\n  <code-pane title=\"TypeScript\" path=\"ts-to-js/ts/src/app/hero.component.ts\" region=\"metadata\">\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'hero-view',\n  template: '&#x3C;h1>{{title}}: {{getName()}}&#x3C;/h1>'\n})\nexport class HeroComponent {\n  title = 'Hero Detail';\n  getName() {return 'Windstorm'; }\n}\n\n</code-pane>\n  <code-pane title=\"ES6 + Decorators\" path=\"ts-to-js/js-es6-decorators/src/app/hero.component.es6\" region=\"metadata\">\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'hero-view',\n  template: '&#x3C;h1>{{title}}: {{getName()}}&#x3C;/h1>'\n})\nexport class HeroComponent {\n  title = 'Hero Detail';\n  getName() {return 'Windstorm'; }\n}\n\n</code-pane>\n  <code-pane title=\"ES6 JavaScript\" path=\"ts-to-js/js-es6/src/app/hero.component.es6\" region=\"metadata\">\nimport { Component } from '@angular/core';\n\nexport class HeroComponent {\n  constructor() {\n    this.title = 'Hero Detail';\n  }\n  getName() {return 'Windstorm'; }\n}\n\nHeroComponent.annotations = [\n  new Component({\n    selector: 'hero-view',\n    template: '&#x3C;h1>{{title}}: {{getName()}}&#x3C;/h1>'\n  })\n];\n\n</code-pane>\n  <code-pane title=\"ES5 JavaScript\" path=\"ts-to-js/js/src/app/hero.component.js\" region=\"metadata\">\napp.HeroComponent = HeroComponent; // \"export\"\n\nHeroComponent.annotations = [\n  new ng.core.Component({\n    selector: 'hero-view',\n    template: '&#x3C;h1>{{title}}: {{getName()}}&#x3C;/h1>'\n  })\n];\n\nfunction HeroComponent() {\n  this.title = \"Hero Detail\";\n}\n\nHeroComponent.prototype.getName = function() { return 'Windstorm'; };\n\n\n</code-pane>\n</code-tabs>\n<h2 id=\"external-template-file\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ts-to-js#external-template-file\"><i class=\"material-icons\">link</i></a>External template file</h2>\n<p>A large component template is often kept in a separate template file.</p>\n<code-example path=\"ts-to-js/ts/src/app/hero-title.component.html\" title=\"src/app/hero-title.component.html\" linenums=\"false\">\n&#x3C;h1>{{titlePrefix}} {{title}}&#x3C;/h1>\n&#x3C;button (click)=\"ok()\">OK&#x3C;/button>\n&#x3C;p>{{ msg }}&#x3C;/p>\n\n\n</code-example>\n<p>The component, <code>HeroTitleComponent</code> in this case, then references the template file in its metadata <code>templateUrl</code> property:</p>\n<code-tabs>\n  <code-pane title=\"TypeScript\" path=\"ts-to-js/ts/src/app/hero-title.component.ts\" region=\"templateUrl\">\n@Component({\n  selector: 'hero-title',\n  templateUrl: './hero-title.component.html'\n})\n\n</code-pane>\n  <code-pane title=\"ES6 + Decorators\" path=\"ts-to-js/js-es6-decorators/src/app/hero-title.component.es6\" region=\"templateUrl\">\n@Component({\n  selector: 'hero-title',\n  templateUrl: './hero-title.component.html'\n})\n\n</code-pane>\n  <code-pane title=\"ES6 JavaScript\" path=\"ts-to-js/js-es6/src/app/hero-title.component.es6\" region=\"templateUrl\">\nHeroTitleComponent.annotations = [\n  new Component({\n    selector: 'hero-title',\n    templateUrl: './hero-title.component.html'\n  })\n];\n\n</code-pane>\n  <code-pane title=\"ES5 JavaScript\" path=\"ts-to-js/js/src/app/hero-title.component.js\" region=\"templateUrl\">\nHeroTitleComponent.annotations = [\n  new ng.core.Component({\n    selector: 'hero-title',\n    templateUrl: 'app/hero-title.component.html'\n  })\n];\n\n</code-pane>\n</code-tabs>\n<p>Note that both the <em>TypeScript</em> and <em>ES6</em> <code>templateUrl</code> properties identify the location of the template file <em>relative to the component module</em>.</p>\n<a id=\"dsl\"></a>\n<h2 id=\"es5-dsl\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ts-to-js#es5-dsl\"><i class=\"material-icons\">link</i></a><em>ES5</em> DSL</h2>\n<p>This <em>ES5</em> pattern of creating a constructor and annotating it with metadata is so common that Angular\nprovides a convenience API to make it a little more compact and locates the metadata above the constructor,\nas you would if you wrote in <em>TypeScript</em> or <em>ES6-with-decorators</em>.</p>\n<p>This <em>API</em> (<em>Application Programming Interface</em>) is commonly known as the <em>ES5 DSL</em> (<em>Domain Specific Language</em>).</p>\n<p>Set an application namespace property, for example, <code>app.HeroDslComponent</code>, to the result of an <code>ng.core.Component</code> function call.\nPass the same metadata object to <code>ng.core.Component</code> as you did before.\nThen chain a call to the <code>Class()</code> method which takes an object defining the class constructor and instance methods.</p>\n<p>Here is an example of the <code>HeroComponent</code>, re-written with the DSL,\nnext to the original <em>ES5</em> version for comparison:</p>\n<code-tabs>\n  <code-pane title=\"ES5 JavaScript with DSL\" path=\"ts-to-js/js/src/app/hero.component.js\" region=\"dsl\">\napp.HeroComponent = ng.core.Component({\n  selector: 'hero-view-dsl',\n  template: '&#x3C;h1>{{title}}: {{getName()}}&#x3C;/h1>',\n})\n.Class({\n  constructor: function HeroComponent() {\n    this.title = \"Hero Detail\";\n  },\n\n  getName: function() { return 'Windstorm'; }\n});\n\n</code-pane>\n  <code-pane title=\"ES5 JavaScript\" path=\"ts-to-js/js/src/app/hero.component.js\">\napp.HeroComponent = HeroComponent; // \"export\"\n\nHeroComponent.annotations = [\n  new ng.core.Component({\n    selector: 'hero-view',\n    template: '&#x3C;h1>{{title}}: {{getName()}}&#x3C;/h1>'\n  })\n];\n\nfunction HeroComponent() {\n  this.title = \"Hero Detail\";\n}\n\nHeroComponent.prototype.getName = function() { return 'Windstorm'; };\n\n\n</code-pane>\n</code-tabs>\n<div class=\"callout is-helpful\">\n<p>  <a id=\"name-constructor\"></a></p>\n<h3 id=\"name-the-constructor\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ts-to-js#name-the-constructor\"><i class=\"material-icons\">link</i></a>Name the constructor</h3>\n<p>  A <strong>named</strong> constructor displays clearly in the console log\nif the component throws a runtime error.\nAn <strong>unnamed</strong> constructor displays as an anonymous function, for   example, <code>class0</code>,\nwhich is impossible to find in the source code.</p>\n</div>\n<a id=\"getters-setters\"></a>\n<h3 id=\"properties-with-getters-and-setters\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ts-to-js#properties-with-getters-and-setters\"><i class=\"material-icons\">link</i></a>Properties with getters and setters</h3>\n<p><em>TypeScript</em> and <em>ES6</em> support with getters and setters.\nHere's an example of a read-only <em>TypeScript</em> property with a getter\nthat prepares a toggle-button label for the next clicked state:</p>\n<code-example path=\"ts-to-js/ts/src/app/hero-queries.component.ts\" region=\"defined-property\" title=\"ts/src/app/hero-queries.component.ts\" linenums=\"false\">\nget buttonLabel() {\n  return this.active ? 'Deactivate' : 'Activate';\n}\n\n</code-example>\n<p>This <em>TypeScript</em> \"getter\" property is transpiled to an <em>ES5</em>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\" title=\"Defined Properties\">defined property</a>.\nThe <em>ES5 DSL</em> does not support <em>defined properties</em> directly\nbut you can still create them by extracting the \"class\" prototype and\nadding the <em>defined property</em> in raw JavaScript like this:</p>\n<code-example path=\"ts-to-js/js/src/app/hero-queries.component.js\" region=\"defined-property\" title=\"js/src/app/hero-queries.component.ts\" linenums=\"false\">\n// add prototype property w/ getter outside the DSL\nvar proto = app.heroQueries.HeroQueriesComponent.prototype;\nObject.defineProperty(proto, \"buttonLabel\", {\n    get: function () {\n        return this.active ? 'Deactivate' : 'Activate';\n    },\n    enumerable: true\n});\n\n</code-example>\n<a id=\"dsl-other\"></a>\n<h3 id=\"dsl-for-other-classes\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ts-to-js#dsl-for-other-classes\"><i class=\"material-icons\">link</i></a>DSL for other classes</h3>\n<p>There are similar DSLs for other decorated classes.\nYou can define a directive with <code>ng.core.Directive</code>:</p>\n<code-example>\n  app.MyDirective = ng.core.Directive({\n    selector: '[myDirective]'\n  }).Class({\n    ...\n  });\n</code-example>\n<p>and a pipe with <code>ng.core.Pipe</code>:</p>\n<code-example>\n  app.MyPipe = ng.core.Pipe({\n    name: 'myPipe'\n  }).Class({\n    ...\n  });\n</code-example>\n<a id=\"interfaces\"></a>\n<h2 id=\"interfaces\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ts-to-js#interfaces\"><i class=\"material-icons\">link</i></a>Interfaces</h2>\n<p>A <em>TypeScript</em> interface helps ensure that a class implements the interface's members correctly.\nAlways try to use Angular interfaces where appropriate.\nFor example, the component class that implements the <code>ngOnInit</code> lifecycle hook method\nshould implement the <code><a href=\"api/core/OnInit\">OnInit</a></code> interface.</p>\n<p><em>TypeScript</em> interfaces exist for developer convenience and are not used by Angular at runtime.\nThey have no physical manifestation in the generated JavaScript code.\nJust implement the methods and ignore interfaces when translating code samples from <em>TypeScript</em> to JavaScript.</p>\n<code-tabs>\n  <code-pane title=\"TypeScript\" path=\"ts-to-js/ts/src/app/hero-lifecycle.component.ts\">\nimport { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'hero-lifecycle',\n  template: `&#x3C;h1>Hero: {{name}}&#x3C;/h1>`\n})\nexport class HeroComponent implements OnInit {\n  name: string;\n  ngOnInit() {\n    // todo: fetch from server async\n    setTimeout(() => this.name = 'Windstorm', 0);\n  }\n}\n\n\n</code-pane>\n  <code-pane title=\"ES6 + Decorators\" path=\"ts-to-js/js-es6-decorators/src/app/hero-lifecycle.component.es6\">\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'hero-lifecycle',\n  template: `&#x3C;h1>Hero: {{name}}&#x3C;/h1>`\n})\nexport class HeroComponent {\n  name = '';\n  ngOnInit() {\n    // todo: fetch from server async\n    setTimeout(() => this.name = 'Windstorm', 0);\n  }\n}\n\n\n</code-pane>\n  <code-pane title=\"ES6 JavaScript\" path=\"ts-to-js/js-es6/src/app/hero-lifecycle.component.es6\">\nimport { Component } from '@angular/core';\nexport class HeroComponent {\n  ngOnInit() {\n    // todo: fetch from server async\n    setTimeout(() => this.name = 'Windstorm', 0);\n  }\n}\n\nHeroComponent.annotations = [\n  new Component({\n    selector: 'hero-lifecycle',\n    template: `&#x3C;h1>Hero: {{name}}&#x3C;/h1>`\n  })\n];\n\n\n</code-pane>\n  <code-pane title=\"ES5 JavaScript\" path=\"ts-to-js/js/src/app/hero-lifecycle.component.js\">\napp.HeroComponent = HeroComponent;\n\nHeroComponent.annotations = [\n  new ng.core.Component({\n    selector: 'hero-lifecycle',\n    template: '&#x3C;h1>Hero: {{name}}&#x3C;/h1>'\n  })\n];\n\nfunction HeroComponent() { }\n\nHeroComponent.prototype.ngOnInit = function() {\n  // todo: fetch from server async\n  setTimeout(() => this.name = 'Windstorm', 0);\n};\n\n</code-pane>\n  <code-pane title=\"ES5 JavaScript with DSL\" path=\"ts-to-js/js/src/app/hero-lifecycle.component.js\" region=\"dsl\">\napp.HeroComponent = ng.core.Component({\n  selector: 'hero-lifecycle-dsl',\n  template: '&#x3C;h1>Hero: {{name}}&#x3C;/h1>'\n})\n.Class({\n  constructor: function HeroComponent() { },\n  ngOnInit: function() {\n    // todo: fetch from server async\n    setTimeout(() => this.name = 'Windstorm', 0);\n  }\n});\n\n</code-pane>\n</code-tabs>\n<a id=\"io-decorators\"></a>\n<h2 id=\"input-and-output-metadata\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ts-to-js#input-and-output-metadata\"><i class=\"material-icons\">link</i></a>Input and Output Metadata</h2>\n<h3 id=\"input-and-output-decorators\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ts-to-js#input-and-output-decorators\"><i class=\"material-icons\">link</i></a>Input and Output Decorators</h3>\n<p>In <em>TypeScript</em> and <em>ES6-with-decorators</em>, you often add metadata to class <em>properties</em> with <em>property decorators</em>.\nFor example, you apply <a href=\"guide/template-syntax#inputs-outputs\"><code>@Input</code> and <code>@Output</code> property decorators</a>\nto public class properties that will be the target of data binding expressions in parent components.</p>\n<p>There is no equivalent of a property decorator in <em>ES5</em> or <em>plain ES6</em>.\nFortunately, every property decorator has an equivalent representation in a class decorator metadata property.\nA <em>TypeScript</em> <code>@Input</code> property decorator can be represented by an item in the <code><a href=\"api/core/Component\">Component</a></code> metadata's <code>inputs</code> array.</p>\n<p>You already know how to add <code><a href=\"api/core/Component\">Component</a></code> or <code><a href=\"api/core/Directive\">Directive</a></code> class metadata in <em>any</em> JavaScript dialect so\nthere's nothing fundamentally new about adding another property.\nBut note that what would have been <em>separate</em> <code>@Input</code> and <code>@Output</code> property decorators for each class property are\ncombined in the metadata <code>inputs</code> and <code>outputs</code> <em>arrays</em>.</p>\n<code-tabs>\n  <code-pane title=\"TypeScript\" path=\"ts-to-js/ts/src/app/confirm.component.ts\">\n@Component({\n  selector: 'app-confirm',\n  templateUrl: './confirm.component.html'\n})\nexport class ConfirmComponent {\n  @Input() okMsg = '';\n  @Input('cancelMsg') notOkMsg = '';\n  @Output() ok = new EventEmitter();\n  @Output('cancel') notOk = new EventEmitter();\n\n  onOkClick() {\n    this.ok.emit(true);\n  }\n  onNotOkClick() {\n    this.notOk.emit(true);\n  }\n}\n\n</code-pane>\n  <code-pane title=\"ES6 + Decorators\" path=\"ts-to-js/js-es6-decorators/src/app/confirm.component.es6\">\n@Component({\n  selector: 'app-confirm',\n  templateUrl: './confirm.component.html'\n})\nexport class ConfirmComponent {\n  @Input() okMsg = '';\n  @Input('cancelMsg') notOkMsg = '';\n  @Output() ok = new EventEmitter();\n  @Output('cancel') notOk = new EventEmitter();\n\n  onOkClick() {\n    this.ok.emit(true);\n  }\n  onNotOkClick() {\n    this.notOk.emit(true);\n  }\n}\n\n</code-pane>\n  <code-pane title=\"ES6 JavaScript\" path=\"ts-to-js/js-es6/src/app/confirm.component.es6\">\nexport class ConfirmComponent {\n  constructor(){\n    this.ok    = new EventEmitter();\n    this.notOk = new EventEmitter();\n  }\n  onOkClick() {\n    this.ok.emit(true);\n  }\n  onNotOkClick() {\n    this.notOk.emit(true);\n  }\n}\n\nConfirmComponent.annotations = [\n  new Component({\n    selector: 'app-confirm',\n    templateUrl: './confirm.component.html',\n    inputs: [\n      'okMsg',\n      'notOkMsg: cancelMsg'\n    ],\n    outputs: [\n      'ok',\n      'notOk: cancel'\n    ]\n  })\n];\n\n</code-pane>\n  <code-pane title=\"ES5 JavaScript\" path=\"ts-to-js/js/src/app/confirm.component.js\">\napp.ConfirmComponent = ConfirmComponent;\n\nConfirmComponent.annotations = [\n  new ng.core.Component({\n    selector: 'app-confirm',\n    templateUrl: 'app/confirm.component.html',\n    inputs: [\n      'okMsg',\n      'notOkMsg: cancelMsg'\n    ],\n    outputs: [\n      'ok',\n      'notOk: cancel'\n    ]\n  })\n];\n\nfunction ConfirmComponent() {\n  this.ok    = new ng.core.EventEmitter();\n  this.notOk = new ng.core.EventEmitter();\n}\n\nConfirmComponent.prototype.onOkClick = function() {\n  this.ok.emit(true);\n}\n\nConfirmComponent.prototype.onNotOkClick = function() {\n  this.notOk.emit(true);\n}\n\n</code-pane>\n  <code-pane title=\"ES5 JavaScript with DSL\" path=\"ts-to-js/js/src/app/confirm.component.js\" region=\"dsl\">\napp.ConfirmComponent = ng.core.Component({\n  selector: 'app-confirm-dsl',\n  templateUrl: 'app/confirm.component.html',\n  inputs: [\n    'okMsg',\n    'notOkMsg: cancelMsg'\n  ],\n  outputs: [\n    'ok',\n    'notOk: cancel'\n  ]\n})\n.Class({\n  constructor: function ConfirmComponent() {\n    this.ok    = new ng.core.EventEmitter();\n    this.notOk = new ng.core.EventEmitter();\n  },\n\n  onOkClick: function() {\n    this.ok.emit(true);\n  },\n\n  onNotOkClick: function() {\n    this.notOk.emit(true);\n  }\n});\n\n</code-pane>\n</code-tabs>\n<p>In the previous example, one of the public-facing binding names, <code>cancelMsg</code>,\ndiffers from the corresponding class property name, <code>notOkMsg</code>.\nThat's OK but you must tell Angular about it so that it can map an external binding of <code>cancelMsg</code>\nto the component's <code>notOkMsg</code> property.</p>\n<p>In <em>TypeScript</em> and <em>ES6-with-decorators</em>,\nyou specify the special binding name in the argument to the property decorator.</p>\n<p>In <em>ES5</em> and <em>plain ES6</em> code, convey this pairing with the <code>propertyName: bindingName</code> syntax in the class metadata.</p>\n<a id=\"dependency-injection\"></a>\n<h2 id=\"dependency-injection\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ts-to-js#dependency-injection\"><i class=\"material-icons\">link</i></a>Dependency injection</h2>\n<p>Angular relies heavily on <a href=\"guide/dependency-injection\">Dependency Injection</a> to provide services to the objects it creates.\nWhen Angular creates a new component, directive, pipe or another service,\nit sets the class constructor parameters to instances of services provided by an <em>Injector</em>.</p>\n<p>The developer must tell Angular what to inject into each parameter.</p>\n<a id=\"injection-class-type\"></a>\n<h3 id=\"injection-by-class-type\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ts-to-js#injection-by-class-type\"><i class=\"material-icons\">link</i></a>Injection by class type</h3>\n<p>The easiest and most popular technique in <em>TypeScript</em> and <em>ES6-with-decorators</em> is to set the constructor parameter type\nto the class associated with the service to inject.</p>\n<p>The <em>TypeScript</em> transpiler writes parameter type information into the generated JavaScript.\nAngular reads that information at runtime and locates the corresponding service in the appropriate <em>Injector</em>.\nThe <em>ES6-with-decorators</em> transpiler does essentially the same thing using the same parameter-typing syntax.</p>\n<p><em>ES5</em> and <em>plain ES6</em> lack types so you must identify \"injectables\" by attaching a <strong><code>parameters</code></strong> array to the constructor function.\nEach item in the array specifies the service's injection token.</p>\n<p>As with <em>TypeScript</em>, the most popular token is a class,\nor rather a <em>constructor function</em> that represents a class in <em>ES5</em> and <em>plain ES6</em>.\nThe format of the <code>parameters</code> array varies:</p>\n<ul>\n<li><em>Plain ES6</em>—nest each constructor function in a sub-array.</li>\n<li><em>ES5</em>—simply list the constructor functions.</li>\n</ul>\n<p>When writing with <em>ES5 DSL</em>, set the <code>Class.constructor</code> property to\nan array whose first parameters are the injectable constructor functions and whose\nlast parameter is the class constructor itself.\nThis format should be familiar to AngularJS developers.</p>\n<code-tabs>\n  <code-pane title=\"TypeScript\" path=\"ts-to-js/ts/src/app/hero-di.component.ts\">\nimport { Component }   from '@angular/core';\nimport { DataService } from './data.service';\n\n@Component({\n  selector: 'hero-di',\n  template: `&#x3C;h1>Hero: {{name}}&#x3C;/h1>`\n})\nexport class HeroComponent {\n  name = '';\n  constructor(dataService: DataService) {\n    this.name = dataService.getHeroName();\n  }\n}\n\n</code-pane>\n  <code-pane title=\"ES6 + Decorators\" path=\"ts-to-js/js-es6-decorators/src/app/hero-di.component.es6\">\nimport { Component }   from '@angular/core';\nimport { DataService } from './data.service';\n\n@Component({\n  selector: 'hero-di',\n  template: `&#x3C;h1>Hero: {{name}}&#x3C;/h1>`\n})\nexport class HeroComponent {\n  name = '';\n  constructor(dataService: DataService) {\n    this.name = dataService.getHeroName();\n  }\n}\n\n</code-pane>\n  <code-pane title=\"ES6 JavaScript\" path=\"ts-to-js/js-es6/src/app/hero-di.component.es6\">\nimport { Component }   from '@angular/core';\nimport { DataService } from './data.service';\n\nexport class HeroComponent {\n  constructor(dataService) {\n    this.name = dataService.getHeroName();\n  }\n}\n\nHeroComponent.annotations = [\n  new Component({\n    selector: 'hero-di',\n    template: `&#x3C;h1>Hero: {{name}}&#x3C;/h1>`\n  })\n];\n\nHeroComponent.parameters = [\n  [DataService]\n];\n\n</code-pane>\n  <code-pane title=\"ES5 JavaScript\" path=\"ts-to-js/js/src/app/hero-di.component.js\">\napp.HeroComponent = HeroComponent;\n\nHeroComponent.annotations = [\n  new ng.core.Component({\n    selector: 'hero-di',\n    template: '&#x3C;h1>Hero: {{name}}&#x3C;/h1>'\n  })\n];\n\nHeroComponent.parameters = [ app.DataService ];\n\nfunction HeroComponent(dataService) {\n  this.name = dataService.getHeroName();\n}\n\n</code-pane>\n  <code-pane title=\"ES5 JavaScript with DSL\" path=\"ts-to-js/js/src/app/hero-di.component.js\" region=\"dsl\">\napp.HeroComponent = ng.core.Component({\n  selector: 'hero-di-dsl',\n  template: '&#x3C;h1>Hero: {{name}}&#x3C;/h1>'\n})\n.Class({\n  constructor: [\n    app.DataService,\n    function HeroComponent(service) {\n      this.name = service.getHeroName();\n    }\n  ]\n});\n\n</code-pane>\n</code-tabs>\n<h3 id=\"injection-with-the-inject-decorator\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ts-to-js#injection-with-the-inject-decorator\"><i class=\"material-icons\">link</i></a>Injection with the @Inject decorator</h3>\n<p>Sometimes the dependency injection token isn't a class or constructor function.</p>\n<p>In <em>TypeScript</em> and <em>ES6-with-decorators</em>, you precede the class constructor parameter\nby calling the <code>@Inject()</code> decorator with the injection token.\nIn the following example, the token is the string <code>'heroName'</code>.</p>\n<p>The other JavaScript dialects add a <code>parameters</code> array to the class constructor function.\nEach item contains a new instance of <code><a href=\"api/core/Inject\">Inject</a></code>:</p>\n<ul>\n<li><em>Plain ES6</em>—each item is a new instance of <code>Inject(token)</code> in a sub-array.</li>\n<li><em>ES5</em>—simply list the string tokens.</li>\n</ul>\n<p>When writing with <em>ES5 DSL</em>, set the <code>Class.constructor</code> property to a function definition\narray as before. Create a new instance of <code>ng.core.Inject(token)</code> for each parameter.</p>\n<code-tabs>\n  <code-pane title=\"TypeScript\" path=\"ts-to-js/ts/src/app/hero-di-inject.component.ts\">\n@Component({\n  selector: 'hero-di-inject',\n  template: `&#x3C;h1>Hero: {{name}}&#x3C;/h1>`\n})\nexport class HeroComponent {\n  constructor(@Inject('heroName') private name: string) { }\n}\n\n</code-pane>\n  <code-pane title=\"ES6 + Decorators\" path=\"ts-to-js/js-es6-decorators/src/app/hero-di-inject.component.es6\">\n@Component({\n  selector: 'hero-di-inject',\n  template: `&#x3C;h1>Hero: {{name}}&#x3C;/h1>`\n})\nexport class HeroComponent {\n  constructor(@Inject('heroName') name) {\n    this.name = name;\n  }\n}\n\n</code-pane>\n  <code-pane title=\"ES6 JavaScript\" path=\"ts-to-js/js-es6/src/app/hero-di-inject.component.es6\">\nexport class HeroComponent {\n  constructor(name) {\n    this.name = name;\n  }\n}\n\nHeroComponent.annotations = [\n  new Component({\n    selector: 'hero-di-inject',\n    template: `&#x3C;h1>Hero: {{name}}&#x3C;/h1>`\n  })\n];\n\nHeroComponent.parameters = [\n  [new Inject('heroName')]\n];\n\n</code-pane>\n  <code-pane title=\"ES5 JavaScript\" path=\"ts-to-js/js/src/app/hero-di-inject.component.js\">\napp.HeroComponent = HeroComponent;\n\nHeroComponent.annotations = [\n  new ng.core.Component({\n    selector: 'hero-di-inject',\n    template: '&#x3C;h1>Hero: {{name}}&#x3C;/h1>'\n  })\n];\n\nHeroComponent.parameters = [ 'heroName' ];\n\nfunction HeroComponent(name) {\n  this.name = name;\n}\n\n</code-pane>\n  <code-pane title=\"ES5 JavaScript with DSL\" path=\"ts-to-js/js/src/app/hero-di-inject.component.js\" region=\"dsl\">\napp.HeroComponent = ng.core.Component({\n  selector: 'hero-di-inject-dsl',\n  template: '&#x3C;h1>Hero: {{name}}&#x3C;/h1>'\n})\n.Class({\n  constructor: [\n    new ng.core.Inject('heroName'),\n    function HeroComponent(name) {\n      this.name = name;\n    }\n  ]\n});\n\n</code-pane>\n</code-tabs>\n<h3 id=\"additional-injection-decorators\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ts-to-js#additional-injection-decorators\"><i class=\"material-icons\">link</i></a>Additional Injection Decorators</h3>\n<p>You can qualify injection behavior with injection decorators from <code>@angular/core</code>.</p>\n<p>In <em>TypeScript</em> and <em>ES6-with-decorators</em>,\nyou precede the constructor parameters with injection qualifiers such as:</p>\n<ul>\n<li><a href=\"api/core/Optional\"><code>@Optional</code></a> sets the parameter to <code>null</code> if the service is missing.</li>\n<li><a href=\"api/core/Attribute\"><code>@Attribute</code></a> to inject a host element attribute value.</li>\n<li><a href=\"api/core/ContentChild\"><code>@ContentChild</code></a> to inject a content child.</li>\n<li><a href=\"api/core/ViewChild\"><code>@ViewChild</code></a> to inject a view child.</li>\n<li><a href=\"api/core/Host\"><code>@Host</code></a> to inject a service in this component or its host.</li>\n<li><a href=\"api/core/SkipSelf\"><code>@SkipSelf</code></a> to inject a service provided in an ancestor of this component.</li>\n</ul>\n<p>In <em>plain ES6</em> and <em>ES5</em>, create an instance of the equivalent injection qualifier in a nested array within the <code>parameters</code> array.\nFor example, you'd write <code>new Optional()</code> in <em>plain ES6</em> and <code>new ng.core.Optional()</code> in <em>ES5</em>.</p>\n<p>When writing with <em>ES5 DSL</em>, set the <code>Class.constructor</code> property to a function definition\narray as before. Use a nested array to define a parameter's complete injection specification.</p>\n<code-tabs>\n  <code-pane title=\"TypeScript\" path=\"ts-to-js/ts/src/app/hero-title.component.ts\">\n@Component({\n  selector: 'hero-title',\n  templateUrl: './hero-title.component.html'\n})\nexport class HeroTitleComponent {\n  msg = '';\n  constructor(\n    @Inject('titlePrefix') @Optional() private titlePrefix: string,\n    @Attribute('title') private title: string\n  ) { }\n\n  ok() {\n    this.msg = 'OK!';\n  }\n}\n\n</code-pane>\n  <code-pane title=\"ES6 + Decorators\" path=\"ts-to-js/js-es6-decorators/src/app/hero-title.component.es6\">\n@Component({\n  selector: 'hero-title',\n  templateUrl: './hero-title.component.html'\n})\nexport class HeroTitleComponent {\n  msg = '';\n  constructor(\n    @Inject('titlePrefix') @Optional() titlePrefix,\n    @Attribute('title') title\n  ) {\n    this.titlePrefix = titlePrefix;\n    this.title = title;\n  }\n\n  ok() {\n    this.msg = 'OK!';\n  }\n}\n\n</code-pane>\n  <code-pane title=\"ES6 JavaScript\" path=\"ts-to-js/js-es6/src/app/hero-title.component.es6\">\nexport class HeroTitleComponent {\n  constructor(titlePrefix, title) {\n    this.titlePrefix = titlePrefix;\n    this.title  = title;\n    this.msg = '';\n  }\n\n  ok() {\n    this.msg = 'OK!';\n  }\n}\n\nHeroTitleComponent.annotations = [\n  new Component({\n    selector: 'hero-title',\n    templateUrl: './hero-title.component.html'\n  })\n];\n\nHeroTitleComponent.parameters = [\n  [new Optional(), new Inject('titlePrefix')],\n  [new Attribute('title')]\n];\n\n\n</code-pane>\n  <code-pane title=\"ES5 JavaScript\" path=\"ts-to-js/js/src/app/hero-title.component.js\">\napp.HeroTitleComponent = HeroTitleComponent;\n\nHeroTitleComponent.annotations = [\n  new ng.core.Component({\n    selector: 'hero-title',\n    templateUrl: 'app/hero-title.component.html'\n  })\n];\n\nfunction HeroTitleComponent(titlePrefix, title) {\n    this.titlePrefix = titlePrefix;\n    this.title  = title;\n    this.msg = '';\n}\n\nHeroTitleComponent.prototype.ok = function() {\n  this.msg = 'OK!';\n}\n\nHeroTitleComponent.parameters = [\n  [new ng.core.Optional(), new ng.core.Inject('titlePrefix')],\n  [new ng.core.Attribute('title')]\n];\n\n</code-pane>\n  <code-pane title=\"ES5 JavaScript with DSL\" path=\"ts-to-js/js/src/app/hero-title.component.js\" region=\"dsl\">\napp.HeroTitleComponent = ng.core.Component({\n  selector: 'hero-title-dsl',\n  templateUrl: 'app/hero-title.component.html'\n})\n.Class({\n  constructor: [\n    [ new ng.core.Optional(), new ng.core.Inject('titlePrefix') ],\n    new ng.core.Attribute('title'),\n    function HeroTitleComponent(titlePrefix, title) {\n      this.titlePrefix = titlePrefix;\n      this.title  = title;\n      this.msg = '';\n    }\n  ],\n\n  ok: function() {\n    this.msg = 'OK!';\n  }\n});\n\n</code-pane>\n</code-tabs>\n<div class=\"l-sub-section\">\n<p>  In the example above, there is no provider for the <code>'titlePrefix'</code> token.\nWithout <code>@Optional()</code>, Angular would raise an error.\nWith <code>@Optional()</code>, Angular sets the constructor parameter to <code>null</code>\nand the component displays the title without a prefix.</p>\n</div>\n<a id=\"host-binding\"></a>\n<h2 id=\"host-binding\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ts-to-js#host-binding\"><i class=\"material-icons\">link</i></a>Host Binding</h2>\n<p>Angular supports bindings to properties and events of the <em>host element</em>, which is the\nelement whose tag matches the component selector.</p>\n<h3 id=\"host-decorators\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ts-to-js#host-decorators\"><i class=\"material-icons\">link</i></a>Host Decorators</h3>\n<p>In <em>TypeScript</em> and <em>ES6-with-decorators</em>, you can use host property decorators to bind a host\nelement to a component or directive.\nThe <a href=\"api/core/HostBinding\"><code>@HostBinding</code></a> decorator\nbinds host element properties to component data properties.\nThe <a href=\"api/core/HostListener\"><code>@HostListener</code></a> decorator binds\nhost element events to component event handlers.</p>\n<p>In <em>plain ES6</em> or <em>ES5</em>, add a <code>host</code> attribute to the component metadata to achieve the\nsame effect as <code>@HostBinding</code> and <code>@HostListener</code>.</p>\n<p>The  <code>host</code> value is an object whose properties are host property and listener bindings:</p>\n<ul>\n<li>Each key follows regular Angular binding syntax: <code>[property]</code> for host bindings\nor <code>(event)</code> for host listeners.</li>\n<li>Each value identifies the corresponding component property or method.</li>\n</ul>\n<code-tabs>\n  <code-pane title=\"TypeScript\" path=\"ts-to-js/ts/src/app/hero-host.component.ts\">\n@Component({\n  selector: 'hero-host',\n  template: `\n    &#x3C;h1 [class.active]=\"active\">Hero Host in Decorators&#x3C;/h1>\n    &#x3C;div>Heading clicks: {{clicks}}&#x3C;/div>\n  `,\n  // Styles within (but excluding) the &#x3C;hero-host> element\n  styles: ['.active {background-color: yellow;}']\n})\nexport class HeroHostComponent {\n  // HostBindings to the &#x3C;hero-host> element\n  @HostBinding() title = 'Hero Host in Decorators Tooltip';\n  @HostBinding('class.heading') headingClass = true;\n\n  active = false;\n  clicks = 0;\n\n  // HostListeners on the entire &#x3C;hero-host> element\n  @HostListener('click')\n  clicked() {\n    this.clicks += 1;\n  }\n\n  @HostListener('mouseenter', ['$event'])\n  enter(event: Event) {\n    this.active = true;\n    this.headingClass = false;\n  }\n\n  @HostListener('mouseleave', ['$event'])\n  leave(event: Event) {\n    this.active = false;\n    this.headingClass = true;\n  }\n}\n\n</code-pane>\n  <code-pane title=\"ES6 + Decorators\" path=\"ts-to-js/js-es6-decorators/src/app/hero-host.component.es6\">\n@Component({\n  selector: 'hero-host',\n  template: `\n    &#x3C;h1 [class.active]=\"active\">Hero Host in Decorators&#x3C;/h1>\n    &#x3C;div>Heading clicks: {{clicks}}&#x3C;/div>\n  `,\n  // Styles within (but excluding) the &#x3C;hero-host> element\n  styles: ['.active {background-color: yellow;}']\n})\nexport class HeroHostComponent {\n  // HostBindings to the &#x3C;hero-host> element\n  @HostBinding() title = 'Hero Host in Decorators Tooltip';\n  @HostBinding('class.heading') headingClass = true;\n\n  active = false;\n  clicks = 0;\n\n  // HostListeners on the entire &#x3C;hero-host> element\n  @HostListener('click')\n  clicked() {\n    this.clicks += 1;\n  }\n\n  @HostListener('mouseenter', ['$event'])\n  enter(event: Event) {\n    this.active = true;\n    this.headingClass = false;\n  }\n\n  @HostListener('mouseleave', ['$event'])\n  leave(event: Event) {\n    this.active = false;\n    this.headingClass = true;\n  }\n}\n\n</code-pane>\n  <code-pane title=\"ES6 JavaScript\" path=\"ts-to-js/js-es6/src/app/hero-host.component.es6\">\nexport class HeroHostComponent {\n  constructor() {\n    this.active = false;\n    this.clicks = 0;\n    this.headingClass = true;\n    this.title = 'Hero Host Tooltip';\n  }\n\n  clicked() {\n    this.clicks += 1;\n  }\n\n  enter(event) {\n    this.active = true;\n    this.headingClass = false;\n  }\n\n  leave(event) {\n    this.active = false;\n    this.headingClass = true;\n  }\n}\n\nHeroHostComponent.annotations = [\n  new Component({\n    selector: 'hero-host',\n    template: `\n      &#x3C;h1 [class.active]=\"active\">Hero Host&#x3C;/h1>\n      &#x3C;div>Heading clicks: {{clicks}}&#x3C;/div>\n    `,\n    host: {\n      // HostBindings to the &#x3C;hero-host> element\n      '[title]': 'title',\n      '[class.heading]': 'headingClass',\n      '(click)': 'clicked()',\n\n      // HostListeners on the entire &#x3C;hero-host> element\n      '(mouseenter)': 'enter($event)',\n      '(mouseleave)': 'leave($event)'\n    },\n    // Styles within (but excluding) the &#x3C;hero-host> element\n    styles: ['.active {background-color: yellow;}']\n  })\n];\n\n</code-pane>\n  <code-pane title=\"ES5 JavaScript\" path=\"ts-to-js/js/src/app/hero-host.component.js\">\napp.HeroComponent = HeroComponent;\n\nHeroComponent.annotations = [\n  new ng.core.Component({\n    selector: 'hero-host',\n    template:\n      '&#x3C;h1 [class.active]=\"active\">Hero Host&#x3C;/h1>' +\n      '&#x3C;div>Heading clicks: {{clicks}}&#x3C;/div>',\n    host: {\n      // HostBindings to the &#x3C;hero-host> element\n      '[title]': 'title',\n      '[class.heading]': 'headingClass',\n      '(click)': 'clicked()',\n\n      // HostListeners on the entire &#x3C;hero-host> element\n      '(mouseenter)': 'enter($event)',\n      '(mouseleave)': 'leave($event)'\n    },\n    // Styles within (but excluding) the &#x3C;hero-host> element\n    styles: ['.active {background-color: yellow;}']\n  })\n];\n\nfunction HeroComponent() {\n  this.clicks = 0;\n  this.headingClass = true;\n  this.title = 'Hero Host Tooltip content';\n}\n\nHeroComponent.prototype.clicked = function() {\n  this.clicks += 1;\n}\n\nHeroComponent.prototype.enter = function(event) {\n  this.active = true;\n  this.headingClass = false;\n}\n\nHeroComponent.prototype.leave = function(event) {\n  this.active = false;\n  this.headingClass = true;\n}\n\n</code-pane>\n  <code-pane title=\"ES5 JavaScript with DSL\" path=\"ts-to-js/js/src/app/hero-host.component.js\" region=\"dsl\">\napp.HeroComponent = ng.core.Component({\n  selector: 'hero-host-dsl',\n  template: `\n    &#x3C;h1 [class.active]=\"active\">Hero Host (DSL)&#x3C;/h1>\n    &#x3C;div>Heading clicks: {{clicks}}&#x3C;/div>\n  `,\n  host: {\n    // HostBindings to the &#x3C;hero-host-dsl> element\n    '[title]': 'title',\n    '[class.heading]': 'headingClass',\n    '(click)': 'clicked()',\n\n    // HostListeners on the entire &#x3C;hero-host-dsl> element\n    '(mouseenter)': 'enter($event)',\n    '(mouseleave)': 'leave($event)'\n  },\n  // Styles within (but excluding) the &#x3C;hero-host-dsl> element\n  styles: ['.active {background-color: coral;}']\n})\n.Class({\n  constructor: function HeroComponent() {\n    this.clicks = 0;\n    this.headingClass = true;\n    this.title = 'Hero Host Tooltip DSL content';\n  },\n\n  clicked() {\n    this.clicks += 1;\n  },\n\n  enter(event) {\n    this.active = true;\n    this.headingClass = false;\n  },\n\n  leave(event) {\n    this.active = false;\n    this.headingClass = true;\n  }\n});\n\n</code-pane>\n</code-tabs>\n<h3 id=\"host-metadata\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ts-to-js#host-metadata\"><i class=\"material-icons\">link</i></a>Host Metadata</h3>\n<p>Some developers prefer to specify host properties and listeners\nin the component metadata.\nThey'd <em>rather</em> do it the way you <em>must</em> do it <em>ES5</em> and <em>plain ES6</em>.</p>\n<p>The following re-implementation of the <code>HeroComponent</code> shows that <em>any property metadata decorator</em>\ncan be expressed as component or directive metadata in both <em>TypeScript</em> and <em>ES6-with-decorators</em>.\nThese particular <em>TypeScript</em> and <em>ES6</em> code snippets happen to be identical.</p>\n<code-tabs>\n  <code-pane title=\"TypeScript\" path=\"ts-to-js/ts/src/app/hero-host-meta.component.ts\">\n@Component({\n  selector: 'hero-host-meta',\n  template: `\n    &#x3C;h1 [class.active]=\"active\">Hero Host in Metadata&#x3C;/h1>\n    &#x3C;div>Heading clicks: {{clicks}}&#x3C;/div>\n  `,\n  host: {\n    // HostBindings to the &#x3C;hero-host-meta> element\n    '[title]': 'title',\n    '[class.heading]': 'headingClass',\n\n    // HostListeners on the entire &#x3C;hero-host-meta> element\n    '(click)': 'clicked()',\n    '(mouseenter)': 'enter($event)',\n    '(mouseleave)': 'leave($event)'\n  },\n  // Styles within (but excluding) the &#x3C;hero-host-meta> element\n  styles: ['.active {background-color: coral;}']\n})\nexport class HeroHostMetaComponent {\n  title = 'Hero Host in Metadata Tooltip';\n  headingClass = true;\n\n  active = false;\n  clicks = 0;\n\n  clicked() {\n    this.clicks += 1;\n  }\n\n  enter(event: Event) {\n    this.active = true;\n    this.headingClass = false;\n  }\n\n  leave(event: Event) {\n    this.active = false;\n    this.headingClass = true;\n  }\n}\n\n</code-pane>\n  <code-pane title=\"ES6 + Decorators\" path=\"ts-to-js/js-es6-decorators/src/app/hero-host-meta.component.es6\">\n@Component({\n  selector: 'hero-host-meta',\n  template: `\n    &#x3C;h1 [class.active]=\"active\">Hero Host in Metadata&#x3C;/h1>\n    &#x3C;div>Heading clicks: {{clicks}}&#x3C;/div>\n  `,\n  host: {\n    // HostBindings to the &#x3C;hero-host-meta> element\n    '[title]': 'title',\n    '[class.heading]': 'headingClass',\n\n    // HostListeners on the entire &#x3C;hero-host-meta> element\n    '(click)': 'clicked()',\n    '(mouseenter)': 'enter($event)',\n    '(mouseleave)': 'leave($event)'\n  },\n  // Styles within (but excluding) the &#x3C;hero-host-meta> element\n  styles: ['.active {background-color: coral;}']\n})\nexport class HeroHostMetaComponent {\n  title = 'Hero Host in Metadata Tooltip';\n  headingClass = true;\n\n  active = false;\n  clicks = 0;\n\n  clicked() {\n    this.clicks += 1;\n  }\n\n  enter(event: Event) {\n    this.active = true;\n    this.headingClass = false;\n  }\n\n  leave(event: Event) {\n    this.active = false;\n    this.headingClass = true;\n  }\n}\n\n</code-pane>\n</code-tabs>\n<a id=\"view-child-decorators\"></a>\n<h3 id=\"view-and-child-decorators\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ts-to-js#view-and-child-decorators\"><i class=\"material-icons\">link</i></a>View and Child Decorators</h3>\n<p>Several <em>property</em> decorators query a component's nested view and content components.</p>\n<div class=\"l-sub-section\">\n<p>  <em>View</em> children are associated with element tags that appear <em>within</em> the component's template.</p>\n<p>  <em>Content</em> children are associated with elements that appear <em>between</em> the component's element tags;\nthey are projected into an <code>&#x3C;ng-content></code> slot in the component's template.</p>\n</div>\n<p>The <a href=\"api/core/ViewChild\"><code>@ViewChild</code></a> and\n<a href=\"api/core/ViewChildren\"><code>@ViewChildren</code></a> property decorators\nallow a component to query instances of other components that are used in\nits view.</p>\n<p>In <em>ES5</em> and <em>ES6</em>, you access a component's view children by adding a <code>queries</code> property to the component metadata.\nThe <code>queries</code> property value is a hash map.</p>\n<ul>\n<li>Each <em>key</em> is the name of a component property that will hold the view child or children.</li>\n<li>Each <em>value</em> is a new instance of either <code><a href=\"api/core/ViewChild\">ViewChild</a></code> or <code><a href=\"api/core/ViewChildren\">ViewChildren</a></code>.</li>\n</ul>\n<code-tabs>\n  <code-pane title=\"TypeScript\" path=\"ts-to-js/ts/src/app/hero-queries.component.ts\" region=\"view\">\n@Component({\n  selector: 'hero-queries',\n  template: `\n    &#x3C;view-child *ngFor=\"let hero of heroData\" [hero]=\"hero\">\n      &#x3C;content-child>&#x3C;/content-child>\n    &#x3C;/view-child>\n    &#x3C;button (click)=\"activate()\">{{buttonLabel}} All&#x3C;/button>\n  `\n})\nexport class HeroQueriesComponent {\n  active = false;\n  heroData = [\n    {id: 1, name: 'Windstorm'},\n    {id: 2, name: 'LaughingGas'}\n  ];\n\n  @ViewChildren(ViewChildComponent) views: QueryList&#x3C;ViewChildComponent>;\n\n  activate() {\n    this.active = !this.active;\n    this.views.forEach(\n      view => view.activate()\n    );\n  }\n\n  get buttonLabel() {\n    return this.active ? 'Deactivate' : 'Activate';\n  }\n}\n\n</code-pane>\n  <code-pane title=\"ES6 + Decorators\" path=\"ts-to-js/js-es6-decorators/src/app/hero-queries.component.es6\" region=\"view\">\n@Component({\n  selector: 'hero-queries',\n  template: `\n    &#x3C;view-child *ngFor=\"let hero of heroData\" [hero]=\"hero\">\n      &#x3C;content-child>&#x3C;/content-child>\n    &#x3C;/view-child>\n    &#x3C;button (click)=\"activate()\">{{buttonLabel}} All&#x3C;/button>\n  `\n})\nexport class HeroQueriesComponent {\n  active = false;\n  heroData = [\n    {id: 1, name: 'Windstorm'},\n    {id: 2, name: 'LaughingGas'}\n  ];\n\n  @ViewChildren(ViewChildComponent) views;\n\n  activate() {\n    this.active = !this.active;\n    this.views.forEach(\n      view => view.activate()\n    );\n  }\n\n  get buttonLabel() {\n    return this.active ? 'Deactivate' : 'Activate';\n  }\n}\n\n</code-pane>\n  <code-pane title=\"ES6 JavaScript\" path=\"ts-to-js/js-es6/src/app/hero-queries.component.es6\" region=\"view\">\nexport class HeroQueriesComponent {\n  constructor(){\n    this.active = false;\n    this.heroData = [\n      {id: 1, name: 'Windstorm'},\n      {id: 2, name: 'LaughingGas'}\n    ];\n  }\n\n  activate() {\n    this.active = !this.active;\n    this.views.forEach(\n      view => view.activate()\n    );\n  }\n\n  get buttonLabel() {\n    return this.active ? 'Deactivate' : 'Activate';\n  }\n}\n\nHeroQueriesComponent.annotations = [\n  new Component({\n    selector: 'hero-queries',\n    template: `\n      &#x3C;view-child *ngFor=\"let hero of heroData\" [hero]=\"hero\">\n        &#x3C;content-child>&#x3C;/content-child>\n      &#x3C;/view-child>\n      &#x3C;button (click)=\"activate()\">{{buttonLabel}} All&#x3C;/button>\n    `,\n    queries: {\n      views: new ViewChildren(ViewChildComponent)\n    }\n  })\n];\n\n</code-pane>\n  <code-pane title=\"ES5 JavaScript with DSL\" path=\"ts-to-js/js/src/app/hero-queries.component.js\" region=\"view\">\napp.heroQueries.HeroQueriesComponent = ng.core.Component({\n  selector: 'hero-queries',\n  template:\n    '&#x3C;view-child *ngFor=\"let hero of heroData\" [hero]=\"hero\">' +\n      '&#x3C;content-child>&#x3C;/content-child>' +\n    '&#x3C;/view-child>' +\n    '&#x3C;button (click)=\"activate()\">{{buttonLabel}} All&#x3C;/button>',\n  queries: {\n    views: new ng.core.ViewChildren(app.heroQueries.ViewChildComponent)\n  }\n})\n.Class({\n  constructor: function HeroQueriesComponent() {\n    this.active = false;\n    this.heroData = [\n      {id: 1, name: 'Windstorm'},\n      {id: 2, name: 'LaughingGas'}\n    ];\n  },\n\n  activate: function() {\n    this.active = !this.active;\n    this.views.forEach(function(view) {\n      view.activate();\n    });\n  },\n});\n\n// add prototype property w/ getter outside the DSL\nvar proto = app.heroQueries.HeroQueriesComponent.prototype;\nObject.defineProperty(proto, \"buttonLabel\", {\n    get: function () {\n        return this.active ? 'Deactivate' : 'Activate';\n    },\n    enumerable: true\n});\n\n</code-pane>\n</code-tabs>\n<p>The <a href=\"api/core/ContentChild\"><code>@ContentChild</code></a> and\n<a href=\"api/core/ContentChildren\"><code>@ContentChildren</code></a> property decorators\nallow a component to query instances of other components that have been projected\ninto its view from elsewhere.</p>\n<p>They can be added in the same way as <a href=\"api/core/ViewChild\"><code>@ViewChild</code></a> and\n<a href=\"api/core/ViewChildren\"><code>@ViewChildren</code></a>.</p>\n<code-tabs>\n  <code-pane title=\"TypeScript\" path=\"ts-to-js/ts/src/app/hero-queries.component.ts\" region=\"content\">\n@Component({\n  selector: 'view-child',\n  template: `\n  &#x3C;h2 [class.active]=active>\n    {{hero.name}}\n    &#x3C;ng-content>&#x3C;/ng-content>\n  &#x3C;/h2>`,\n  styles: ['.active {font-weight: bold; background-color: skyblue;}']\n})\nexport class ViewChildComponent {\n  @Input() hero: any;\n  active = false;\n\n  @ContentChild(ContentChildComponent) content: ContentChildComponent;\n\n  activate() {\n    this.active = !this.active;\n    this.content.activate();\n  }\n}\n\n</code-pane>\n  <code-pane title=\"ES6 + Decorators\" path=\"ts-to-js/js-es6-decorators/src/app/hero-queries.component.es6\" region=\"content\">\n@Component({\n  selector: 'view-child',\n  template: `\n  &#x3C;h2 [class.active]=active>\n    {{hero.name}}\n    &#x3C;ng-content>&#x3C;/ng-content>\n  &#x3C;/h2>`,\n  styles: ['.active {font-weight: bold; background-color: skyblue;}']\n})\nexport class ViewChildComponent {\n  @Input() hero;\n  active = false;\n\n  @ContentChild(ContentChildComponent) content;\n\n  activate() {\n    this.active = !this.active;\n    this.content.activate();\n  }\n}\n\n</code-pane>\n  <code-pane title=\"ES6 JavaScript\" path=\"ts-to-js/js-es6/src/app/hero-queries.component.es6\" region=\"content\">\nexport class ViewChildComponent {\n  constructor() {\n    this.active = false;\n  }\n\n  activate() {\n    this.active = !this.active;\n    this.content.activate();\n  }\n}\n\nViewChildComponent.annotations = [\n  new Component({\n    selector: 'view-child',\n    template: `&#x3C;h2 [class.active]=active>\n      {{hero.name}}\n      &#x3C;ng-content>&#x3C;/ng-content>\n    &#x3C;/h2>`,\n    styles: ['.active {font-weight: bold; background-color: skyblue;}'],\n    inputs: ['hero'],\n    queries: {\n      content: new ContentChild(ContentChildComponent)\n    }\n  })\n];\n\n</code-pane>\n  <code-pane title=\"ES5 JavaScript with DSL\" path=\"ts-to-js/js/src/app/hero-queries.component.js\" region=\"content\">\napp.heroQueries.ViewChildComponent = ng.core.Component({\n  selector: 'view-child',\n  template:\n    '&#x3C;h2 [class.active]=active>' +\n      '{{hero.name}} ' +\n      '&#x3C;ng-content>&#x3C;/ng-content>' +\n    '&#x3C;/h2>',\n  styles: ['.active {font-weight: bold; background-color: skyblue;}'],\n  inputs: ['hero'],\n  queries: {\n    content: new ng.core.ContentChild(app.heroQueries.ContentChildComponent)\n  }\n})\n.Class({\n  constructor: function HeroQueriesHeroComponent() {\n    this.active = false;\n  },\n\n  activate: function() {\n    this.active = !this.active;\n    this.content.activate();\n  }\n});\n\n</code-pane>\n</code-tabs>\n<div class=\"alert is-helpful\">\n<p>  In <em>TypeScript</em> and <em>ES6-with-decorators</em> you can also use the  <code>queries</code> metadata\ninstead of the <code>@ViewChild</code> and <code>@ContentChild</code> property decorators.</p>\n</div>\n<a id=\"aot\"></a>\n<h2 id=\"aot-compilation-in-typescript-only\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/ts-to-js#aot-compilation-in-typescript-only\"><i class=\"material-icons\">link</i></a>AOT Compilation in <em>TypeScript</em> only</h2>\n<p>Angular offers two modes of template compilation, JIT (<em>just-in-time</em>) and\n<a href=\"guide/aot-compiler\">AOT (<em>ahead-of-time</em>)</a>.\nCurrently the AOT compiler only works with <em>TypeScript</em> applications because, in part, it generates\n<em>TypeScript</em> files as an intermediate result.\n<strong>AOT is not an option for pure JavaScript applications</strong> at this time.</p>\n\n</div>"
}