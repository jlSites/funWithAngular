{
  "id": "guide/forms",
  "title": "Forms",
  "contents": "\n<div class=\"content\">\n<h1 id=\"forms\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#forms\"><i class=\"material-icons\">link</i></a>Forms</h1>\n<p>Forms are the mainstay of business applications.\nYou use forms to log in, submit a help request, place an order, book a flight,\nschedule a meeting, and perform countless other data-entry tasks.</p>\n<p>In developing a form, it's important to create a data-entry experience that guides the\nuser efficiently and effectively through the workflow.</p>\n<p>Developing forms requires design skills (which are out of scope for this page), as well as framework support for\n<em>two-way data binding, change tracking, validation, and error handling</em>,\nwhich you'll learn about on this page.</p>\n<p>This page shows you how to build a simple form from scratch. Along the way you'll learn how to:</p>\n<ul>\n<li>Build an Angular form with a component and template.</li>\n<li>Use <code>ngModel</code> to create two-way data bindings for reading and writing input-control values.</li>\n<li>Track state changes and the validity of form controls.</li>\n<li>Provide visual feedback using special CSS classes that track the state of the controls.</li>\n<li>Display validation errors to users and enable/disable form controls.</li>\n<li>Share information across HTML elements using template reference variables.</li>\n</ul>\n<p>You can run the <live-example></live-example> in Plunker and download the code from there.</p>\n<a id=\"template-driven\"></a>\n<h2 id=\"template-driven-forms\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#template-driven-forms\"><i class=\"material-icons\">link</i></a>Template-driven forms</h2>\n<p>You can build forms by writing templates in the Angular <a href=\"guide/template-syntax\">template syntax</a> with\nthe form-specific directives and techniques described in this page.</p>\n<div class=\"l-sub-section\">\n<p>You can also use a reactive (or model-driven) approach to build forms.\nHowever, this page focuses on template-driven forms.</p>\n</div>\n<p>You can build almost any form with an Angular template—login forms, contact forms, and pretty much any business form.\nYou can lay out the controls creatively, bind them to data, specify validation rules and display validation errors,\nconditionally enable or disable specific controls, trigger built-in visual feedback, and much more.</p>\n<p>Angular makes the process easy by handling many of the repetitive, boilerplate tasks you'd\notherwise wrestle with yourself.</p>\n<p>You'll learn to build a template-driven form that looks like this:</p>\n<figure>\n  <img src=\"generated/images/guide/forms/hero-form-1.png\" alt=\"Clean Form\" width=\"479\" height=\"339\">\n</figure>\n<p>The <em>Hero Employment Agency</em> uses this form to maintain personal information about heroes.\nEvery hero needs a job. It's the company mission to match the right hero with the right crisis.</p>\n<p>Two of the three fields on this form are required. Required fields have a green bar on the left to make them easy to spot.</p>\n<p>If you delete the hero name, the form displays a validation error in an attention-grabbing style:</p>\n<figure>\n  <img src=\"generated/images/guide/forms/hero-form-2.png\" alt=\"Invalid, Name Required\" width=\"465\" height=\"402\">\n</figure>\n<p>Note that the <em>Submit</em> button is disabled, and the \"required\" bar to the left of the input control changes from green to red.</p>\n<div class=\"l-sub-section\">\n<p>You can customize the colors and location of the \"required\" bar with standard CSS.</p>\n</div>\n<p>You'll build this form in small steps:</p>\n<ol>\n<li>Create the <code>Hero</code> model class.</li>\n<li>Create the component that controls the form.</li>\n<li>Create a template with the initial form layout.</li>\n<li>Bind data properties to each form control using the <code>ngModel</code> two-way data-binding syntax.</li>\n<li>Add a <code>name</code> attribute to each form-input control.</li>\n<li>Add custom CSS to provide visual feedback.</li>\n<li>Show and hide validation-error messages.</li>\n<li>Handle form submission with <em>ngSubmit</em>.</li>\n<li>Disable the form’s <em>Submit</em> button until the form is valid.</li>\n</ol>\n<h2 id=\"setup\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#setup\"><i class=\"material-icons\">link</i></a>Setup</h2>\n<p>Follow the <a href=\"guide/setup\">setup</a> instructions for creating a new project\nnamed angular-forms.</p>\n<h2 id=\"create-the-hero-model-class\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#create-the-hero-model-class\"><i class=\"material-icons\">link</i></a>Create the Hero model class</h2>\n<p>As users enter form data, you'll capture their changes and update an instance of a model.\nYou can't lay out the form until you know what the model looks like.</p>\n<p>A model can be as simple as a \"property bag\" that holds facts about a thing of application importance.\nThat describes well the <code>Hero</code> class with its three required fields (<code>id</code>, <code>name</code>, <code>power</code>)\nand one optional field (<code>alterEgo</code>).</p>\n<p>In the <code>app</code> directory, create the following file with the given content:</p>\n<code-example path=\"forms/src/app/hero.ts\" title=\"src/app/hero.ts\">\nexport class Hero {\n\n  constructor(\n    public id: number,\n    public name: string,\n    public power: string,\n    public alterEgo?: string\n  ) {  }\n\n}\n\n\n</code-example>\n<p>It's an anemic model with few requirements and no behavior. Perfect for the demo.</p>\n<p>The TypeScript compiler generates a public field for each <code>public</code> constructor parameter and\nautomatically assigns the parameter’s value to that field when you create heroes.</p>\n<p>The <code>alterEgo</code> is optional, so the constructor lets you omit it; note the question mark (?) in <code>alterEgo?</code>.</p>\n<p>You can create a new hero like this:</p>\n<code-example path=\"forms/src/app/hero-form.component.ts\" linenums=\"false\" title=\"src/app/hero-form.component.ts (SkyDog)\" region=\"SkyDog\">\nlet myHero =  new Hero(42, 'SkyDog',\n                       'Fetch any object at any distance',\n                       'Leslie Rollover');\nconsole.log('My hero is called ' + myHero.name); // \"My hero is called SkyDog\"\n\n</code-example>\n<h2 id=\"create-a-form-component\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#create-a-form-component\"><i class=\"material-icons\">link</i></a>Create a form component</h2>\n<p>An Angular form has two parts: an HTML-based <em>template</em> and a component <em>class</em>\nto handle data and user interactions programmatically.\nBegin with the class because it states, in brief, what the hero editor can do.</p>\n<p>Create the following file with the given content:</p>\n<code-example path=\"forms/src/app/hero-form.component.ts\" linenums=\"false\" title=\"src/app/hero-form.component.ts (v1)\" region=\"v1\">\nimport { Component } from '@angular/core';\n\nimport { Hero }    from './hero';\n\n@Component({\n  selector: 'hero-form',\n  templateUrl: './hero-form.component.html'\n})\nexport class HeroFormComponent {\n\n  powers = ['Really Smart', 'Super Flexible',\n            'Super Hot', 'Weather Changer'];\n\n  model = new Hero(18, 'Dr IQ', this.powers[0], 'Chuck Overstreet');\n\n  submitted = false;\n\n  onSubmit() { this.submitted = true; }\n\n  // TODO: Remove this when we're done\n  get diagnostic() { return JSON.stringify(this.model); }\n}\n\n\n</code-example>\n<p>There’s nothing special about this component, nothing form-specific,\nnothing to distinguish it from any component you've written before.</p>\n<p>Understanding this component requires only the Angular concepts covered in previous pages.</p>\n<ul>\n<li>The code imports the Angular core library and the <code>Hero</code> model you just created.</li>\n<li>The <code>@Component</code> selector value of \"hero-form\" means you can drop this form in a parent template with a <code>&#x3C;hero-form></code> tag.</li>\n<li>The <code>templateUrl</code> property points to a separate file for the template HTML.</li>\n<li>You defined dummy data for <code>model</code> and <code>powers</code>, as befits a demo.</li>\n</ul>\n<p>Down the road, you can inject a data service to get and save real data\nor perhaps expose these properties as inputs and outputs\n(see <a href=\"guide/template-syntax#inputs-outputs\">Input and output properties</a> on the\n<a href=\"guide/template-syntax\">Template Syntax</a> page) for binding to a\nparent component. This is not a concern now and these future changes won't affect the form.</p>\n<ul>\n<li>You added a <code>diagnostic</code> property to return a JSON representation of the model.\nIt'll help you see what you're doing during development; you've left yourself a cleanup note to discard it later.</li>\n</ul>\n<h3 id=\"why-the-separate-template-file\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#why-the-separate-template-file\"><i class=\"material-icons\">link</i></a>Why the separate template file?</h3>\n<p>Why don't you write the template inline in the component file as you often do elsewhere?</p>\n<p>There is no \"right\" answer for all occasions. Inline templates are useful when they are short.\nMost form templates aren't short. TypeScript and JavaScript files generally aren't the best place to\nwrite (or read) large stretches of HTML, and few editors help with files that have a mix of HTML and code.</p>\n<p>Form templates tend to be large, even when displaying a small number of fields,\nso it's usually best to put the HTML template in a separate file.\nYou'll write that template file in a moment. First,\nrevise the <code>app.module.ts</code> and <code>app.component.ts</code> to make use of the new <code>HeroFormComponent</code>.</p>\n<h2 id=\"revise-appmodulets\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#revise-appmodulets\"><i class=\"material-icons\">link</i></a>Revise <em>app.module.ts</em></h2>\n<p><code>app.module.ts</code> defines the application's root module. In it you identify the external modules you'll use in the application\nand declare the components that belong to this module, such as the <code>HeroFormComponent</code>.</p>\n<p>Because template-driven forms are in their own module, you need to add the <code><a href=\"api/forms/FormsModule\">FormsModule</a></code> to the array of\n<code>imports</code> for the application module before you can use forms.</p>\n<p>Replace the contents of the \"QuickStart\" version with the following:</p>\n<code-example path=\"forms/src/app/app.module.ts\" title=\"src/app/app.module.ts\">\nimport { NgModule }      from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule }   from '@angular/forms';\n\nimport { AppComponent }  from './app.component';\nimport { HeroFormComponent } from './hero-form.component';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    FormsModule\n  ],\n  declarations: [\n    AppComponent,\n    HeroFormComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-example>\n<div class=\"l-sub-section\">\n<p>There are three changes:</p>\n<ol>\n<li>\n<p>You import <code><a href=\"api/forms/FormsModule\">FormsModule</a></code> and the new <code>HeroFormComponent</code>.</p>\n</li>\n<li>\n<p>You add the <code><a href=\"api/forms/FormsModule\">FormsModule</a></code> to the list of <code>imports</code> defined in the <code>@NgModule</code> decorator. This gives the application\naccess to all of the template-driven forms features, including <code>ngModel</code>.</p>\n</li>\n<li>\n<p>You add the <code>HeroFormComponent</code> to the list of <code>declarations</code> defined in the <code>@NgModule</code> decorator. This makes\nthe <code>HeroFormComponent</code> component visible throughout this module.</p>\n</li>\n</ol>\n</div>\n<div class=\"alert is-important\">\n<p>If a component, directive, or pipe belongs to a module in the <code>imports</code> array, ​<em>don't</em>​ re-declare it in the <code>declarations</code> array.\nIf you wrote it and it should belong to this module, ​<em>do</em>​ declare it in the <code>declarations</code> array.</p>\n</div>\n<h2 id=\"revise-appcomponentts\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#revise-appcomponentts\"><i class=\"material-icons\">link</i></a>Revise <em>app.component.ts</em></h2>\n<p><code>AppComponent</code> is the application's root component. It will host the new <code>HeroFormComponent</code>.</p>\n<p>Replace the contents of the \"QuickStart\" version with the following:</p>\n<code-example path=\"forms/src/app/app.component.ts\" title=\"src/app/app.component.ts\">\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'my-app',\n  template: '&#x3C;hero-form>&#x3C;/hero-form>'\n})\nexport class AppComponent { }\n\n\n</code-example>\n<div class=\"l-sub-section\">\n<p>There are only two changes.\nThe <code>template</code> is simply the new element tag identified by the component's <code>selector</code> property.\nThis displays the hero form when the application component is loaded.\nYou've also dropped the <code>name</code> field from the class body.</p>\n</div>\n<h2 id=\"create-an-initial-html-form-template\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#create-an-initial-html-form-template\"><i class=\"material-icons\">link</i></a>Create an initial HTML form template</h2>\n<p>Create the template file with the following contents:</p>\n<code-example path=\"forms/src/app/hero-form.component.html\" region=\"start\" title=\"src/app/hero-form.component.html\">\n&#x3C;div class=\"container\">\n    &#x3C;h1>Hero Form&#x3C;/h1>\n    &#x3C;form>\n      &#x3C;div class=\"form-group\">\n        &#x3C;label for=\"name\">Name&#x3C;/label>\n        &#x3C;input type=\"text\" class=\"form-control\" id=\"name\" required>\n      &#x3C;/div>\n\n      &#x3C;div class=\"form-group\">\n        &#x3C;label for=\"alterEgo\">Alter Ego&#x3C;/label>\n        &#x3C;input type=\"text\" class=\"form-control\" id=\"alterEgo\">\n      &#x3C;/div>\n\n      &#x3C;button type=\"submit\" class=\"btn btn-success\">Submit&#x3C;/button>\n\n    &#x3C;/form>\n&#x3C;/div>\n\n</code-example>\n<p>The language is simply HTML5. You're presenting two of the <code>Hero</code> fields, <code>name</code> and <code>alterEgo</code>, and\nopening them up for user input in input boxes.</p>\n<p>The <em>Name</em> <code>&#x3C;input></code> control has the HTML5 <code>required</code> attribute;\nthe <em>Alter Ego</em> <code>&#x3C;input></code> control does not because <code>alterEgo</code> is optional.</p>\n<p>You added a <em>Submit</em> button at the bottom with some classes on it for styling.</p>\n<p><em>You're not using Angular yet</em>. There are no bindings or extra directives, just layout.</p>\n<div class=\"l-sub-section\">\n<p>In template driven forms, if you've imported <code><a href=\"api/forms/FormsModule\">FormsModule</a></code>, you don't have to do anything\nto the <code>&#x3C;form></code> tag in order to make use of <code><a href=\"api/forms/FormsModule\">FormsModule</a></code>. Continue on to see how this works.</p>\n</div>\n<p>The <code>container</code>, <code>form-group</code>, <code>form-control</code>, and <code>btn</code> classes\ncome from <a href=\"http://getbootstrap.com/css/\">Twitter Bootstrap</a>. These classes are purely cosmetic.\nBootstrap gives the form a little style.</p>\n<div class=\"callout is-important\">\n<header>\n  Angular forms don't require a style library\n</header>\n<p>Angular makes no use of the <code>container</code>, <code>form-group</code>, <code>form-control</code>, and <code>btn</code> classes or\nthe styles of any external library. Angular apps can use any CSS library or none at all.</p>\n</div>\n<p>To add the stylesheet, open <code>index.html</code> and add the following link to the <code>&#x3C;head></code>:</p>\n<code-example path=\"forms/src/index.html\" linenums=\"false\" title=\"src/index.html (bootstrap)\" region=\"bootstrap\">\n&#x3C;link rel=\"stylesheet\"\n      href=\"https://unpkg.com/bootstrap@3.3.7/dist/css/bootstrap.min.css\">\n\n</code-example>\n<h2 id=\"add-powers-with-ngfor\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#add-powers-with-ngfor\"><i class=\"material-icons\">link</i></a>Add powers with <em>*ngFor</em></h2>\n<p>The hero must choose one superpower from a fixed list of agency-approved powers.\nYou maintain that list internally (in <code>HeroFormComponent</code>).</p>\n<p>You'll add a <code>select</code> to the\nform and bind the options to the <code>powers</code> list using <code>ngFor</code>,\na technique seen previously in the <a href=\"guide/displaying-data\">Displaying Data</a> page.</p>\n<p>Add the following HTML <em>immediately below</em> the <em>Alter Ego</em> group:</p>\n<code-example path=\"forms/src/app/hero-form.component.html\" linenums=\"false\" title=\"src/app/hero-form.component.html (powers)\" region=\"powers\">\n&#x3C;div class=\"form-group\">\n  &#x3C;label for=\"power\">Hero Power&#x3C;/label>\n  &#x3C;select class=\"form-control\" id=\"power\" required>\n    &#x3C;option *ngFor=\"let pow of powers\" [value]=\"pow\">{{pow}}&#x3C;/option>\n  &#x3C;/select>\n&#x3C;/div>\n\n\n</code-example>\n<p>This code repeats the <code>&#x3C;option></code> tag for each power in the list of powers.\nThe <code>pow</code> template input variable is a different power in each iteration;\nyou display its name using the interpolation syntax.</p>\n<a id=\"ngModel\"></a>\n<h2 id=\"two-way-data-binding-with-ngmodel\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#two-way-data-binding-with-ngmodel\"><i class=\"material-icons\">link</i></a>Two-way data binding with <em>ngModel</em></h2>\n<p>Running the app right now would be disappointing.</p>\n<figure>\n  <img src=\"generated/images/guide/forms/hero-form-3.png\" alt=\"Early form with no binding\" width=\"473\" height=\"294\">\n</figure>\n<p>You don't see hero data because you're not binding to the <code>Hero</code> yet.\nYou know how to do that from earlier pages.\n<a href=\"guide/displaying-data\">Displaying Data</a> teaches property binding.\n<a href=\"guide/user-input\">User Input</a> shows how to listen for DOM events with an\nevent binding and how to update a component property with the displayed value.</p>\n<p>Now you need to display, listen, and extract at the same time.</p>\n<p>You could use the techniques you already know, but\ninstead you'll use the new <code>[(ngModel)]</code> syntax, which\nmakes binding the form to the model easy.</p>\n<p>Find the <code>&#x3C;input></code> tag for <em>Name</em> and update it like this:</p>\n<code-example path=\"forms/src/app/hero-form.component.html\" linenums=\"false\" title=\"src/app/hero-form.component.html (excerpt)\" region=\"ngModelName-1\">\n&#x3C;input type=\"text\" class=\"form-control\" id=\"name\"\n       required\n       [(ngModel)]=\"model.name\" name=\"name\">\nTODO: remove this: {{model.name}}\n\n</code-example>\n<div class=\"l-sub-section\">\n<p>You added a diagnostic interpolation after the input tag\nso you can see what you're doing.\nYou left yourself a note to throw it away when you're done.</p>\n</div>\n<p>Focus on the binding syntax: <code>[(ngModel)]=\"...\"</code>.</p>\n<p>You need one more addition to display the data. Declare\na template variable for the form. Update the <code>&#x3C;form></code> tag with\n<code>#heroForm=\"ngForm\"</code> as follows:</p>\n<code-example path=\"forms/src/app/hero-form.component.html\" linenums=\"false\" title=\"src/app/hero-form.component.html (excerpt)\" region=\"template-variable\">\n&#x3C;form #heroForm=\"ngForm\">\n\n</code-example>\n<p>The variable <code>heroForm</code> is now a reference to the <code><a href=\"api/forms/NgForm\">NgForm</a></code> directive that governs the form as a whole.</p>\n<div class=\"l-sub-section\">\n<a id=\"ngForm\"></a>\n<h3 id=\"the-ngform-directive\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#the-ngform-directive\"><i class=\"material-icons\">link</i></a>The <em>NgForm</em> directive</h3>\n<p>What <code><a href=\"api/forms/NgForm\">NgForm</a></code> directive?\nYou didn't add an <a href=\"api/forms/NgForm\">NgForm</a> directive.</p>\n<p>Angular did. Angular automatically creates and attaches an <code><a href=\"api/forms/NgForm\">NgForm</a></code> directive to the <code>&#x3C;form></code> tag.</p>\n<p>The <code><a href=\"api/forms/NgForm\">NgForm</a></code> directive supplements the <code>form</code> element with additional features.\nIt holds the controls you created for the elements with an <code>ngModel</code> directive\nand <code>name</code> attribute, and monitors their properties, including their validity.\nIt also has its own <code>valid</code> property which is true only <em>if every contained\ncontrol</em> is valid.</p>\n</div>\n<p>If you ran the app now and started typing in the <em>Name</em> input box,\nadding and deleting characters, you'd see them appear and disappear\nfrom the interpolated text.\nAt some point it might look like this:</p>\n<figure>\n  <img src=\"generated/images/guide/forms/ng-model-in-action.png\" alt=\"ngModel in action\" width=\"500\" height=\"74\">\n</figure>\n<p>The diagnostic is evidence that values really are flowing from the input box to the model and\nback again.</p>\n<div class=\"l-sub-section\">\n<p>That's <em>two-way data binding</em>.\nFor more information, see\n<a href=\"guide/template-syntax#ngModel\">Two-way binding with NgModel</a> on the\nthe <a href=\"guide/template-syntax\">Template Syntax</a> page.</p>\n</div>\n<p>Notice that you also added a <code>name</code> attribute to the <code>&#x3C;input></code> tag and set it to \"name\",\nwhich makes sense for the hero's name. Any unique value will do, but using a descriptive name is helpful.\nDefining a <code>name</code> attribute is a requirement when using <code>[(ngModel)]</code> in combination with a form.</p>\n<div class=\"l-sub-section\">\n<p>Internally, Angular creates <code><a href=\"api/forms/FormControl\">FormControl</a></code> instances and\nregisters them with an <code><a href=\"api/forms/NgForm\">NgForm</a></code> directive that Angular attached to the <code>&#x3C;form></code> tag.\nEach <code><a href=\"api/forms/FormControl\">FormControl</a></code> is registered under the name you assigned to the <code>name</code> attribute.\nRead more in the previous section, <a href=\"guide/forms#ngForm\">The NgForm directive</a>.</p>\n</div>\n<p>Add similar <code>[(ngModel)]</code> bindings and <code>name</code> attributes to <em>Alter Ego</em> and <em>Hero Power</em>.\nYou'll ditch the input box binding message\nand add a new binding (at the top) to the component's <code>diagnostic</code> property.\nThen you can confirm that two-way data binding works <em>for the entire hero model</em>.</p>\n<p>After revision, the core of the form should look like this:</p>\n<code-example path=\"forms/src/app/hero-form.component.html\" linenums=\"false\" title=\"src/app/hero-form.component.html (excerpt)\" region=\"ngModel-2\">\n{{diagnostic}}\n&#x3C;div class=\"form-group\">\n  &#x3C;label for=\"name\">Name&#x3C;/label>\n  &#x3C;input type=\"text\" class=\"form-control\" id=\"name\"\n         required\n         [(ngModel)]=\"model.name\" name=\"name\">\n&#x3C;/div>\n\n&#x3C;div class=\"form-group\">\n  &#x3C;label for=\"alterEgo\">Alter Ego&#x3C;/label>\n  &#x3C;input type=\"text\"  class=\"form-control\" id=\"alterEgo\"\n         [(ngModel)]=\"model.alterEgo\" name=\"alterEgo\">\n&#x3C;/div>\n\n&#x3C;div class=\"form-group\">\n  &#x3C;label for=\"power\">Hero Power&#x3C;/label>\n  &#x3C;select class=\"form-control\"  id=\"power\"\n          required\n          [(ngModel)]=\"model.power\" name=\"power\">\n    &#x3C;option *ngFor=\"let pow of powers\" [value]=\"pow\">{{pow}}&#x3C;/option>\n  &#x3C;/select>\n&#x3C;/div>\n\n\n</code-example>\n<div class=\"l-sub-section\">\n<ul>\n<li>Each input element has an <code>id</code> property that is used by the <code>label</code> element's <code>for</code> attribute\nto match the label to its input control.</li>\n<li>Each input element has a <code>name</code> property that is required by Angular forms to register the control with the form.</li>\n</ul>\n</div>\n<p>If you run the app now and change every hero model property, the form might display like this:</p>\n<figure>\n  <img src=\"generated/images/guide/forms/ng-model-in-action-2.png\" alt=\"ngModel in action\" width=\"515\" height=\"377\">\n</figure>\n<p>The diagnostic near the top of the form\nconfirms that all of your changes are reflected in the model.</p>\n<p><em>Delete</em> the <code>{{diagnostic}}</code> binding at the top as it has served its purpose.</p>\n<h2 id=\"track-control-state-and-validity-with-ngmodel\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#track-control-state-and-validity-with-ngmodel\"><i class=\"material-icons\">link</i></a>Track control state and validity with <em>ngModel</em></h2>\n<p>Using <code>ngModel</code> in a form gives you more than just two-way data binding. It also tells\nyou if the user touched the control, if the value changed, or if the value became invalid.</p>\n<p>The <em>NgModel</em> directive doesn't just track state; it updates the control with special Angular CSS classes that reflect the state.\nYou can leverage those class names to change the appearance of the control.</p>\n<table>\n  <tbody><tr>\n    <th>\n      State\n    </th>\n    <th>\n      Class if true\n    </th>\n    <th>\n      Class if false\n    </th>\n  </tr>\n  <tr>\n    <td>\n      The control has been visited.\n    </td>\n    <td>\n      <code>ng-touched</code>\n    </td>\n    <td>\n      <code>ng-untouched</code>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      The control's value has changed.\n    </td>\n    <td>\n      <code>ng-dirty</code>\n    </td>\n    <td>\n      <code>ng-pristine</code>\n    </td>\n  </tr>\n  <tr>\n    <td>\n      The control's value is valid.\n    </td>\n    <td>\n      <code>ng-valid</code>\n    </td>\n    <td>\n      <code>ng-invalid</code>\n    </td>\n  </tr>\n</tbody></table>\n<p>Temporarily add a <a href=\"guide/template-syntax#ref-vars\">template reference variable</a> named <code>spy</code>\nto the <em>Name</em> <code>&#x3C;input></code> tag and use it to display the input's CSS classes.</p>\n<code-example path=\"forms/src/app/hero-form.component.html\" linenums=\"false\" title=\"src/app/hero-form.component.html (excerpt)\" region=\"ngModelName-2\">\n&#x3C;input type=\"text\" class=\"form-control\" id=\"name\"\n  required\n  [(ngModel)]=\"model.name\" name=\"name\"\n  #spy>\n&#x3C;br>TODO: remove this: {{spy.className}}\n\n</code-example>\n<p>Now run the app and look at the <em>Name</em> input box.\nFollow these steps <em>precisely</em>:</p>\n<ol>\n<li>Look but don't touch.</li>\n<li>Click inside the name box, then click outside it.</li>\n<li>Add slashes to the end of the name.</li>\n<li>Erase the name.</li>\n</ol>\n<p>The actions and effects are as follows:</p>\n<figure>\n  <img src=\"generated/images/guide/forms/control-state-transitions-anim.gif\" alt=\"Control State Transition\" width=\"540\" height=\"72\">\n</figure>\n<p>You should see the following transitions and class names:</p>\n<figure>\n  <img src=\"generated/images/guide/forms/ng-control-class-changes.png\" alt=\"Control state transitions\" width=\"600\" height=\"311\">\n</figure>\n<p>The <code>ng-valid</code>/<code>ng-invalid</code> pair is the most interesting, because you want to send a\nstrong visual signal when the values are invalid. You also want to mark required fields.\nTo create such visual feedback, add definitions for the <code>ng-*</code> CSS classes.</p>\n<p><em>Delete</em> the <code>#spy</code> template reference variable and the <code>TODO</code> as they have served their purpose.</p>\n<h2 id=\"add-custom-css-for-visual-feedback\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#add-custom-css-for-visual-feedback\"><i class=\"material-icons\">link</i></a>Add custom CSS for visual feedback</h2>\n<p>You can mark required fields and invalid data at the same time with a colored bar\non the left of the input box:</p>\n<figure>\n  <img src=\"generated/images/guide/forms/validity-required-indicator.png\" alt=\"Invalid Form\" width=\"600\" height=\"171\">\n</figure>\n<p>You achieve this effect by adding these class definitions to a new <code>forms.css</code> file\nthat you add to the project as a sibling to <code>index.html</code>:</p>\n<code-example path=\"forms/src/forms.css\" title=\"src/forms.css\">\n.ng-valid[required], .ng-valid.required  {\n  border-left: 5px solid #42A948; /* green */\n}\n\n.ng-invalid:not(form)  {\n  border-left: 5px solid #a94442; /* red */\n}\n\n</code-example>\n<p>Update the <code>&#x3C;head></code> of <code>index.html</code> to include this style sheet:</p>\n<code-example path=\"forms/src/index.html\" linenums=\"false\" title=\"src/index.html (styles)\" region=\"styles\">\n&#x3C;link rel=\"stylesheet\" href=\"styles.css\">\n&#x3C;link rel=\"stylesheet\" href=\"forms.css\">\n\n</code-example>\n<h2 id=\"show-and-hide-validation-error-messages\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#show-and-hide-validation-error-messages\"><i class=\"material-icons\">link</i></a>Show and hide validation error messages</h2>\n<p>You can improve the form. The <em>Name</em> input box is required and clearing it turns the bar red.\nThat says something is wrong but the user doesn't know <em>what</em> is wrong or what to do about it.\nLeverage the control's state to reveal a helpful message.</p>\n<p>When the user deletes the name, the form should look like this:</p>\n<figure>\n  <img src=\"generated/images/guide/forms/name-required-error.png\" alt=\"Name required\" width=\"400\" height=\"108\">\n</figure>\n<p>To achieve this effect, extend the <code>&#x3C;input></code> tag with the following:</p>\n<ul>\n<li>A <a href=\"guide/template-syntax#ref-vars\">template reference variable</a>.</li>\n<li>The \"<em>is required</em>\" message in a nearby <code>&#x3C;div></code>, which you'll display only if the control is invalid.</li>\n</ul>\n<p>Here's an example of an error message added to the <em>name</em> input box:</p>\n<code-example path=\"forms/src/app/hero-form.component.html\" linenums=\"false\" title=\"src/app/hero-form.component.html (excerpt)\" region=\"name-with-error-msg\">\n&#x3C;label for=\"name\">Name&#x3C;/label>\n&#x3C;input type=\"text\" class=\"form-control\" id=\"name\"\n       required\n       [(ngModel)]=\"model.name\" name=\"name\"\n       #name=\"ngModel\">\n&#x3C;div [hidden]=\"name.valid || name.pristine\"\n     class=\"alert alert-danger\">\n  Name is required\n&#x3C;/div>\n\n</code-example>\n<p>You need a template reference variable to access the input box's Angular control from within the template.\nHere you created a variable called <code>name</code> and gave it the value \"ngModel\".</p>\n<div class=\"l-sub-section\">\n<p>Why \"ngModel\"?\nA directive's <a href=\"api/core/Directive\">exportAs</a> property\ntells Angular how to link the reference variable to the directive.\nYou set <code>name</code> to <code>ngModel</code> because the <code>ngModel</code> directive's <code>exportAs</code> property happens to be \"ngModel\".</p>\n</div>\n<p>You control visibility of the name error message by binding properties of the <code>name</code>\ncontrol to the message <code>&#x3C;div></code> element's <code>hidden</code> property.</p>\n<code-example path=\"forms/src/app/hero-form.component.html\" linenums=\"false\" title=\"src/app/hero-form.component.html (hidden-error-msg)\" region=\"hidden-error-msg\">\n&#x3C;div [hidden]=\"name.valid || name.pristine\"\n     class=\"alert alert-danger\">\n\n</code-example>\n<p>In this example, you hide the message when the control is valid or pristine;\n\"pristine\" means the user hasn't changed the value since it was displayed in this form.</p>\n<p>This user experience is the developer's choice. Some developers want the message to display at all times.\nIf you ignore the <code>pristine</code> state, you would hide the message only when the value is valid.\nIf you arrive in this component with a new (blank) hero or an invalid hero,\nyou'll see the error message immediately, before you've done anything.</p>\n<p>Some developers want the message to display only when the user makes an invalid change.\nHiding the message while the control is \"pristine\" achieves that goal.\nYou'll see the significance of this choice when you add a new hero to the form.</p>\n<p>The hero <em>Alter Ego</em> is optional so you can leave that be.</p>\n<p>Hero <em>Power</em> selection is required.\nYou can add the same kind of error handling to the <code>&#x3C;select></code> if you want,\nbut it's not imperative because the selection box already constrains the\npower to valid values.</p>\n<p>Now you'll add a new hero in this form.\nPlace a <em>New Hero</em> button at the bottom of the form and bind its click event to a <code>newHero</code> component method.</p>\n<code-example path=\"forms/src/app/hero-form.component.html\" region=\"new-hero-button-no-reset\" title=\"src/app/hero-form.component.html (New Hero button)\">\n&#x3C;button type=\"button\" class=\"btn btn-default\" (click)=\"newHero()\">New Hero&#x3C;/button>\n\n</code-example>\n<code-example path=\"forms/src/app/hero-form.component.ts\" region=\"new-hero\" title=\"src/app/hero-form.component.ts (New Hero method)\" linenums=\"false\">\nnewHero() {\n  this.model = new Hero(42, '', '');\n}\n\n</code-example>\n<p>Run the application again, click the <em>New Hero</em> button, and the form clears.\nThe <em>required</em> bars to the left of the input box are red, indicating invalid <code>name</code> and <code>power</code> properties.\nThat's understandable as these are required fields.\nThe error messages are hidden because the form is pristine; you haven't changed anything yet.</p>\n<p>Enter a name and click <em>New Hero</em> again.\nThe app displays a <em>Name is required</em> error message.\nYou don't want error messages when you create a new (empty) hero.\nWhy are you getting one now?</p>\n<p>Inspecting the element in the browser tools reveals that the <em>name</em> input box is <em>no longer pristine</em>.\nThe form remembers that you entered a name before clicking <em>New Hero</em>.\nReplacing the hero object <em>did not restore the pristine state</em> of the form controls.</p>\n<p>You have to clear all of the flags imperatively, which you can do\nby calling the form's <code>reset()</code> method after calling the <code>newHero()</code> method.</p>\n<code-example path=\"forms/src/app/hero-form.component.html\" region=\"new-hero-button-form-reset\" title=\"src/app/hero-form.component.html (Reset the form)\">\n&#x3C;button type=\"button\" class=\"btn btn-default\" (click)=\"newHero(); heroForm.reset()\">New Hero&#x3C;/button>\n\n</code-example>\n<p>Now clicking \"New Hero\" resets both the form and its control flags.</p>\n<h2 id=\"submit-the-form-with-ngsubmit\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#submit-the-form-with-ngsubmit\"><i class=\"material-icons\">link</i></a>Submit the form with <em>ngSubmit</em></h2>\n<p>The user should be able to submit this form after filling it in.\nThe <em>Submit</em> button at the bottom of the form\ndoes nothing on its own, but it will\ntrigger a form submit because of its type (<code>type=\"submit\"</code>).</p>\n<p>A \"form submit\" is useless at the moment.\nTo make it useful, bind the form's <code>ngSubmit</code> event property\nto the hero form component's <code>onSubmit()</code> method:</p>\n<code-example path=\"forms/src/app/hero-form.component.html\" linenums=\"false\" title=\"src/app/hero-form.component.html (ngSubmit)\" region=\"ngSubmit\">\n&#x3C;form (ngSubmit)=\"onSubmit()\" #heroForm=\"ngForm\">\n\n</code-example>\n<p>You'd already defined a template reference variable,\n<code>#heroForm</code>, and initialized it with the value \"ngForm\".\nNow, use that variable to access the form with the Submit button.</p>\n<p>You'll bind the form's overall validity via\nthe <code>heroForm</code> variable to the button's <code>disabled</code> property\nusing an event binding. Here's the code:</p>\n<code-example path=\"forms/src/app/hero-form.component.html\" linenums=\"false\" title=\"src/app/hero-form.component.html (submit-button)\" region=\"submit-button\">\n&#x3C;button type=\"submit\" class=\"btn btn-success\" [disabled]=\"!heroForm.form.valid\">Submit&#x3C;/button>\n\n</code-example>\n<p>If you run the application now, you find that the button is enabled—although\nit doesn't do anything useful yet.</p>\n<p>Now if you delete the Name, you violate the \"required\" rule, which\nis duly noted in the error message.\nThe <em>Submit</em> button is also disabled.</p>\n<p>Not impressed?  Think about it for a moment. What would you have to do to\nwire the button's enable/disabled state to the form's validity without Angular's help?</p>\n<p>For you, it was as simple as this:</p>\n<ol>\n<li>Define a template reference variable on the (enhanced) form element.</li>\n<li>Refer to that variable in a button many lines away.</li>\n</ol>\n<h2 id=\"toggle-two-form-regions-extra-credit\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#toggle-two-form-regions-extra-credit\"><i class=\"material-icons\">link</i></a>Toggle two form regions (extra credit)</h2>\n<p>Submitting the form isn't terribly dramatic at the moment.</p>\n<div class=\"l-sub-section\">\n<p>An unsurprising observation for a demo. To be honest,\njazzing it up won't teach you anything new about forms.\nBut this is an opportunity to exercise some of your newly won\nbinding skills.\nIf you aren't interested, skip to this page's conclusion.</p>\n</div>\n<p>For a more strikingly visual effect,\nhide the data entry area and display something else.</p>\n<p>Wrap the form in a <code>&#x3C;div></code> and bind\nits <code>hidden</code> property to the <code>HeroFormComponent.submitted</code> property.</p>\n<code-example path=\"forms/src/app/hero-form.component.html\" linenums=\"false\" title=\"src/app/hero-form.component.html (excerpt)\" region=\"edit-div\">\n&#x3C;div [hidden]=\"submitted\">\n  &#x3C;h1>Hero Form&#x3C;/h1>\n  &#x3C;form (ngSubmit)=\"onSubmit()\" #heroForm=\"ngForm\">\n\n     &#x3C;!-- ... all of the form ... -->\n\n  &#x3C;/form>\n&#x3C;/div>\n\n</code-example>\n<p>The main form is visible from the start because the\n<code>submitted</code> property is false until you submit the form,\nas this fragment from the <code>HeroFormComponent</code> shows:</p>\n<code-example path=\"forms/src/app/hero-form.component.ts\" linenums=\"false\" title=\"src/app/hero-form.component.ts (submitted)\" region=\"submitted\">\nsubmitted = false;\n\nonSubmit() { this.submitted = true; }\n\n</code-example>\n<p>When you click the <em>Submit</em> button, the <code>submitted</code> flag becomes true and the form disappears\nas planned.</p>\n<p>Now the app needs to show something else while the form is in the submitted state.\nAdd the following HTML below the <code>&#x3C;div></code> wrapper you just wrote:</p>\n<code-example path=\"forms/src/app/hero-form.component.html\" linenums=\"false\" title=\"src/app/hero-form.component.html (excerpt)\" region=\"submitted\">\n&#x3C;div [hidden]=\"!submitted\">\n  &#x3C;h2>You submitted the following:&#x3C;/h2>\n  &#x3C;div class=\"row\">\n    &#x3C;div class=\"col-xs-3\">Name&#x3C;/div>\n    &#x3C;div class=\"col-xs-9  pull-left\">{{ model.name }}&#x3C;/div>\n  &#x3C;/div>\n  &#x3C;div class=\"row\">\n    &#x3C;div class=\"col-xs-3\">Alter Ego&#x3C;/div>\n    &#x3C;div class=\"col-xs-9 pull-left\">{{ model.alterEgo }}&#x3C;/div>\n  &#x3C;/div>\n  &#x3C;div class=\"row\">\n    &#x3C;div class=\"col-xs-3\">Power&#x3C;/div>\n    &#x3C;div class=\"col-xs-9 pull-left\">{{ model.power }}&#x3C;/div>\n  &#x3C;/div>\n  &#x3C;br>\n  &#x3C;button class=\"btn btn-primary\" (click)=\"submitted=false\">Edit&#x3C;/button>\n&#x3C;/div>\n\n</code-example>\n<p>There's the hero again, displayed read-only with interpolation bindings.\nThis <code>&#x3C;div></code> appears only while the component is in the submitted state.</p>\n<p>The HTML includes an <em>Edit</em> button whose click event is bound to an expression\nthat clears the <code>submitted</code> flag.</p>\n<p>When you click the <em>Edit</em> button, this block disappears and the editable form reappears.</p>\n<h2 id=\"conclusion\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/forms#conclusion\"><i class=\"material-icons\">link</i></a>Conclusion</h2>\n<p>The Angular form discussed in this page takes advantage of the following\nframework features to provide support for data modification, validation, and more:</p>\n<ul>\n<li>An Angular HTML form template.</li>\n<li>A form component class with a <code>@Component</code> decorator.</li>\n<li>Handling form submission by binding to the <code>NgForm.ngSubmit</code> event property.</li>\n<li>Template-reference variables such as <code>#heroForm</code> and <code>#name</code>.</li>\n<li><code>[(ngModel)]</code> syntax for two-way data binding.</li>\n<li>The use of <code>name</code> attributes for validation and form-element change tracking.</li>\n<li>The reference variable’s <code>valid</code> property on input controls to check if a control is valid and show/hide error messages.</li>\n<li>Controlling the <em>Submit</em> button's enabled state by binding to <code><a href=\"api/forms/NgForm\">NgForm</a></code> validity.</li>\n<li>Custom CSS classes that provide visual feedback to users about invalid controls.</li>\n</ul>\n<p>The final project folder structure should look like this:</p>\n<div class=\"filetree\">\n  <div class=\"file\">\n    angular-forms\n  </div>\n  <div class=\"children\">\n    <div class=\"file\">\n      src\n    </div>\n    <div class=\"children\">\n      <div class=\"file\">\n        app\n      </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          app.component.ts\n        </div>\n        <div class=\"file\">\n          app.module.ts\n        </div>\n        <div class=\"file\">\n          hero.ts\n        </div>\n        <div class=\"file\">\n          hero-form.component.html\n        </div>\n        <div class=\"file\">\n          hero-form.component.ts\n        </div>\n      </div>\n      <div class=\"file\">\n        main.ts\n      </div>\n      <div class=\"file\">\n        tsconfig.json\n      </div>\n      <div class=\"file\">\n        index.html\n      </div>\n    </div>\n    <div class=\"file\">\n      node_modules ...\n    </div>\n    <div class=\"file\">\n      package.json\n    </div>\n  </div>\n</div>\n<p>Here’s the code for the final version of the application:</p>\n<code-tabs>\n\n  <code-pane title=\"hero-form.component.ts\" path=\"forms/src/app/hero-form.component.ts\" region=\"final\">\nimport { Component } from '@angular/core';\n\nimport { Hero }    from './hero';\n\n@Component({\n  selector: 'hero-form',\n  templateUrl: './hero-form.component.html'\n})\nexport class HeroFormComponent {\n\n  powers = ['Really Smart', 'Super Flexible',\n            'Super Hot', 'Weather Changer'];\n\n  model = new Hero(18, 'Dr IQ', this.powers[0], 'Chuck Overstreet');\n\n  submitted = false;\n\n  onSubmit() { this.submitted = true; }\n\n  newHero() {\n    this.model = new Hero(42, '', '');\n  }\n}\n\n\n</code-pane>\n\n  <code-pane title=\"hero-form.component.html\" path=\"forms/src/app/hero-form.component.html\" region=\"final\">\n&#x3C;div class=\"container\">\n  &#x3C;div [hidden]=\"submitted\">\n    &#x3C;h1>Hero Form&#x3C;/h1>\n    &#x3C;form (ngSubmit)=\"onSubmit()\" #heroForm=\"ngForm\">\n      &#x3C;div class=\"form-group\">\n        &#x3C;label for=\"name\">Name&#x3C;/label>\n        &#x3C;input type=\"text\" class=\"form-control\" id=\"name\"\n               required\n               [(ngModel)]=\"model.name\" name=\"name\"\n               #name=\"ngModel\">\n        &#x3C;div [hidden]=\"name.valid || name.pristine\"\n             class=\"alert alert-danger\">\n          Name is required\n        &#x3C;/div>\n      &#x3C;/div>\n\n      &#x3C;div class=\"form-group\">\n        &#x3C;label for=\"alterEgo\">Alter Ego&#x3C;/label>\n        &#x3C;input type=\"text\" class=\"form-control\" id=\"alterEgo\"\n               [(ngModel)]=\"model.alterEgo\" name=\"alterEgo\">\n      &#x3C;/div>\n\n      &#x3C;div class=\"form-group\">\n        &#x3C;label for=\"power\">Hero Power&#x3C;/label>\n        &#x3C;select class=\"form-control\" id=\"power\"\n                required\n                [(ngModel)]=\"model.power\" name=\"power\"\n                #power=\"ngModel\">\n          &#x3C;option *ngFor=\"let pow of powers\" [value]=\"pow\">{{pow}}&#x3C;/option>\n        &#x3C;/select>\n        &#x3C;div [hidden]=\"power.valid || power.pristine\" class=\"alert alert-danger\">\n          Power is required\n        &#x3C;/div>\n      &#x3C;/div>\n\n      &#x3C;button type=\"submit\" class=\"btn btn-success\" [disabled]=\"!heroForm.form.valid\">Submit&#x3C;/button>\n      &#x3C;button type=\"button\" class=\"btn btn-default\" (click)=\"newHero(); heroForm.reset()\">New Hero&#x3C;/button>\n    &#x3C;/form>\n  &#x3C;/div>\n\n  &#x3C;div [hidden]=\"!submitted\">\n    &#x3C;h2>You submitted the following:&#x3C;/h2>\n    &#x3C;div class=\"row\">\n      &#x3C;div class=\"col-xs-3\">Name&#x3C;/div>\n      &#x3C;div class=\"col-xs-9  pull-left\">{{ model.name }}&#x3C;/div>\n    &#x3C;/div>\n    &#x3C;div class=\"row\">\n      &#x3C;div class=\"col-xs-3\">Alter Ego&#x3C;/div>\n      &#x3C;div class=\"col-xs-9 pull-left\">{{ model.alterEgo }}&#x3C;/div>\n    &#x3C;/div>\n    &#x3C;div class=\"row\">\n      &#x3C;div class=\"col-xs-3\">Power&#x3C;/div>\n      &#x3C;div class=\"col-xs-9 pull-left\">{{ model.power }}&#x3C;/div>\n    &#x3C;/div>\n    &#x3C;br>\n    &#x3C;button class=\"btn btn-primary\" (click)=\"submitted=false\">Edit&#x3C;/button>\n  &#x3C;/div>\n&#x3C;/div>\n\n</code-pane>\n\n  <code-pane title=\"hero.ts\" path=\"forms/src/app/hero.ts\">\nexport class Hero {\n\n  constructor(\n    public id: number,\n    public name: string,\n    public power: string,\n    public alterEgo?: string\n  ) {  }\n\n}\n\n\n</code-pane>\n\n  <code-pane title=\"app.module.ts\" path=\"forms/src/app/app.module.ts\">\nimport { NgModule }      from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule }   from '@angular/forms';\n\nimport { AppComponent }  from './app.component';\nimport { HeroFormComponent } from './hero-form.component';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    FormsModule\n  ],\n  declarations: [\n    AppComponent,\n    HeroFormComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-pane>\n\n  <code-pane title=\"app.component.ts\" path=\"forms/src/app/app.component.ts\">\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'my-app',\n  template: '&#x3C;hero-form>&#x3C;/hero-form>'\n})\nexport class AppComponent { }\n\n\n</code-pane>\n\n  <code-pane title=\"main.ts\" path=\"forms/src/main.ts\">\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { AppModule } from './app/app.module';\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n\n</code-pane>\n\n  <code-pane title=\"index.html\" path=\"forms/src/index.html\">\n&#x3C;html>\n  &#x3C;head>\n    &#x3C;title>Hero Form&#x3C;/title>\n    &#x3C;base href=\"/\">\n    &#x3C;meta charset=\"UTF-8\">\n    &#x3C;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n    &#x3C;link rel=\"stylesheet\"\n          href=\"https://unpkg.com/bootstrap@3.3.7/dist/css/bootstrap.min.css\">\n    &#x3C;link rel=\"stylesheet\" href=\"styles.css\">\n    &#x3C;link rel=\"stylesheet\" href=\"forms.css\">\n\n    &#x3C;!-- Polyfills -->\n    &#x3C;script src=\"node_modules/core-js/client/shim.min.js\">&#x3C;/script>\n\n    &#x3C;script src=\"node_modules/zone.js/dist/zone.js\">&#x3C;/script>\n    &#x3C;script src=\"node_modules/systemjs/dist/system.src.js\">&#x3C;/script>\n\n    &#x3C;script src=\"systemjs.config.js\">&#x3C;/script>\n    &#x3C;script>\n      System.import('main.js').catch(function(err){ console.error(err); });\n    &#x3C;/script>\n  &#x3C;/head>\n\n  &#x3C;body>\n    &#x3C;my-app>Loading...&#x3C;/my-app>\n  &#x3C;/body>\n\n&#x3C;/html>\n\n\n</code-pane>\n\n  <code-pane title=\"forms.css\" path=\"forms/src/forms.css\">\n.ng-valid[required], .ng-valid.required  {\n  border-left: 5px solid #42A948; /* green */\n}\n\n.ng-invalid:not(form)  {\n  border-left: 5px solid #a94442; /* red */\n}\n\n</code-pane>\n\n</code-tabs>\n\n</div>"
}