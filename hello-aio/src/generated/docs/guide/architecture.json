{
  "id": "guide/architecture",
  "title": "Architecture Overview",
  "contents": "\n<div class=\"content\">\n<h1 id=\"architecture-overview\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture#architecture-overview\"><i class=\"material-icons\">link</i></a>Architecture Overview</h1>\n<p>Angular is a framework for building client applications in HTML and\neither JavaScript or a language like TypeScript that compiles to JavaScript.</p>\n<p>The framework consists of several libraries, some of them core and some optional.</p>\n<p>You write Angular applications by composing HTML <em>templates</em> with Angularized markup,\nwriting <em>component</em> classes to manage those templates, adding application logic in <em>services</em>,\nand boxing components and services in <em>modules</em>.</p>\n<p>Then you launch the app by <em>bootstrapping</em> the <em>root module</em>.\nAngular takes over, presenting your application content in a browser and\nresponding to user interactions according to the instructions you've provided.</p>\n<p>Of course, there is more to it than this.\nYou'll learn the details in the pages that follow. For now, focus on the big picture.</p>\n<figure>\n  <img src=\"generated/images/guide/architecture/overview2.png\" alt=\"overview\" width=\"700\" height=\"356\">\n</figure>\n<div class=\"l-sub-section\">\n<p>  The code referenced on this page is available as a <live-example></live-example>.</p>\n</div>\n<h2 id=\"modules\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture#modules\"><i class=\"material-icons\">link</i></a>Modules</h2>\n<img src=\"generated/images/guide/architecture/module.png\" alt=\"Component\" class=\"left\" width=\"240\" height=\"183\">\n<p>Angular apps are modular and Angular has its own modularity system called <em>NgModules</em>.</p>\n<p>NgModules are a big deal.\nThis page introduces modules; the <a href=\"guide/ngmodule\">NgModules</a> page covers them in depth.</p>\n<br class=\"clear\">\n<p>Every Angular app has at least one NgModule class, <a href=\"guide/bootstrapping\" title=\"Bootstrapping\">the <em>root module</em></a>,\nconventionally named <code>AppModule</code>.</p>\n<p>While the <em>root module</em> may be the only module in a small application, most apps have many more\n<em>feature modules</em>, each a cohesive block of code dedicated to an application domain,\na workflow, or a closely related set of capabilities.</p>\n<p>An NgModule, whether a <em>root</em> or <em>feature</em>, is a class with an <code>@NgModule</code> decorator.</p>\n<div class=\"l-sub-section\">\n<p>  Decorators are functions that modify JavaScript classes.\nAngular has many decorators that attach metadata to classes so that it knows\nwhat those classes mean and how they should work.\n<a href=\"https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841#.x5c2ndtx0\">\nLearn more</a> about decorators on the web.</p>\n</div>\n<p><code><a href=\"api/core/NgModule\">NgModule</a></code> is a decorator function that takes a single metadata object whose properties describe the module.\nThe most important properties are:</p>\n<ul>\n<li>\n<p><code>declarations</code> - the <em>view classes</em> that belong to this module.\nAngular has three kinds of view classes: <a href=\"guide/architecture#components\">components</a>, <a href=\"guide/architecture#directives\">directives</a>, and <a href=\"guide/pipes\">pipes</a>.</p>\n</li>\n<li>\n<p><code>exports</code> - the subset of declarations that should be visible and usable in the component <a href=\"guide/architecture#templates\">templates</a> of other modules.</p>\n</li>\n<li>\n<p><code>imports</code> - other modules whose exported classes are needed by component templates declared in <em>this</em> module.</p>\n</li>\n<li>\n<p><code>providers</code> - creators of <a href=\"guide/architecture#services\">services</a> that this module contributes to\nthe global collection of services; they become accessible in all parts of the app.</p>\n</li>\n<li>\n<p><code>bootstrap</code> - the main application view, called the <em>root component</em>,\nthat hosts all other app views. Only the <em>root module</em> should set this <code>bootstrap</code> property.</p>\n</li>\n</ul>\n<p>Here's a simple root module:</p>\n<code-example path=\"architecture/src/app/mini-app.ts\" region=\"module\" title=\"src/app/app.module.ts\" linenums=\"false\">\nimport { NgModule }      from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n@NgModule({\n  imports:      [ BrowserModule ],\n  providers:    [ Logger ],\n  declarations: [ AppComponent ],\n  exports:      [ AppComponent ],\n  bootstrap:    [ AppComponent ]\n})\nexport class AppModule { }\n\n</code-example>\n<div class=\"l-sub-section\">\n<p>  The <code>export</code> of <code>AppComponent</code> is just to show how to export; it isn't actually necessary in this example. A root module has no reason to <em>export</em> anything because other components don't need to <em>import</em> the root module.</p>\n</div>\n<p>Launch an application by <em>bootstrapping</em> its root module.\nDuring development you're likely to bootstrap the <code>AppModule</code> in a <code>main.ts</code> file like this one.</p>\n<code-example path=\"architecture/src/main.ts\" title=\"src/main.ts\" linenums=\"false\">\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { AppModule } from './app/app.module';\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n\n</code-example>\n<h3 id=\"ngmodules-vs-javascript-modules\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture#ngmodules-vs-javascript-modules\"><i class=\"material-icons\">link</i></a>NgModules vs. JavaScript modules</h3>\n<p>The NgModule — a class decorated with <code>@NgModule</code> — is a fundamental feature of Angular.</p>\n<p>JavaScript also has its own module system for managing collections of JavaScript objects.\nIt's completely different and unrelated to the NgModule system.</p>\n<p>In JavaScript each <em>file</em> is a module and all objects defined in the file belong to that module.\nThe module declares some objects to be public by marking them with the <code>export</code> key word.\nOther JavaScript modules use <em>import statements</em> to access public objects from other modules.</p>\n<code-example path=\"architecture/src/app/app.module.ts\" region=\"imports\" linenums=\"false\">\nimport { NgModule }     from '@angular/core';\nimport { AppComponent } from './app.component';\n\n</code-example>\n<code-example path=\"architecture/src/app/app.module.ts\" region=\"export\" linenums=\"false\">\nexport class AppModule { }\n\n</code-example>\n<div class=\"l-sub-section\">\n  <a href=\"http://exploringjs.com/es6/ch_modules.html\">Learn more about the JavaScript module system on the web.</a>\n</div>\n<p>These are two different and <em>complementary</em> module systems. Use them both to write your apps.</p>\n<h3 id=\"angular-libraries\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture#angular-libraries\"><i class=\"material-icons\">link</i></a>Angular libraries</h3>\n<img src=\"generated/images/guide/architecture/library-module.png\" alt=\"Component\" class=\"left\" width=\"240\" height=\"181\">\n<p>Angular ships as a collection of JavaScript modules. You can think of them as library modules.</p>\n<p>Each Angular library name begins with the <code>@angular</code> prefix.</p>\n<p>You install them with the <strong>npm</strong> package manager and import parts of them with JavaScript <code>import</code> statements.</p>\n<br class=\"clear\">\n<p>For example, import Angular's <code><a href=\"api/core/Component\">Component</a></code> decorator from the <code>@angular/core</code> library like this:</p>\n<code-example path=\"architecture/src/app/app.component.ts\" region=\"import\" linenums=\"false\">\nimport { Component } from '@angular/core';\n\n</code-example>\n<p>You also import NgModules<em> from Angular _libraries</em> using JavaScript import statements:</p>\n<code-example path=\"architecture/src/app/mini-app.ts\" region=\"import-browser-module\" linenums=\"false\">\nimport { BrowserModule } from '@angular/platform-browser';\n\n</code-example>\n<p>In the example of the simple root module above, the application module needs material from within that <code><a href=\"api/platform-browser/BrowserModule\">BrowserModule</a></code>. To access that material, add it to the <code>@NgModule</code> metadata <code>imports</code> like this.</p>\n<code-example path=\"architecture/src/app/mini-app.ts\" region=\"ngmodule-imports\" linenums=\"false\">\nimports:      [ BrowserModule ],\n\n</code-example>\n<p>In this way you're using both the Angular and JavaScript module systems <em>together</em>.</p>\n<p>It's easy to confuse the two systems because they share the common vocabulary of \"imports\" and \"exports\".\nHang in there. The confusion yields to clarity with time and experience.</p>\n<div class=\"l-sub-section\">\n<p>  Learn more from the <a href=\"guide/ngmodule\">NgModules</a> page.</p>\n</div>\n<hr>\n<h2 id=\"components\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture#components\"><i class=\"material-icons\">link</i></a>Components</h2>\n<img src=\"generated/images/guide/architecture/hero-component.png\" alt=\"Component\" class=\"left\" width=\"200\" height=\"115\">\n<p>A <em>component</em> controls a patch of screen called a <em>view</em>.</p>\n<p>For example, the following views are controlled by components:</p>\n<ul>\n<li>The app root with the navigation links.</li>\n<li>The list of heroes.</li>\n<li>The hero editor.</li>\n</ul>\n<p>You define a component's application logic—what it does to support the view—inside a class.\nThe class interacts with the view through an API of properties and methods.</p>\n<a id=\"component-code\"></a>\n<p>For example, this <code>HeroListComponent</code> has a <code>heroes</code> property that returns an array of heroes\nthat it acquires from a service.\n<code>HeroListComponent</code> also has a <code>selectHero()</code> method that sets a <code>selectedHero</code> property when the user clicks to choose a hero from that list.</p>\n<code-example path=\"architecture/src/app/hero-list.component.ts\" linenums=\"false\" title=\"src/app/hero-list.component.ts (class)\" region=\"class\">\nexport class HeroListComponent implements OnInit {\n  heroes: Hero[];\n  selectedHero: Hero;\n\n  constructor(private service: HeroService) { }\n\n  ngOnInit() {\n    this.heroes = this.service.getHeroes();\n  }\n\n  selectHero(hero: Hero) { this.selectedHero = hero; }\n}\n\n\n</code-example>\n<p>Angular creates, updates, and destroys components as the user moves through the application.\nYour app can take action at each moment in this lifecycle through optional <a href=\"guide/lifecycle-hooks\">lifecycle hooks</a>, like <code>ngOnInit()</code> declared above.</p>\n<hr>\n<h2 id=\"templates\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture#templates\"><i class=\"material-icons\">link</i></a>Templates</h2>\n<img src=\"generated/images/guide/architecture/template.png\" alt=\"Template\" class=\"left\" width=\"200\" height=\"114\">\n<p>You define a component's view with its companion <strong>template</strong>. A template is a form of HTML\nthat tells Angular how to render the component.</p>\n<p>A template looks like regular HTML, except for a few differences. Here is a\ntemplate for our <code>HeroListComponent</code>:</p>\n<code-example path=\"architecture/src/app/hero-list.component.html\" title=\"src/app/hero-list.component.html\">\n&#x3C;h2>Hero List&#x3C;/h2>\n\n&#x3C;p>&#x3C;i>Pick a hero from the list&#x3C;/i>&#x3C;/p>\n&#x3C;ul>\n  &#x3C;li *ngFor=\"let hero of heroes\" (click)=\"selectHero(hero)\">\n    {{hero.name}}\n  &#x3C;/li>\n&#x3C;/ul>\n\n&#x3C;hero-detail *ngIf=\"selectedHero\" [hero]=\"selectedHero\">&#x3C;/hero-detail>\n\n\n</code-example>\n<p>Although this template uses typical HTML elements like <code>&#x3C;h2></code> and  <code>&#x3C;p></code>, it also has some differences. Code like <code>*ngFor</code>, <code>{{hero.name}}</code>, <code>(click)</code>, <code>[hero]</code>, and <code>&#x3C;hero-detail></code> uses Angular's <a href=\"guide/template-syntax\">template syntax</a>.</p>\n<p>In the last line of the template, the <code>&#x3C;hero-detail></code> tag is a custom element that represents a new component, <code>HeroDetailComponent</code>.</p>\n<p>The <code>HeroDetailComponent</code> is a <em>different</em> component than the <code>HeroListComponent</code> you've been reviewing.\nThe <code>HeroDetailComponent</code> (code not shown) presents facts about a particular hero, the\nhero that the user selects from the list presented by the <code>HeroListComponent</code>.\nThe <code>HeroDetailComponent</code> is a <strong>child</strong> of the <code>HeroListComponent</code>.</p>\n<img src=\"generated/images/guide/architecture/component-tree.png\" alt=\"Metadata\" class=\"left\" width=\"300\" height=\"231\">\n<p>Notice how <code>&#x3C;hero-detail></code> rests comfortably among native HTML elements. Custom components mix seamlessly with native HTML in the same layouts.</p>\n<hr class=\"clear\">\n<h2 id=\"metadata\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture#metadata\"><i class=\"material-icons\">link</i></a>Metadata</h2>\n<img src=\"generated/images/guide/architecture/metadata.png\" alt=\"Metadata\" class=\"left\" width=\"170\" height=\"48\">\n<p>Metadata tells Angular how to process a class.</p>\n<br class=\"clear\">\n<p><a href=\"guide/architecture#component-code\">Looking back at the code</a> for <code>HeroListComponent</code>, you can see that it's just a class.\nThere is no evidence of a framework, no \"Angular\" in it at all.</p>\n<p>In fact, <code>HeroListComponent</code> really is <em>just a class</em>. It's not a component until you <em>tell Angular about it</em>.</p>\n<p>To tell Angular that <code>HeroListComponent</code> is a component, attach <strong>metadata</strong> to the class.</p>\n<p>In TypeScript, you attach metadata by using a <strong>decorator</strong>.\nHere's some metadata for <code>HeroListComponent</code>:</p>\n<code-example path=\"architecture/src/app/hero-list.component.ts\" linenums=\"false\" title=\"src/app/hero-list.component.ts (metadata)\" region=\"metadata\">\n@Component({\n  selector:    'hero-list',\n  templateUrl: './hero-list.component.html',\n  providers:  [ HeroService ]\n})\nexport class HeroListComponent implements OnInit {\n/* . . . */\n}\n\n\n</code-example>\n<p>Here is the <code>@Component</code> decorator, which identifies the class\nimmediately below it as a component class.</p>\n<p>The <code>@Component</code> decorator takes a required configuration object with the\ninformation Angular needs to create and present the component and its view.</p>\n<p>Here are a few of the most useful <code>@Component</code> configuration options:</p>\n<ul>\n<li>\n<p><code>selector</code>: CSS selector that tells Angular to create and insert an instance of this component\nwhere it finds a <code>&#x3C;hero-list></code> tag in <em>parent</em> HTML.\nFor example, if an app's  HTML contains <code>&#x3C;hero-list>&#x3C;/hero-list></code>, then\nAngular inserts an instance of the <code>HeroListComponent</code> view between those tags.</p>\n</li>\n<li>\n<p><code>templateUrl</code>: module-relative address of this component's HTML template, shown <a href=\"guide/architecture#templates\">above</a>.</p>\n</li>\n<li>\n<p><code>providers</code>: array of <strong>dependency injection providers</strong> for services that the component requires.\nThis is one way to tell Angular that the component's constructor requires a <code>HeroService</code>\nso it can get the list of heroes to display.</p>\n</li>\n</ul>\n<img src=\"generated/images/guide/architecture/template-metadata-component.png\" alt=\"Metadata\" class=\"left\" width=\"114\" height=\"201\">\n<p>The metadata in the <code>@Component</code> tells Angular where to get the major building blocks you specify for the component.</p>\n<p>The template, metadata, and component together describe a view.</p>\n<p>Apply other metadata decorators in a similar fashion to guide Angular behavior.\n<code>@Injectable</code>, <code>@Input</code>, and <code>@Output</code> are a few of the more popular decorators.</p>\n<br class=\"clear\">\n<p>The architectural takeaway is that you must add metadata to your code\nso that Angular knows what to do.</p>\n<hr>\n<h2 id=\"data-binding\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture#data-binding\"><i class=\"material-icons\">link</i></a>Data binding</h2>\n<p>Without a framework, you would be responsible for pushing data values into the HTML controls and turning user responses\ninto actions and value updates. Writing such push/pull logic by hand is tedious, error-prone, and a nightmare to\nread as any experienced jQuery programmer can attest.</p>\n<img src=\"generated/images/guide/architecture/databinding.png\" alt=\"Data Binding\" class=\"left\" width=\"220\" height=\"205\">\n<p>Angular supports <strong>data binding</strong>,\na mechanism for coordinating parts of a template with parts of a component.\nAdd binding markup to the template HTML to tell Angular how to connect both sides.</p>\n<p>As the diagram shows, there are four forms of data binding syntax. Each form has a direction — to the DOM, from the DOM, or in both directions.</p>\n<br class=\"clear\">\n<p>The <code>HeroListComponent</code> <a href=\"guide/architecture#templates\">example</a> template has three forms:</p>\n<code-example path=\"architecture/src/app/hero-list.component.1.html\" linenums=\"false\" title=\"src/app/hero-list.component.html (binding)\" region=\"binding\">\n&#x3C;li>{{hero.name}}&#x3C;/li>\n&#x3C;hero-detail [hero]=\"selectedHero\">&#x3C;/hero-detail>\n&#x3C;li (click)=\"selectHero(hero)\">&#x3C;/li>\n\n</code-example>\n<ul>\n<li>\n<p>The <code>{{hero.name}}</code> <a href=\"guide/displaying-data#interpolation\"><em>interpolation</em></a>\ndisplays the component's <code>hero.name</code> property value within the <code>&#x3C;li></code> element.</p>\n</li>\n<li>\n<p>The <code>[hero]</code> <a href=\"guide/template-syntax#property-binding\"><em>property binding</em></a> passes the value of <code>selectedHero</code> from\nthe parent <code>HeroListComponent</code> to the <code>hero</code> property of the child <code>HeroDetailComponent</code>.</p>\n</li>\n<li>\n<p>The <code>(click)</code> <a href=\"guide/user-input#click\"><em>event binding</em></a> calls the component's <code>selectHero</code> method when the user clicks a hero's name.</p>\n</li>\n</ul>\n<p><strong>Two-way data binding</strong> is an important fourth form\nthat combines property and event binding in a single notation, using the <code>ngModel</code> directive.\nHere's an example from the <code>HeroDetailComponent</code> template:</p>\n<code-example path=\"architecture/src/app/hero-detail.component.html\" linenums=\"false\" title=\"src/app/hero-detail.component.html (ngModel)\" region=\"ngModel\">\n&#x3C;input [(ngModel)]=\"hero.name\">\n\n</code-example>\n<p>In two-way binding, a data property value flows to the input box from the component as with property binding.\nThe user's changes also flow back to the component, resetting the property to the latest value,\nas with event binding.</p>\n<p>Angular processes <em>all</em> data bindings once per JavaScript event cycle,\nfrom the root of the application component tree through all child components.</p>\n<figure>\n  <img src=\"generated/images/guide/architecture/component-databinding.png\" alt=\"Data Binding\" width=\"358\" height=\"219\">\n</figure>\n<p>Data binding plays an important role in communication between a template and its component.</p>\n<figure>\n  <img src=\"generated/images/guide/architecture/parent-child-binding.png\" alt=\"Parent/Child binding\" width=\"358\" height=\"171\">\n</figure>\n<p>Data binding is also important for communication between parent and child components.</p>\n<hr>\n<h2 id=\"directives\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture#directives\"><i class=\"material-icons\">link</i></a>Directives</h2>\n<img src=\"generated/images/guide/architecture/directive.png\" alt=\"Parent child\" class=\"left\" width=\"150\" height=\"147\">\n<p>Angular templates are <em>dynamic</em>. When Angular renders them, it transforms the DOM\naccording to the instructions given by <strong>directives</strong>.</p>\n<p>A directive is a class with a <code>@Directive</code> decorator.\nA component is a <em>directive-with-a-template</em>;\na <code>@Component</code> decorator is actually a <code>@Directive</code> decorator extended with template-oriented features.</p>\n<div class=\"l-sub-section\">\n<p>  While <strong>a component is technically a directive</strong>,\ncomponents are so distinctive and central to Angular applications that this architectural overview separates components from directives.</p>\n</div>\n<p>Two <em>other</em> kinds of directives exist: <em>structural</em> and <em>attribute</em> directives.</p>\n<p>They tend to appear within an element tag as attributes do,\nsometimes by name but more often as the target of an assignment or a binding.</p>\n<p><strong>Structural</strong> directives alter layout by adding, removing, and replacing elements in DOM.</p>\n<p>The <a href=\"guide/architecture#templates\">example template</a> uses two built-in structural directives:</p>\n<code-example path=\"architecture/src/app/hero-list.component.1.html\" linenums=\"false\" title=\"src/app/hero-list.component.html (structural)\" region=\"structural\">\n&#x3C;li *ngFor=\"let hero of heroes\">&#x3C;/li>\n&#x3C;hero-detail *ngIf=\"selectedHero\">&#x3C;/hero-detail>\n\n\n</code-example>\n<ul>\n<li><a href=\"guide/displaying-data#ngFor\"><code>*ngFor</code></a> tells Angular to stamp out one <code>&#x3C;li></code> per hero in the <code>heroes</code> list.</li>\n<li><a href=\"guide/displaying-data#ngIf\"><code>*ngIf</code></a> includes the <code>HeroDetail</code> component only if a selected hero exists.</li>\n</ul>\n<p><strong>Attribute</strong> directives alter the appearance or behavior of an existing element.\nIn templates they look like regular HTML attributes, hence the name.</p>\n<p>The <code>ngModel</code> directive, which implements two-way data binding, is\nan example of an attribute directive. <code>ngModel</code> modifies the behavior of\nan existing element (typically an <code>&#x3C;input></code>)\nby setting its display value property and responding to change events.</p>\n<code-example path=\"architecture/src/app/hero-detail.component.html\" linenums=\"false\" title=\"src/app/hero-detail.component.html (ngModel)\" region=\"ngModel\">\n&#x3C;input [(ngModel)]=\"hero.name\">\n\n</code-example>\n<p>Angular has a few more directives that either alter the layout structure\n(for example, <a href=\"guide/template-syntax#ngSwitch\">ngSwitch</a>)\nor modify aspects of DOM elements and components\n(for example, <a href=\"guide/template-syntax#ngStyle\">ngStyle</a> and <a href=\"guide/template-syntax#ngClass\">ngClass</a>).</p>\n<p>Of course, you can also write your own directives. Components such as\n<code>HeroListComponent</code> are one kind of custom directive.</p>\n<!-- PENDING: link to where to learn more about other kinds! -->\n<hr>\n<h2 id=\"services\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture#services\"><i class=\"material-icons\">link</i></a>Services</h2>\n<img src=\"generated/images/guide/architecture/service.png\" alt=\"Service\" class=\"left\" width=\"161\" height=\"125\">\n<p><em>Service</em> is a broad category encompassing any value, function, or feature that your application needs.</p>\n<p>Almost anything can be a service.\nA service is typically a class with a narrow, well-defined purpose. It should do something specific and do it well.\n<br class=\"clear\"></p>\n<p>Examples include:</p>\n<ul>\n<li>logging service</li>\n<li>data service</li>\n<li>message bus</li>\n<li>tax calculator</li>\n<li>application configuration</li>\n</ul>\n<p>There is nothing specifically <em>Angular</em> about services. Angular has no definition of a service.\nThere is no service base class, and no place to register a service.</p>\n<p>Yet services are fundamental to any Angular application. Components are big consumers of services.</p>\n<p>Here's an example of a service class that logs to the browser console:</p>\n<code-example path=\"architecture/src/app/logger.service.ts\" linenums=\"false\" title=\"src/app/logger.service.ts (class)\" region=\"class\">\nexport class Logger {\n  log(msg: any)   { console.log(msg); }\n  error(msg: any) { console.error(msg); }\n  warn(msg: any)  { console.warn(msg); }\n}\n\n\n</code-example>\n<p>Here's a <code>HeroService</code> that uses a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a> to fetch heroes.\nThe <code>HeroService</code> depends on the <code>Logger</code> service and another <code>BackendService</code> that handles the server communication grunt work.</p>\n<code-example path=\"architecture/src/app/hero.service.ts\" linenums=\"false\" title=\"src/app/hero.service.ts (class)\" region=\"class\">\nexport class HeroService {\n  private heroes: Hero[] = [];\n\n  constructor(\n    private backend: BackendService,\n    private logger: Logger) { }\n\n  getHeroes() {\n    this.backend.getAll(Hero).then( (heroes: Hero[]) => {\n      this.logger.log(`Fetched ${heroes.length} heroes.`);\n      this.heroes.push(...heroes); // fill cache\n    });\n    return this.heroes;\n  }\n}\n\n\n</code-example>\n<p>Services are everywhere.</p>\n<p>Component classes should be lean. They don't fetch data from the server,\nvalidate user input, or log directly to the console.\nThey delegate such tasks to services.</p>\n<p>A component's job is to enable the user experience and nothing more. It mediates between the view (rendered by the template)\nand the application logic (which often includes some notion of a <em>model</em>).\nA good component presents properties and methods for data binding.\nIt delegates everything nontrivial to services.</p>\n<p>Angular doesn't <em>enforce</em> these principles.\nIt won't complain if you write a \"kitchen sink\" component with 3000 lines.</p>\n<p>Angular does help you <em>follow</em> these principles by making it easy to factor your\napplication logic into services and make those services available to components through <em>dependency injection</em>.</p>\n<hr>\n<h2 id=\"dependency-injection\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture#dependency-injection\"><i class=\"material-icons\">link</i></a>Dependency injection</h2>\n<img src=\"generated/images/guide/architecture/dependency-injection.png\" alt=\"Service\" class=\"left\" width=\"200\" height=\"90\">\n<p><em>Dependency injection</em> is a way to supply a new instance of a class\nwith the fully-formed dependencies it requires. Most dependencies are services.\nAngular uses dependency injection to provide new components with the services they need.</p>\n<br class=\"clear\">\n<p>Angular can tell which services a component needs by looking at the types of its constructor parameters.\nFor example, the constructor of your <code>HeroListComponent</code> needs a <code>HeroService</code>:</p>\n<code-example path=\"architecture/src/app/hero-list.component.ts\" linenums=\"false\" title=\"src/app/hero-list.component.ts (constructor)\" region=\"ctor\">\nconstructor(private service: HeroService) { }\n\n</code-example>\n<p>When Angular creates a component, it first asks an <strong>injector</strong> for\nthe services that the component requires.</p>\n<p>An injector maintains a container of service instances that it has previously created.\nIf a requested service instance is not in the container, the injector makes one and adds it to the container\nbefore returning the service to Angular.\nWhen all requested services have been resolved and returned,\nAngular can call the component's constructor with those services as arguments.\nThis is <em>dependency injection</em>.</p>\n<p>The process of <code>HeroService</code> injection looks a bit like this:</p>\n<figure>\n  <img src=\"generated/images/guide/architecture/injector-injects.png\" alt=\"Service\" width=\"479\" height=\"218\">\n</figure>\n<p>If the injector doesn't have a <code>HeroService</code>, how does it know how to make one?</p>\n<p>In brief, you must have previously registered a <strong>provider</strong> of the <code>HeroService</code> with the injector.\nA provider is something that can create or return a service, typically the service class itself.</p>\n<p>You can register providers in modules or in components.</p>\n<p>In general, add providers to the <a href=\"guide/architecture#modules\">root module</a> so that\nthe same instance of a service is available everywhere.</p>\n<code-example path=\"architecture/src/app/app.module.ts\" linenums=\"false\" title=\"src/app/app.module.ts (module providers)\" region=\"providers\">\nproviders: [\n  BackendService,\n  HeroService,\n  Logger\n],\n\n</code-example>\n<p>Alternatively, register at a component level in the <code>providers</code> property of the <code>@Component</code> metadata:</p>\n<code-example path=\"architecture/src/app/hero-list.component.ts\" linenums=\"false\" title=\"src/app/hero-list.component.ts (component providers)\" region=\"providers\">\n@Component({\n  selector:    'hero-list',\n  templateUrl: './hero-list.component.html',\n  providers:  [ HeroService ]\n})\n\n</code-example>\n<p>Registering at a component level means you get a new instance of the\nservice with each new instance of that component.</p>\n<!-- We've vastly oversimplified dependency injection for this overview.\nThe full story is in the [dependency injection](guide/dependency-injection) page. -->\n<p>Points to remember about dependency injection:</p>\n<ul>\n<li>\n<p>Dependency injection is wired into the Angular framework and used everywhere.</p>\n</li>\n<li>\n<p>The <em>injector</em> is the main mechanism.</p>\n<ul>\n<li>An injector maintains a <em>container</em> of service instances that it created.</li>\n<li>An injector can create a new service instance from a <em>provider</em>.</li>\n</ul>\n</li>\n<li>\n<p>A <em>provider</em> is a recipe for creating a service.</p>\n</li>\n<li>\n<p>Register <em>providers</em> with injectors.</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"wrap-up\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/architecture#wrap-up\"><i class=\"material-icons\">link</i></a>Wrap up</h2>\n<p>You've learned the basics about the eight main building blocks of an Angular application:</p>\n<ul>\n<li><a href=\"guide/architecture#modules\">Modules</a></li>\n<li><a href=\"guide/architecture#components\">Components</a></li>\n<li><a href=\"guide/architecture#templates\">Templates</a></li>\n<li><a href=\"guide/architecture#metadata\">Metadata</a></li>\n<li><a href=\"guide/architecture#data-binding\">Data binding</a></li>\n<li><a href=\"guide/architecture#directives\">Directives</a></li>\n<li><a href=\"guide/architecture#services\">Services</a></li>\n<li><a href=\"guide/architecture#dependency-injection\">Dependency injection</a></li>\n</ul>\n<p>That's a foundation for everything else in an Angular application,\nand it's more than enough to get going.\nBut it doesn't include everything you need to know.</p>\n<p>Here is a brief, alphabetical list of other important Angular features and services.\nMost of them are covered in this documentation (or soon will be).</p>\n<blockquote>\n<p><a href=\"guide/animations\"><strong>Animations</strong></a>: Animate component behavior\nwithout deep knowledge of animation techniques or CSS with Angular's animation library.</p>\n<p><strong>Change detection</strong>: The change detection documentation will cover how Angular decides that a component property value has changed,\nwhen to update the screen, and how it uses <strong>zones</strong> to intercept asynchronous activity and run its change detection strategies.</p>\n<p><strong>Events</strong>: The events documentation will cover how to use components and services to raise events with mechanisms for\npublishing and subscribing to events.</p>\n<p><a href=\"guide/forms\"><strong>Forms</strong></a>: Support complex data entry scenarios with HTML-based validation and dirty checking.</p>\n<p><a href=\"guide/http\"><strong>HTTP</strong></a>: Communicate with a server to get data, save data, and invoke server-side actions with an HTTP client.</p>\n<p><a href=\"guide/lifecycle-hooks\"><strong>Lifecycle hooks</strong></a>: Tap into key moments in the lifetime of a component, from its creation to its destruction,\nby implementing the lifecycle hook interfaces.</p>\n<p><a href=\"guide/pipes\"><strong>Pipes</strong></a>: Use pipes in your templates to improve the user experience by transforming values for display. Consider this <code>currency</code> pipe expression:</p>\n<blockquote>\n<p><code>price | currency:'USD':true</code></p>\n</blockquote>\n<p>It displays a price of 42.33 as <code>$42.33</code>.</p>\n<p><a href=\"guide/router\"><strong>Router</strong></a>: Navigate from page to page within the client\napplication and never leave the browser.</p>\n<p><a href=\"guide/testing\"><strong>Testing</strong></a>: Run unit tests on your application parts as they interact with the Angular framework\nusing the <em>Angular Testing Platform</em>.</p>\n</blockquote>\n\n</div>"
}