{
  "id": "guide/aot-compiler",
  "title": "Ahead-of-Time Compilation",
  "contents": "\n<div class=\"content\">\n<h1 id=\"ahead-of-time-compilation\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-compiler#ahead-of-time-compilation\"><i class=\"material-icons\">link</i></a>Ahead-of-Time Compilation</h1>\n<p>This cookbook describes how to radically improve performance by compiling <em>ahead-of-time</em> (AOT)\nduring a build process.</p>\n<a id=\"overview\"></a>\n<h2 id=\"overview\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-compiler#overview\"><i class=\"material-icons\">link</i></a>Overview</h2>\n<p>An Angular application consists largely of components and their HTML templates.\nBefore the browser can render the application,\nthe components and templates must be converted to executable JavaScript by the <em>Angular compiler</em>.</p>\n<div class=\"l-sub-section\">\n<p>  <a href=\"https://www.youtube.com/watch?v=kW9cJsvcsGo\">Watch compiler author Tobias Bosch explain the Angular Compiler</a> at AngularConnect 2016.</p>\n</div>\n<p>You can compile the app in the browser, at runtime, as the application loads, using the <strong><em>just-in-time</em> (JIT) compiler</strong>.\nThis is the standard development approach shown throughout the documentation.\nIt's great but it has shortcomings.</p>\n<p>JIT compilation incurs a runtime performance penalty.\nViews take longer to render because of the in-browser compilation step.\nThe application is bigger because it includes the Angular compiler\nand a lot of library code that the application won't actually need.\nBigger apps take longer to transmit and are slower to load.</p>\n<p>Compilation can uncover many component-template binding errors.\nJIT compilation discovers them at runtime, which is late in the process.</p>\n<p>The <strong><em>ahead-of-time</em> (AOT) compiler</strong> can catch template errors early and improve performance\nby compiling at build time.</p>\n<a id=\"aot-jit\"></a>\n<h2 id=\"ahead-of-time-aot-vs-just-in-time-jit\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-compiler#ahead-of-time-aot-vs-just-in-time-jit\"><i class=\"material-icons\">link</i></a><em>Ahead-of-time</em> (AOT) vs <em>just-in-time</em> (JIT)</h2>\n<p>There is actually only one Angular compiler. The difference between AOT and JIT is a matter of timing and tooling.\nWith AOT, the compiler runs once at build time using one set of libraries;\nwith JIT it runs every time for every user at runtime using a different set of libraries.</p>\n<a id=\"why-aot\"></a>\n<h2 id=\"why-do-aot-compilation\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-compiler#why-do-aot-compilation\"><i class=\"material-icons\">link</i></a>Why do AOT compilation?</h2>\n<p><em>Faster rendering</em></p>\n<p>With AOT, the browser downloads a pre-compiled version of the application.\nThe browser loads executable code so it can render the application immediately, without waiting to compile the app first.</p>\n<p><em>Fewer asynchronous requests</em></p>\n<p>The compiler <em>inlines</em> external HTML templates and CSS style sheets within the application JavaScript,\neliminating separate ajax requests for those source files.</p>\n<p><em>Smaller Angular framework download size</em></p>\n<p>There's no need to download the Angular compiler if the app is already compiled.\nThe compiler is roughly half of Angular itself, so omitting it dramatically reduces the application payload.</p>\n<p><em>Detect template errors earlier</em></p>\n<p>The AOT compiler detects and reports template binding errors during the build step\nbefore users can see them.</p>\n<p><em>Better security</em></p>\n<p>AOT compiles HTML templates and components into JavaScript files long before they are served to the client.\nWith no templates to read and no risky client-side HTML or JavaScript evaluation,\nthere are fewer opportunities for injection attacks.</p>\n<a id=\"compile\"></a>\n<h2 id=\"compile-with-aot\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-compiler#compile-with-aot\"><i class=\"material-icons\">link</i></a>Compile with AOT</h2>\n<p>Preparing for offline compilation takes a few simple steps.\nTake the <a href=\"../guide/setup.html\">Setup</a> as a starting point.\nA few minor changes to the lone <code>app.component</code> lead to these two class and HTML files:</p>\n<code-tabs>\n  <code-pane title=\"src/app/app.component.html\" path=\"aot-compiler/src/app/app.component.html\">\n&#x3C;button (click)=\"toggleHeading()\">Toggle Heading&#x3C;/button>\n&#x3C;h1 *ngIf=\"showHeading\">Hello Angular&#x3C;/h1>\n\n&#x3C;h3>List of Heroes&#x3C;/h3>\n&#x3C;div *ngFor=\"let hero of heroes\">{{hero}}&#x3C;/div>\n\n\n\n</code-pane>\n  <code-pane title=\"src/app/app.component.ts\" path=\"aot-compiler/src/app/app.component.ts\">\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'my-app',\n  templateUrl: './app.component.html'\n})\nexport class AppComponent {\n  showHeading = true;\n  heroes = ['Magneta', 'Bombasto', 'Magma', 'Tornado'];\n\n  toggleHeading() {\n    this.showHeading = !this.showHeading;\n  }\n}\n\n\n</code-pane>\n</code-tabs>\n<p>Install a few new npm dependencies with the following command:</p>\n<code-example language=\"none\" class=\"code-shell\">\n  npm install @angular/compiler-cli @angular/platform-server --save\n</code-example>\n<p>You will run the <code>ngc</code> compiler provided in the <code>@angular/compiler-cli</code> npm package\ninstead of the TypeScript compiler (<code>tsc</code>).</p>\n<p><code>ngc</code> is a drop-in replacement for <code>tsc</code> and is configured much the same way.</p>\n<p><code>ngc</code> requires its own <code>tsconfig.json</code> with AOT-oriented settings.\nCopy the original <code>src/tsconfig.json</code> to a file called <code>tsconfig-aot.json</code> on the project root,\nthen modify it as follows.</p>\n<code-example path=\"aot-compiler/tsconfig-aot.json\" title=\"tsconfig-aot.json\" linenums=\"false\">\n{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"module\": \"es2015\",\n    \"moduleResolution\": \"node\",\n    \"sourceMap\": true,\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true,\n    \"lib\": [\"es2015\", \"dom\"],\n    \"noImplicitAny\": true,\n    \"suppressImplicitAnyIndexErrors\": true,\n    \"typeRoots\": [\n      \"./node_modules/@types/\"\n    ]\n  },\n\n  \"files\": [\n    \"src/app/app.module.ts\",\n    \"src/main.ts\"\n  ],\n\n  \"angularCompilerOptions\": {\n   \"genDir\": \"aot\",\n   \"skipMetadataEmit\" : true\n }\n}\n\n\n</code-example>\n<p>The <code>compilerOptions</code> section is unchanged except for one property.\n<strong>Set the <code>module</code> to <code>es2015</code></strong>.\nThis is important as explained later in the <a href=\"guide/aot-compiler#tree-shaking\">Tree Shaking</a> section.</p>\n<p>What's really new is the <code>ngc</code> section at the bottom called <code>angularCompilerOptions</code>.\nIts <code>genDir</code> property tells the compiler\nto store the compiled output files in a new <code>aot</code> folder.</p>\n<p>The <code>\"skipMetadataEmit\" : true</code> property prevents the compiler from generating metadata files with the compiled application.\nMetadata files are not necessary when targeting TypeScript files, so there is no reason to include them.</p>\n<p><strong><em>Component-relative template URLS</em></strong></p>\n<p>The AOT compiler requires that <code>@Component</code> URLS for external templates and CSS files be <em>component-relative</em>.\nThat means that the value of <code>@Component.templateUrl</code> is a URL value <em>relative</em> to the component class file.\nFor example, an <code>'app.component.html'</code> URL means that the template file is a sibling of its companion <code>app.component.ts</code> file.</p>\n<p>While JIT app URLs are more flexible, stick with <em>component-relative</em> URLs for compatibility with AOT compilation.</p>\n<p><strong><em>Compiling the application</em></strong></p>\n<p>Initiate AOT compilation from the command line using the previously installed <code>ngc</code> compiler by executing:</p>\n<code-example language=\"none\" class=\"code-shell\">\n  node_modules/.bin/ngc -p tsconfig-aot.json\n</code-example>\n<div class=\"l-sub-section\">\n<p>  Windows users should surround the <code>ngc</code> command in double quotes:\n<code-example format=\".\">\n\"node_modules/.bin/ngc\" -p tsconfig-aot.json\n</code-example></p>\n</div>\n<p><code>ngc</code> expects the <code>-p</code> switch to point to a <code>tsconfig.json</code> file or a folder containing a <code>tsconfig.json</code> file.</p>\n<p>After <code>ngc</code> completes, look for a collection of <em>NgFactory</em> files in the <code>aot</code> folder.\nThe <code>aot</code> folder is the directory specified as <code>genDir</code> in <code>tsconfig-aot.json</code>.</p>\n<p>These factory files are essential to the compiled application.\nEach component factory creates an instance of the component at runtime by combining the original class file\nand a JavaScript representation of the component's template.\nNote that the original component class is still referenced internally by the generated factory.</p>\n<div class=\"l-sub-section\">\n<p>  The curious can open <code>aot/app.component.ngfactory.ts</code> to see the original Angular template syntax\ncompiled to TypeScript, its intermediate form.</p>\n<p>  JIT compilation generates these same <em>NgFactories</em> in memory where they are largely invisible.\nAOT compilation reveals them as separate, physical files.</p>\n</div>\n<div class=\"alert is-important\">\n<p>  Do not edit the <em>NgFactories</em>! Re-compilation replaces these files and all edits will be lost.</p>\n</div>\n<a id=\"bootstrap\"></a>\n<h2 id=\"bootstrap\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-compiler#bootstrap\"><i class=\"material-icons\">link</i></a>Bootstrap</h2>\n<p>The AOT approach changes application bootstrapping.</p>\n<p>Instead of bootstrapping <code>AppModule</code>, you bootstrap the application with the generated module factory, <code>AppModuleNgFactory</code>.</p>\n<p>Make a copy of <code>main.ts</code> and name it <code>main-jit.ts</code>.\nThis is the JIT version; set it aside as you may need it <a href=\"guide/aot-compiler#run-jit\" title=\"Running with JIT\">later</a>.</p>\n<p>Open <code>main.ts</code> and convert it to AOT compilation.\nSwitch from the <code>platformBrowserDynamic.bootstrap</code> used in JIT compilation to\n<code>platformBrowser().bootstrapModuleFactory</code> and pass in the AOT-generated <code>AppModuleNgFactory</code>.</p>\n<p>Here is AOT bootstrap in <code>main.ts</code> next to the original JIT version:</p>\n<code-tabs>\n  <code-pane title=\"src/main.ts\" path=\"aot-compiler/src/main.ts\">\nimport { platformBrowser }    from '@angular/platform-browser';\nimport { AppModuleNgFactory } from '../aot/src/app/app.module.ngfactory';\n\nconsole.log('Running AOT compiled');\nplatformBrowser().bootstrapModuleFactory(AppModuleNgFactory);\n\n\n</code-pane>\n  <code-pane title=\"src/main-jit.ts\" path=\"aot-compiler/src/main-jit.ts\">\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { AppModule }              from './app/app.module';\n\nconsole.log('Running JIT compiled');\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n\n</code-pane>\n</code-tabs>\n<p>Be sure to <a href=\"guide/aot-compiler#compile\">recompile</a> with <code>ngc</code>!</p>\n<a id=\"tree-shaking\"></a>\n<h2 id=\"tree-shaking\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-compiler#tree-shaking\"><i class=\"material-icons\">link</i></a>Tree shaking</h2>\n<p>AOT compilation sets the stage for further optimization through a process called <em>tree shaking</em>.\nA tree shaker walks the dependency graph, top to bottom, and <em>shakes out</em> unused code like\ndead leaves in a tree.</p>\n<p>Tree shaking can greatly reduce the downloaded size of the application\nby removing unused portions of both source and library code.\nIn fact, most of the reduction in small apps comes from removing unreferenced Angular features.</p>\n<p>For example, this demo application doesn't use anything from the <code>@angular/forms</code> library.\nThere is no reason to download forms-related Angular code and tree shaking ensures that you don't.</p>\n<p>Tree shaking and AOT compilation are separate steps.\nTree shaking can only target JavaScript code.\nAOT compilation converts more of the application to JavaScript,\nwhich in turn makes more of the application \"tree shakable\".</p>\n<a id=\"rollup\"></a>\n<h3 id=\"rollup\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-compiler#rollup\"><i class=\"material-icons\">link</i></a>Rollup</h3>\n<p>This cookbook illustrates a tree shaking utility called <em>Rollup</em>.</p>\n<p>Rollup statically analyzes the application by following the trail of <code>import</code> and <code>export</code> statements.\nIt produces a final code <em>bundle</em> that excludes code that is exported, but never imported.</p>\n<p>Rollup can only tree shake <code>ES2015</code> modules which have <code>import</code> and <code>export</code> statements.</p>\n<div class=\"l-sub-section\">\n<p>  Recall that <code>tsconfig-aot.json</code> is configured to produce <code>ES2015</code> modules.\nIt's not important that the code itself be written with <code>ES2015</code> syntax such as <code>class</code> and <code>const</code>.\nWhat matters is that the code uses ES <code>import</code> and <code>export</code> statements rather than <code>require</code> statements.</p>\n</div>\n<p>In the terminal window, install the Rollup dependencies with this command:</p>\n<code-example language=\"none\" class=\"code-shell\">\n  npm install rollup rollup-plugin-node-resolve rollup-plugin-commonjs rollup-plugin-uglify --save-dev\n</code-example>\n<p>Next, create a configuration file (<code>rollup-config.js</code>)\nin the project root directory to tell Rollup how to process the application.\nThe cookbook configuration file looks like this.</p>\n<code-example path=\"aot-compiler/rollup-config.js\" title=\"rollup-config.js\" linenums=\"false\">\nimport nodeResolve from 'rollup-plugin-node-resolve';\nimport commonjs    from 'rollup-plugin-commonjs';\nimport uglify      from 'rollup-plugin-uglify';\n\nexport default {\n  entry: 'src/main.js',\n  dest: 'src/build.js', // output a single application bundle\n  sourceMap: false,\n  format: 'iife',\n  onwarn: function(warning) {\n    // Skip certain warnings\n\n    // should intercept ... but doesn't in some rollup versions\n    if ( warning.code === 'THIS_IS_UNDEFINED' ) { return; }\n\n    // console.warn everything else\n    console.warn( warning.message );\n  },\n  plugins: [\n      nodeResolve({jsnext: true, module: true}),\n      commonjs({\n        include: 'node_modules/rxjs/**',\n      }),\n      uglify()\n  ]\n};\n\n\n</code-example>\n<p>This config file tells Rollup that the app entry point is <code>src/app/main.js</code> .\nThe <code>dest</code> attribute tells Rollup to create a bundle called <code>build.js</code> in the <code>dist</code> folder.\nIt overrides the default <code>onwarn</code> method in order to skip annoying messages about the AOT compiler's use of the <code>this</code> keyword.</p>\n<p>The next section covers the plugins in more depth.</p>\n<a id=\"rollup-plugins\"></a>\n<h3 id=\"rollup-plugins\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-compiler#rollup-plugins\"><i class=\"material-icons\">link</i></a>Rollup Plugins</h3>\n<p>Optional plugins filter and transform the Rollup inputs and output.</p>\n<p><em>RxJS</em></p>\n<p>Rollup expects application source code to use <code>ES2015</code> modules.\nNot all external dependencies are published as <code>ES2015</code> modules.\nIn fact, most are not. Many of them are published as <em>CommonJS</em> modules.</p>\n<p>The <em>RxJs</em> Observable library is an essential Angular dependency published as an ES5 JavaScript <em>CommonJS</em> module.</p>\n<p>Luckily, there is a Rollup plugin that modifies <em>RxJs</em>\nto use the ES <code>import</code> and <code>export</code> statements that Rollup requires.\nRollup then preserves the parts of <code>RxJS</code> referenced by the application\nin the final bundle. Using it is straigthforward. Add the following to\nthe <code>plugins</code> array in <code>rollup-config.js</code>:</p>\n<code-example path=\"aot-compiler/rollup-config.js\" region=\"commonjs\" title=\"rollup-config.js (CommonJs to ES2015 Plugin)\" linenums=\"false\">\ncommonjs({\n  include: 'node_modules/rxjs/**',\n}),\n\n</code-example>\n<p><em>Minification</em></p>\n<p>Rollup tree shaking reduces code size considerably.  Minification makes it smaller still.\nThis cookbook relies on the <em>uglify</em> Rollup plugin to minify and mangle the code.\nAdd the following to the <code>plugins</code> array:</p>\n<code-example path=\"aot-compiler/rollup-config.js\" region=\"uglify\" title=\"rollup-config.js (CommonJs to ES2015 Plugin)\" linenums=\"false\">\nuglify()\n\n</code-example>\n<div class=\"l-sub-section\">\n<p>  In a production setting, you would also enable gzip on the web server to compress\nthe code into an even smaller package going over the wire.</p>\n</div>\n<a id=\"run-rollup\"></a>\n<h3 id=\"run-rollup\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-compiler#run-rollup\"><i class=\"material-icons\">link</i></a>Run Rollup</h3>\n<p>Execute the Rollup process with this command:</p>\n<code-example language=\"none\" class=\"code-shell\">\n  node_modules/.bin/rollup -c rollup-config.js\n</code-example>\n<div class=\"l-sub-section\">\n<p>  Windows users should surround the <code>rollup</code> command in double quotes:\n<code-example language=\"none\" class=\"code-shell\">\n\"node_modules/.bin/rollup\"  -c rollup-config.js\n</code-example></p>\n</div>\n<a id=\"load\"></a>\n<h2 id=\"load-the-bundle\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-compiler#load-the-bundle\"><i class=\"material-icons\">link</i></a>Load the bundle</h2>\n<p>Loading the generated application bundle does not require a module loader like SystemJS.\nRemove the scripts that concern SystemJS.\nInstead, load the bundle file using a single <code>&#x3C;script></code> tag <strong><em>after</em></strong> the <code>&#x3C;/body></code> tag:</p>\n<code-example path=\"aot-compiler/src/index.html\" region=\"bundle\" title=\"index.html (load bundle)\" linenums=\"false\">\n&#x3C;script src=\"build.js\">&#x3C;/script>\n\n</code-example>\n<a id=\"serve\"></a>\n<h2 id=\"serve-the-app\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-compiler#serve-the-app\"><i class=\"material-icons\">link</i></a>Serve the app</h2>\n<p>You'll need a web server to host the application.\nUse the same <code>lite-server</code> employed elsewhere in the documentation:</p>\n<code-example language=\"none\" class=\"code-shell\">\n  npm run lite\n</code-example>\n<p>The server starts, launches a browser, and the app should appear.</p>\n<a id=\"source-code\"></a>\n<h2 id=\"aot-quickstart-source-code\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-compiler#aot-quickstart-source-code\"><i class=\"material-icons\">link</i></a>AOT QuickStart source code</h2>\n<p>Here's the pertinent source code:</p>\n<code-tabs>\n  <code-pane title=\"src/app/app.component.html\" path=\"aot-compiler/src/app/app.component.html\">\n&#x3C;button (click)=\"toggleHeading()\">Toggle Heading&#x3C;/button>\n&#x3C;h1 *ngIf=\"showHeading\">Hello Angular&#x3C;/h1>\n\n&#x3C;h3>List of Heroes&#x3C;/h3>\n&#x3C;div *ngFor=\"let hero of heroes\">{{hero}}&#x3C;/div>\n\n\n\n</code-pane>\n  <code-pane title=\"src/app/app.component.ts\" path=\"aot-compiler/src/app/app.component.ts\">\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'my-app',\n  templateUrl: './app.component.html'\n})\nexport class AppComponent {\n  showHeading = true;\n  heroes = ['Magneta', 'Bombasto', 'Magma', 'Tornado'];\n\n  toggleHeading() {\n    this.showHeading = !this.showHeading;\n  }\n}\n\n\n</code-pane>\n  <code-pane title=\"src/main.ts\" path=\"aot-compiler/src/main.ts\">\nimport { platformBrowser }    from '@angular/platform-browser';\nimport { AppModuleNgFactory } from '../aot/src/app/app.module.ngfactory';\n\nconsole.log('Running AOT compiled');\nplatformBrowser().bootstrapModuleFactory(AppModuleNgFactory);\n\n\n</code-pane>\n  <code-pane title=\"src/index.html\" path=\"aot-compiler/src/index.html\">\n&#x3C;!DOCTYPE html>\n&#x3C;html>\n  &#x3C;head>\n    &#x3C;title>Ahead of time compilation&#x3C;/title>\n    &#x3C;base href=\"/\">\n    &#x3C;meta charset=\"UTF-8\">\n    &#x3C;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    &#x3C;link rel=\"stylesheet\" href=\"styles.css\">\n\n    &#x3C;script src=\"node_modules/core-js/client/shim.min.js\">&#x3C;/script>\n    &#x3C;script src=\"node_modules/zone.js/dist/zone.js\">&#x3C;/script>\n  &#x3C;/head>\n  &#x3C;body>\n    &#x3C;my-app>Loading...&#x3C;/my-app>\n  &#x3C;/body>\n  &#x3C;script src=\"build.js\">&#x3C;/script>\n&#x3C;/html>\n\n\n</code-pane>\n  <code-pane title=\"tsconfig-aot.json\" path=\"aot-compiler/tsconfig-aot.json\">\n{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"module\": \"es2015\",\n    \"moduleResolution\": \"node\",\n    \"sourceMap\": true,\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true,\n    \"lib\": [\"es2015\", \"dom\"],\n    \"noImplicitAny\": true,\n    \"suppressImplicitAnyIndexErrors\": true,\n    \"typeRoots\": [\n      \"./node_modules/@types/\"\n    ]\n  },\n\n  \"files\": [\n    \"src/app/app.module.ts\",\n    \"src/main.ts\"\n  ],\n\n  \"angularCompilerOptions\": {\n   \"genDir\": \"aot\",\n   \"skipMetadataEmit\" : true\n }\n}\n\n\n</code-pane>\n  <code-pane title=\"rollup-config.js\" path=\"aot-compiler/rollup-config.js\">\nimport nodeResolve from 'rollup-plugin-node-resolve';\nimport commonjs    from 'rollup-plugin-commonjs';\nimport uglify      from 'rollup-plugin-uglify';\n\nexport default {\n  entry: 'src/main.js',\n  dest: 'src/build.js', // output a single application bundle\n  sourceMap: false,\n  format: 'iife',\n  onwarn: function(warning) {\n    // Skip certain warnings\n\n    // should intercept ... but doesn't in some rollup versions\n    if ( warning.code === 'THIS_IS_UNDEFINED' ) { return; }\n\n    // console.warn everything else\n    console.warn( warning.message );\n  },\n  plugins: [\n      nodeResolve({jsnext: true, module: true}),\n      commonjs({\n        include: 'node_modules/rxjs/**',\n      }),\n      uglify()\n  ]\n};\n\n\n</code-pane>\n</code-tabs>\n<a id=\"workflow\"></a>\n<h2 id=\"workflow-and-convenience-script\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-compiler#workflow-and-convenience-script\"><i class=\"material-icons\">link</i></a>Workflow and convenience script</h2>\n<p>You'll rebuild the AOT version of the application every time you make a change.\nThose <em>npm</em> commands are long and difficult to remember.</p>\n<p>Add the following <em>npm</em> convenience script to the <code>package.json</code> so you can compile and rollup in one command.</p>\n<p>Open a terminal window and try it.</p>\n<code-example language=\"none\" class=\"code-shell\">\n  npm run build:aot\n</code-example>\n<a id=\"run-jit\"></a>\n<h3 id=\"develop-jit-along-with-aot\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-compiler#develop-jit-along-with-aot\"><i class=\"material-icons\">link</i></a>Develop JIT along with AOT</h3>\n<p>AOT compilation and rollup together take several seconds.\nYou may be able to develop iteratively a little faster with SystemJS and JIT.\nThe same source code can be built both ways. Here's one way to do that.</p>\n<ul>\n<li>Make a copy of <code>index.html</code> and call it <code>index-jit.html</code>.</li>\n<li>Delete the script at the bottom of <code>index-jit.html</code> that loads <code>bundle.js</code></li>\n<li>Restore the SystemJS scripts like this:</li>\n</ul>\n<code-example path=\"aot-compiler/src/index-jit.html\" region=\"jit\" title=\"src/index-jit.html (SystemJS scripts)\" linenums=\"false\">\n&#x3C;script src=\"node_modules/systemjs/dist/system.src.js\">&#x3C;/script>\n&#x3C;script src=\"systemjs.config.js\">&#x3C;/script>\n&#x3C;script>\n  System.import('main-jit.js').catch(function(err){ console.error(err); });\n&#x3C;/script>\n\n</code-example>\n<p>Notice the slight change to the <code>system.import</code> which now specifies <code>src/app/main-jit</code>.\nThat's the JIT version of the bootstrap file that we preserved <a href=\"guide/aot-compiler#bootstrap\">above</a>.</p>\n<p>Open a <em>different</em> terminal window and enter <code>npm start</code>.</p>\n<code-example language=\"none\" class=\"code-shell\">\n  npm start\n</code-example>\n<p>That compiles the app with JIT and launches the server.\nThe server loads <code>index.html</code> which is still the AOT version, which you can confirm in the browser console.\nChange the address bar to <code>index-jit.html</code> and it loads the JIT version.\nThis is also evident in the browser console.</p>\n<p>Develop as usual.\nThe server and TypeScript compiler are in \"watch mode\" so your changes are reflected immediately in the browser.</p>\n<p>To see those changes in AOT, switch to the original terminal and re-run <code>npm run build:aot</code>.\nWhen it finishes, go back to the browser and use the back button to\nreturn to the AOT version in the default <code>index.html</code>.</p>\n<p>Now you can develop JIT and AOT, side-by-side.</p>\n<a id=\"toh\"></a>\n<h2 id=\"tour-of-heroes\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-compiler#tour-of-heroes\"><i class=\"material-icons\">link</i></a>Tour of Heroes</h2>\n<p>The sample above is a trivial variation of the QuickStart application.\nIn this section you apply what you've learned about AOT compilation and tree shaking\nto an app with more substance, the <a href=\"tutorial/toh-pt6\"><em>Tour of Heroes</em></a> application.</p>\n<a id=\"jit-dev-aot-prod\"></a>\n<h3 id=\"jit-in-development-aot-in-production\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-compiler#jit-in-development-aot-in-production\"><i class=\"material-icons\">link</i></a>JIT in development, AOT in production</h3>\n<p>Today AOT compilation and tree shaking take more time than is practical for development. That will change soon.\nFor now, it's best to JIT compile in development and switch to AOT compilation before deploying to production.</p>\n<p>Fortunately, the source code can be compiled either way without change <em>if</em> you account for a few key differences.</p>\n<p><strong><em>index.html</em></strong></p>\n<p>The JIT and AOT apps require their own <code>index.html</code> files because they setup and launch so differently.</p>\n<p>Here they are for comparison:</p>\n<code-tabs>\n  <code-pane title=\"aot/index.html (AOT)\" path=\"toh-pt6/aot/index.html\">\n&#x3C;!DOCTYPE html>\n&#x3C;html>\n  &#x3C;head>\n    &#x3C;base href=\"/\">\n    &#x3C;title>Angular Tour of Heroes&#x3C;/title>\n    &#x3C;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n    &#x3C;link rel=\"stylesheet\" href=\"styles.css\">\n\n    &#x3C;script src=\"shim.min.js\">&#x3C;/script>\n    &#x3C;script src=\"zone.min.js\">&#x3C;/script>\n  &#x3C;/head>\n\n  &#x3C;body>\n    &#x3C;my-app>Loading...&#x3C;/my-app>\n  &#x3C;/body>\n  &#x3C;script src=\"dist/build.js\">&#x3C;/script>\n&#x3C;/html>\n\n\n</code-pane>\n  <code-pane title=\"src/index.html (JIT)\" path=\"toh-pt6/src/index.html\">\n&#x3C;!DOCTYPE html>\n&#x3C;html>\n  &#x3C;head>\n    &#x3C;base href=\"/\">\n    &#x3C;title>Angular Tour of Heroes&#x3C;/title>\n    &#x3C;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n    &#x3C;link rel=\"stylesheet\" href=\"styles.css\">\n\n    &#x3C;!-- Polyfills -->\n    &#x3C;script src=\"node_modules/core-js/client/shim.min.js\">&#x3C;/script>\n\n    &#x3C;script src=\"node_modules/zone.js/dist/zone.js\">&#x3C;/script>\n    &#x3C;script src=\"node_modules/systemjs/dist/system.src.js\">&#x3C;/script>\n\n    &#x3C;script src=\"systemjs.config.js\">&#x3C;/script>\n    &#x3C;script>\n      System.import('main.js').catch(function(err){ console.error(err); });\n    &#x3C;/script>\n  &#x3C;/head>\n\n  &#x3C;body>\n    &#x3C;my-app>Loading...&#x3C;/my-app>\n  &#x3C;/body>\n&#x3C;/html>\n\n\n</code-pane>\n</code-tabs>\n<p>The JIT version relies on <code>SystemJS</code> to load individual modules.\nIts scripts appear in its <code>index.html</code>.</p>\n<p>The AOT version loads the entire application in a single script, <code>aot/dist/build.js</code>.\nIt does not need <code>SystemJS</code>, so that script is absent from its <code>index.html</code></p>\n<p><strong><em>main.ts</em></strong></p>\n<p>JIT and AOT applications boot in much the same way but require different Angular libraries to do so.\nThe key differences, covered in the <a href=\"guide/aot-compiler#bootstrap\">Bootstrap</a> section above,\nare evident in these <code>main</code> files which can and should reside in the same folder:</p>\n<code-tabs>\n  <code-pane title=\"main-aot.ts (AOT)\" path=\"toh-pt6/src/main-aot.ts\">\nimport { platformBrowser }    from '@angular/platform-browser';\n\nimport { AppModuleNgFactory } from '../aot/src/app/app.module.ngfactory';\n\nplatformBrowser().bootstrapModuleFactory(AppModuleNgFactory);\n\n\n</code-pane>\n  <code-pane title=\"main.ts (JIT)\" path=\"toh-pt6/src/main.ts\">\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n\n</code-pane>\n</code-tabs>\n<p><strong><em>TypeScript configuration</em></strong></p>\n<p>JIT-compiled applications transpile to <code>commonjs</code> modules.\nAOT-compiled applications transpile to <em>ES2015</em>/<em>ES6</em> modules to facilitate tree shaking.\nAOT requires its own TypeScript configuration settings as well.</p>\n<p>You'll need separate TypeScript configuration files such as these:</p>\n<code-tabs>\n  <code-pane title=\"tsconfig-aot.json (AOT)\" path=\"toh-pt6/tsconfig-aot.json\">\n{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"module\": \"es2015\",\n    \"moduleResolution\": \"node\",\n    \"sourceMap\": true,\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true,\n    \"lib\": [\"es2015\", \"dom\"],\n    \"noImplicitAny\": true,\n    \"suppressImplicitAnyIndexErrors\": true,\n    \"typeRoots\": [\n      \"./node_modules/@types/\"\n    ]\n  },\n\n  \"files\": [\n    \"src/app/app.module.ts\",\n    \"src/main-aot.ts\"\n  ],\n\n  \"angularCompilerOptions\": {\n    \"genDir\": \"aot\",\n    \"skipMetadataEmit\" : true\n  }\n}\n\n\n</code-pane>\n  <code-pane title=\"src/tsconfig.json (JIT)\" path=\"toh-pt6/src/tsconfig.1.json\">\n{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"module\": \"commonjs\",\n    \"moduleResolution\": \"node\",\n    \"sourceMap\": true,\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true,\n    \"lib\": [ \"es2015\", \"dom\" ],\n    \"noImplicitAny\": true,\n    \"suppressImplicitAnyIndexErrors\": true\n  }\n}\n\n</code-pane>\n</code-tabs>\n<div class=\"callout is-helpful\">\n  <header>\n    `@types` and node modules\n  </header>\n<p>  In the file structure of <em>this particular sample project</em>,\nthe <code>node_modules</code> folder happens to be two levels up from the project root.\nTherefore, <code>\"typeRoots\"</code> must be set to <code>\"../../node_modules/@types/\"</code>.</p>\n<p>  In a more typical project, <code>node_modules</code> would be a sibling of <code>tsconfig-aot.json</code>\nand <code>\"typeRoots\"</code> would be set to <code>\"node_modules/@types/\"</code>.\nEdit your <code>tsconfig-aot.json</code> to fit your project's file structure.</p>\n</div>\n<a id=\"shaking\"></a>\n<h3 id=\"tree-shaking-1\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-compiler#tree-shaking-1\"><i class=\"material-icons\">link</i></a>Tree shaking</h3>\n<p>Rollup does the tree shaking as before.</p>\n<code-example path=\"toh-pt6/rollup-config.js\" title=\"rollup-config.js\" linenums=\"false\">\nimport rollup      from 'rollup'\nimport nodeResolve from 'rollup-plugin-node-resolve'\nimport commonjs    from 'rollup-plugin-commonjs';\nimport uglify      from 'rollup-plugin-uglify'\n\n//paths are relative to the execution path\nexport default {\n  entry: 'src/main-aot.js',\n  dest: 'aot/dist/build.js', // output a single application bundle\n  sourceMap: true,\n  sourceMapFile: 'aot/dist/build.js.map',\n  format: 'iife',\n  onwarn: function(warning) {\n    // Skip certain warnings\n\n    // should intercept ... but doesn't in some rollup versions\n    if ( warning.code === 'THIS_IS_UNDEFINED' ) { return; }\n\n    // console.warn everything else\n    console.warn( warning.message );\n  },\n  plugins: [\n    nodeResolve({jsnext: true, module: true}),\n    commonjs({\n      include: ['node_modules/rxjs/**']\n    }),\n    uglify()\n  ]\n}\n\n\n</code-example>\n<a id=\"running-app\"></a>\n<h3 id=\"running-the-application\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-compiler#running-the-application\"><i class=\"material-icons\">link</i></a>Running the application</h3>\n<div class=\"alert is-important\">\n<p>  The general audience instructions for running the AOT build of the Tour of Heroes app are not ready.</p>\n<p>  The following instructions presuppose that you have downloaded the\n<a href=\"generated/zips/toh-pt6/toh-pt6.zip\" target=\"_blank\">Tour of Heroes' zip</a>\nand run <code>npm install</code> on it.</p>\n</div>\n<p>Run the JIT-compiled app with <code>npm start</code> as for all other JIT examples.</p>\n<p>Compiling with AOT presupposes certain supporting files, most of them discussed above.</p>\n<code-tabs>\n  <code-pane title=\"src/index.html\" path=\"toh-pt6/src/index.html\">\n&#x3C;!DOCTYPE html>\n&#x3C;html>\n  &#x3C;head>\n    &#x3C;base href=\"/\">\n    &#x3C;title>Angular Tour of Heroes&#x3C;/title>\n    &#x3C;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n    &#x3C;link rel=\"stylesheet\" href=\"styles.css\">\n\n    &#x3C;!-- Polyfills -->\n    &#x3C;script src=\"node_modules/core-js/client/shim.min.js\">&#x3C;/script>\n\n    &#x3C;script src=\"node_modules/zone.js/dist/zone.js\">&#x3C;/script>\n    &#x3C;script src=\"node_modules/systemjs/dist/system.src.js\">&#x3C;/script>\n\n    &#x3C;script src=\"systemjs.config.js\">&#x3C;/script>\n    &#x3C;script>\n      System.import('main.js').catch(function(err){ console.error(err); });\n    &#x3C;/script>\n  &#x3C;/head>\n\n  &#x3C;body>\n    &#x3C;my-app>Loading...&#x3C;/my-app>\n  &#x3C;/body>\n&#x3C;/html>\n\n\n</code-pane>\n  <code-pane title=\"copy-dist-files.js\" path=\"toh-pt6/copy-dist-files.js\">\nvar fs = require('fs');\nvar resources = [\n  'node_modules/core-js/client/shim.min.js',\n  'node_modules/zone.js/dist/zone.min.js',\n  'src/styles.css'\n];\nresources.map(function(f) {\n  var path = f.split('/');\n  var t = 'aot/' + path[path.length-1];\n  fs.createReadStream(f).pipe(fs.createWriteStream(t));\n});\n\n\n</code-pane>\n  <code-pane title=\"rollup-config.js\" path=\"toh-pt6/rollup-config.js\">\nimport rollup      from 'rollup'\nimport nodeResolve from 'rollup-plugin-node-resolve'\nimport commonjs    from 'rollup-plugin-commonjs';\nimport uglify      from 'rollup-plugin-uglify'\n\n//paths are relative to the execution path\nexport default {\n  entry: 'src/main-aot.js',\n  dest: 'aot/dist/build.js', // output a single application bundle\n  sourceMap: true,\n  sourceMapFile: 'aot/dist/build.js.map',\n  format: 'iife',\n  onwarn: function(warning) {\n    // Skip certain warnings\n\n    // should intercept ... but doesn't in some rollup versions\n    if ( warning.code === 'THIS_IS_UNDEFINED' ) { return; }\n\n    // console.warn everything else\n    console.warn( warning.message );\n  },\n  plugins: [\n    nodeResolve({jsnext: true, module: true}),\n    commonjs({\n      include: ['node_modules/rxjs/**']\n    }),\n    uglify()\n  ]\n}\n\n\n</code-pane>\n  <code-pane title=\"tsconfig-aot.json\" path=\"toh-pt6/tsconfig-aot.json\">\n{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"module\": \"es2015\",\n    \"moduleResolution\": \"node\",\n    \"sourceMap\": true,\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true,\n    \"lib\": [\"es2015\", \"dom\"],\n    \"noImplicitAny\": true,\n    \"suppressImplicitAnyIndexErrors\": true,\n    \"typeRoots\": [\n      \"./node_modules/@types/\"\n    ]\n  },\n\n  \"files\": [\n    \"src/app/app.module.ts\",\n    \"src/main-aot.ts\"\n  ],\n\n  \"angularCompilerOptions\": {\n    \"genDir\": \"aot\",\n    \"skipMetadataEmit\" : true\n  }\n}\n\n\n</code-pane>\n</code-tabs>\n<p>Extend the <code>scripts</code> section of the <code>package.json</code> with these npm scripts:</p>\n<p>Copy the AOT distribution files into the <code>/aot</code> folder with the node script:</p>\n<code-example language=\"none\" class=\"code-shell\">\n  node copy-dist-files\n</code-example>\n<div class=\"l-sub-section\">\n<p>  You won't do that again until there are updates to <code>zone.js</code> or the <code>core-js</code> shim for old browsers.</p>\n</div>\n<p>Now AOT-compile the app and launch it with the <code>lite-server</code>:</p>\n<code-example language=\"none\" class=\"code-shell\">\n  npm run build:aot &#x26;&#x26; npm run serve:aot\n</code-example>\n<a id=\"inspect-bundle\"></a>\n<h3 id=\"inspect-the-bundle\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/aot-compiler#inspect-the-bundle\"><i class=\"material-icons\">link</i></a>Inspect the Bundle</h3>\n<p>It's fascinating to see what the generated JavaScript bundle looks like after Rollup.\nThe code is minified, so you won't learn much from inspecting the bundle directly.\nBut the <a href=\"https://github.com/danvk/source-map-explorer/blob/master/README.md\">source-map-explorer</a>\ntool can be quite revealing.</p>\n<p>Install it:</p>\n<code-example language=\"none\" class=\"code-shell\">\n  npm install source-map-explorer --save-dev\n</code-example>\n<p>Run the following command to generate the map.</p>\n<code-example language=\"none\" class=\"code-shell\">\n  node_modules/.bin/source-map-explorer aot/dist/build.js\n</code-example>\n<p>The <code>source-map-explorer</code> analyzes the source map generated with the bundle and draws a map of all dependencies,\nshowing exactly which application and NgModules and classes are included in the bundle.</p>\n<p>Here's the map for <em>Tour of Heroes</em>.</p>\n<a href=\"generated/images/guide/aot-compiler/toh-pt6-bundle.png\" title=\"View larger image\">\n  <figure>\n    <img src=\"generated/images/guide/aot-compiler/toh-pt6-bundle-700w.png\" alt=\"toh-pt6-bundle\" width=\"700\" height=\"351\">\n  </figure>\n</a>\n\n</div>"
}