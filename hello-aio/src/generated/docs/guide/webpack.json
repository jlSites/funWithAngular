{
  "id": "guide/webpack",
  "title": "Webpack: An Introduction",
  "contents": "\n<div class=\"content\">\n<h1 id=\"webpack-an-introduction\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/webpack#webpack-an-introduction\"><i class=\"material-icons\">link</i></a>Webpack: An Introduction</h1>\n<style>\n  h4 {font-size: 17px !important; text-transform: none !important;}\n  .syntax { font-family: Consolas, 'Lucida Sans', Courier, sans-serif; color: black; font-size: 85%; }\n\n</style>\n<p><a href=\"https://webpack.github.io/\"><strong>Webpack</strong></a> is a popular module bundler,\na tool for bundling application source code in convenient <em>chunks</em>\nand for loading that code from a server into a browser.</p>\n<p>It's an excellent alternative to the <em>SystemJS</em> approach used elsewhere in the documentation.\nThis guide offers a taste of Webpack and explains how to use it with Angular applications.</p>\n<a id=\"top\"></a>\n<!--\n\n\n# Contents\n\n* [What is Webpack?](guide/webpack#what-is-webpack)\n\n  * [Entries and outputs](guide/webpack#entries-outputs)\n  * [Multiple bundles](guide/webpack#multiple-bundles)\n  * [Loaders](guide/webpack#loaders)\n  * [Plugins](guide/webpack#plugins)\n\n* [Configuring Webpack](guide/webpack#configure-webpack)\n\n  * [Polyfills](guide/webpack#polyfills)\n  * [Common configuration](guide/webpack#common-configuration)\n  * [Inside `webpack.common.js`](guide/webpack#inside-webpack-commonjs)\n\n    * [entry](guide/webpack#common-entries)\n    * [resolve extension-less imports](guide/webpack#common-resolves)\n    * [`module.rules`](guide/webpack#common-rules)\n    * [Plugins](guide/webpack#plugins)\n    * [`CommonsChunkPlugin`](guide/webpack#commons-chunk-plugin)\n    * [`HtmlWebpackPlugin`](guide/webpack#html-webpack-plugin)\n\n  * [Environment specific configuration](guide/webpack#environment-configuration)\n  * [Development configuration](guide/webpack#development-configuration)\n  * [Production configuration](guide/webpack#production-configuration)\n  * [Test configuration](guide/webpack#test-configuration)\n\n* [Trying it out](guide/webpack#try)\n* [Highlights](guide/webpack#highlights)\n* [Conclusion](guide/webpack#conclusion)\n\n-->\n<p>You can also <a href=\"generated/zips/webpack/webpack.zip\" target=\"_blank\">download the final result.</a></p>\n<a id=\"what-is-webpack\"></a>\n<h2 id=\"what-is-webpack\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/webpack#what-is-webpack\"><i class=\"material-icons\">link</i></a>What is Webpack?</h2>\n<p>Webpack is a powerful module bundler.\nA <em>bundle</em> is a JavaScript file that incorporates <em>assets</em> that <em>belong</em> together and\nshould be served to the client in a response to a single file request.\nA bundle can include JavaScript, CSS styles, HTML, and almost any other kind of file.</p>\n<p>Webpack roams over your application source code,\nlooking for <code>import</code> statements, building a dependency graph, and emitting one or more <em>bundles</em>.\nWith plugins and rules, Webpack can preprocess and minify different non-JavaScript files such as TypeScript, SASS, and LESS files.</p>\n<p>You determine what Webpack does and how it does it with a JavaScript configuration file, <code>webpack.config.js</code>.</p>\n<a id=\"entries-outputs\"></a>\n<h3 id=\"entries-and-outputs\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/webpack#entries-and-outputs\"><i class=\"material-icons\">link</i></a>Entries and outputs</h3>\n<p>You supply Webpack with one or more <em>entry</em> files and let it find and incorporate the dependencies that radiate from those entries.\nThe one entry point file in this example is the application's root file, <code>src/main.ts</code>:</p>\n<code-example path=\"webpack/config/webpack.common.js\" region=\"one-entry\" title=\"webpack.config.js (single entry)\" linenums=\"false\">\nentry: {\n  'app': './src/main.ts'\n},\n\n</code-example>\n<p>Webpack inspects that file and traverses its <code>import</code> dependencies recursively.</p>\n<code-example path=\"webpack/src/app/app.component.ts\" region=\"component\" title=\"src/main.ts\" linenums=\"false\">\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'my-app',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent { }\n\n</code-example>\n<p>It sees that you're importing <code>@angular/core</code> so it adds that to its dependency list for potential inclusion in the bundle.\nIt opens the <code>@angular/core</code> file and follows <em>its</em> network of <code>import</code> statements until it has built the complete dependency graph from <code>main.ts</code> down.</p>\n<p>Then it <strong>outputs</strong> these files to the <code>app.js</code> <em>bundle file</em> designated in configuration:</p>\n<code-example name=\"webpack.config.js (single output)\" language=\"javascript\">\n  output: {\n    filename: 'app.js'\n  }\n\n</code-example>\n<p>This <code>app.js</code> output bundle is a single JavaScript file that contains the application source and its dependencies.\nYou'll load it later with a <code>&#x3C;script></code> tag in the <code>index.html</code>.</p>\n<a id=\"multiple-bundles\"></a>\n<h4 id=\"multiple-bundles\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/webpack#multiple-bundles\"><i class=\"material-icons\">link</i></a>Multiple bundles</h4>\n<p>You probably don't want one giant bundle of everything.\nIt's preferable to separate the volatile application app code from comparatively stable vendor code modules.</p>\n<p>Change the configuration so that it has two entry points, <code>main.ts</code> and <code>vendor.ts</code>:</p>\n<code-example language=\"javascript\">\n  entry: {\n    app: 'src/app.ts',\n    vendor: 'src/vendor.ts'\n  },\n\n  output: {\n    filename: '[name].js'\n  }\n\n</code-example>\n<p>Webpack constructs two separate dependency graphs\nand emits <em>two</em> bundle files, one called <code>app.js</code> containing only the application code and\nanother called <code>vendor.js</code> with all the vendor dependencies.</p>\n<div class=\"l-sub-section\">\n<p>The <code>[name]</code> in the output name is a <em>placeholder</em> that a Webpack plugin replaces with the entry names,\n<code>app</code> and <code>vendor</code>. Plugins are <a href=\"guide/webpack#commons-chunk-plugin\">covered later</a> in the guide.</p>\n</div>\n<p>To tell Webpack what belongs in the vendor bundle,\nadd a <code>vendor.ts</code> file that only imports the application's third-party modules:</p>\n<code-example path=\"webpack/src/vendor.ts\" title=\"src/vendor.ts\" linenums=\"false\">\n// Angular\nimport '@angular/platform-browser';\nimport '@angular/platform-browser-dynamic';\nimport '@angular/core';\nimport '@angular/common';\nimport '@angular/http';\nimport '@angular/router';\n\n// RxJS\nimport 'rxjs';\n\n// Other vendors for example jQuery, Lodash or Bootstrap\n// You can import js, ts, css, sass, ...\n\n</code-example>\n<a id=\"loaders\"></a>\n<h3 id=\"loaders\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/webpack#loaders\"><i class=\"material-icons\">link</i></a>Loaders</h3>\n<p>Webpack can bundle any kind of file: JavaScript, TypeScript, CSS, SASS, LESS, images, HTML, fonts, whatever.\nWebpack <em>itself</em> only understands JavaScript files.\nTeach it to transform non-JavaScript file into their JavaScript equivalents with <em>loaders</em>.\nConfigure loaders for TypeScript and CSS as follows.</p>\n<code-example language=\"javascript\">\n  rules: [\n    {\n      test: /\\.ts$/,\n      loader: 'awesome-typescript-loader'\n    },\n    {\n      test: /\\.css$/,\n      loaders: 'style-loader!css-loader'\n    }\n  ]\n\n</code-example>\n<p>When Webpack encounters <code>import</code> statements like the following,\nit applies the <code>test</code> RegEx patterns.</p>\n<code-example language=\"typescript\">\n  import { AppComponent } from './app.component.ts';\n\n  import 'uiframework/dist/uiframework.css';\n\n</code-example>\n<p>When a pattern matches the filename, Webpack processes the file with the associated loader.</p>\n<p>The first <code>import</code> file matches the <code>.ts</code> pattern so Webpack processes it with the <code>awesome-typescript-loader</code>.\nThe imported file doesn't match the second pattern so its loader is ignored.</p>\n<p>The second <code>import</code> matches the second <code>.css</code> pattern for which you have <em>two</em> loaders chained by the (!) character.\nWebpack applies chained loaders <em>right to left</em>. So it applies\nthe <code>css</code> loader first to flatten CSS <code>@import</code> and <code>url(...)</code> statements.\nThen it applies the <code>style</code> loader to append the css inside <code>&#x3C;style></code> elements on the page.</p>\n<a id=\"plugins\"></a>\n<h3 id=\"plugins\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/webpack#plugins\"><i class=\"material-icons\">link</i></a>Plugins</h3>\n<p>Webpack has a build pipeline with well-defined phases.\nTap into that pipeline with plugins such as the <code>uglify</code> minification plugin:</p>\n<code-example language=\"javascript\">\n  plugins: [\n    new webpack.optimize.UglifyJsPlugin()\n  ]\n\n</code-example>\n<a id=\"configure-webpack\"></a>\n<h2 id=\"configuring-webpack\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/webpack#configuring-webpack\"><i class=\"material-icons\">link</i></a>Configuring Webpack</h2>\n<p>After that brief orientation, you are ready to build your own Webpack configuration for Angular apps.</p>\n<p>Begin by setting up the development environment.</p>\n<p>Create a new project folder.</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  mkdir angular-webpack\n  cd    angular-webpack\n\n</code-example>\n<p>Add these files:</p>\n<code-tabs>\n\n  <code-pane title=\"package.json\" path=\"webpack/package.webpack.json\">\n{\n  \"name\": \"angular2-webpack\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A webpack starter for Angular\",\n  \"scripts\": {\n    \"start\": \"webpack-dev-server --inline --progress --port 8080\",\n    \"test\": \"karma start\",\n    \"build\": \"rimraf dist &#x26;&#x26; webpack --config config/webpack.prod.js --progress --profile --bail\"\n  },\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"@angular/common\": \"~4.2.0\",\n    \"@angular/compiler\": \"~4.2.0\",\n    \"@angular/core\": \"~4.2.0\",\n    \"@angular/forms\": \"~4.2.0\",\n    \"@angular/http\": \"~4.2.0\",\n    \"@angular/platform-browser\": \"~4.2.0\",\n    \"@angular/platform-browser-dynamic\": \"~4.2.0\",\n    \"@angular/router\": \"~4.2.0\",\n    \"core-js\": \"^2.4.1\",\n    \"rxjs\": \"5.0.1\",\n    \"zone.js\": \"^0.8.4\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^6.0.45\",\n    \"@types/jasmine\": \"2.5.36\",\n    \"angular2-template-loader\": \"^0.6.0\",\n    \"awesome-typescript-loader\": \"^3.0.4\",\n    \"css-loader\": \"^0.26.1\",\n    \"extract-text-webpack-plugin\": \"2.0.0-beta.5\",\n    \"file-loader\": \"^0.9.0\",\n    \"html-loader\": \"^0.4.3\",\n    \"html-webpack-plugin\": \"^2.16.1\",\n    \"jasmine-core\": \"^2.4.1\",\n    \"karma\": \"^1.2.0\",\n    \"karma-chrome-launcher\": \"^2.0.0\",\n    \"karma-jasmine\": \"^1.0.2\",\n    \"karma-sourcemap-loader\": \"^0.3.7\",\n    \"karma-webpack\": \"^2.0.1\",\n    \"null-loader\": \"^0.1.1\",\n    \"raw-loader\": \"^0.5.1\",\n    \"rimraf\": \"^2.5.2\",\n    \"style-loader\": \"^0.13.1\",\n    \"typescript\": \"~2.3.1\",\n    \"webpack\": \"2.2.1\",\n    \"webpack-dev-server\": \"2.4.1\",\n    \"webpack-merge\": \"^3.0.0\"\n  }\n}\n\n\n</code-pane>\n\n  <code-pane title=\"src/tsconfig.json\" path=\"webpack/src/tsconfig.1.json\">\n{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"module\": \"commonjs\",\n    \"moduleResolution\": \"node\",\n    \"sourceMap\": true,\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true,\n    \"lib\": [\"es2015\", \"dom\"],\n    \"noImplicitAny\": true,\n    \"suppressImplicitAnyIndexErrors\": true\n  }\n}\n\n</code-pane>\n\n  <code-pane title=\"webpack.config.js\" path=\"webpack/webpack.config.js\">\nmodule.exports = require('./config/webpack.dev.js');\n\n</code-pane>\n\n  <code-pane title=\"karma.conf.js\" path=\"webpack/karma.webpack.conf.js\">\nmodule.exports = require('./config/karma.conf.js');\n\n\n</code-pane>\n\n  <code-pane title=\"config/helpers.js\" path=\"webpack/config/helpers.js\">\nvar path = require('path');\n\nvar _root = path.resolve(__dirname, '..');\n\nfunction root(args) {\n  args = Array.prototype.slice.call(arguments, 0);\n  return path.join.apply(path, [_root].concat(args));\n}\n\nexports.root = root;\n\n</code-pane>\n\n</code-tabs>\n<div class=\"l-sub-section\">\n<p>Many of these files should be familiar from other Angular documentation guides,\nespecially the <a href=\"guide/typescript-configuration\">Typescript configuration</a> and\n<a href=\"guide/npm-packages\">npm packages</a> guides.</p>\n<p>Webpack, the plugins, and the loaders are also installed as packages.\nThey are listed in the updated <code>packages.json</code>.</p>\n</div>\n<p>Open a terminal window and install the npm packages.</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  npm install\n\n</code-example>\n<a id=\"polyfills\"></a>\n<h3 id=\"polyfills\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/webpack#polyfills\"><i class=\"material-icons\">link</i></a>Polyfills</h3>\n<p>You'll need polyfills to run an Angular application in most browsers as explained\nin the <a href=\"guide/browser-support\">Browser Support</a> guide.</p>\n<p>Polyfills should be bundled separately from the application and vendor bundles.\nAdd a <code>polyfills.ts</code> like this one to the <code>src/</code> folder.</p>\n<code-example path=\"webpack/src/polyfills.ts\" title=\"src/polyfills.ts\" linenums=\"false\">\nimport 'core-js/es6';\nimport 'core-js/es7/reflect';\nrequire('zone.js/dist/zone');\n\nif (process.env.ENV === 'production') {\n  // Production\n} else {\n  // Development and test\n  Error['stackTraceLimit'] = Infinity;\n  require('zone.js/dist/long-stack-trace-zone');\n}\n\n\n</code-example>\n<div class=\"callout is-critical\">\n<header>\n  Loading polyfills\n</header>\n<p>Load <code>zone.js</code> early within <code>polyfills.ts</code>, immediately after the other ES6 and metadata shims.</p>\n</div>\n<p>Because this bundle file will load first, <code>polyfills.ts</code> is also a good place to configure the browser environment\nfor production or development.</p>\n<a id=\"common-configuration\"></a>\n<h3 id=\"common-configuration\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/webpack#common-configuration\"><i class=\"material-icons\">link</i></a>Common configuration</h3>\n<p>Developers typically have separate configurations for development, production, and test environments.\nAll three have a lot of configuration in common.</p>\n<p>Gather the common configuration in a file called <code>webpack.common.js</code>.</p>\n<code-example path=\"webpack/config/webpack.common.js\" title=\"config/webpack.common.js\" linenums=\"false\">\nvar webpack = require('webpack');\nvar HtmlWebpackPlugin = require('html-webpack-plugin');\nvar ExtractTextPlugin = require('extract-text-webpack-plugin');\nvar helpers = require('./helpers');\n\nmodule.exports = {\n  entry: {\n    'polyfills': './src/polyfills.ts',\n    'vendor': './src/vendor.ts',\n    'app': './src/main.ts'\n  },\n\n  resolve: {\n    extensions: ['.ts', '.js']\n  },\n\n  module: {\n    rules: [\n      {\n        test: /\\.ts$/,\n        loaders: [\n          {\n            loader: 'awesome-typescript-loader',\n            options: { configFileName: helpers.root('src', 'tsconfig.json') }\n          } , 'angular2-template-loader'\n        ]\n      },\n      {\n        test: /\\.html$/,\n        loader: 'html-loader'\n      },\n      {\n        test: /\\.(png|jpe?g|gif|svg|woff|woff2|ttf|eot|ico)$/,\n        loader: 'file-loader?name=assets/[name].[hash].[ext]'\n      },\n      {\n        test: /\\.css$/,\n        exclude: helpers.root('src', 'app'),\n        loader: ExtractTextPlugin.extract({ fallbackLoader: 'style-loader', loader: 'css-loader?sourceMap' })\n      },\n      {\n        test: /\\.css$/,\n        include: helpers.root('src', 'app'),\n        loader: 'raw-loader'\n      }\n    ]\n  },\n\n  plugins: [\n    // Workaround for angular/angular#11580\n    new webpack.ContextReplacementPlugin(\n      // The (\\\\|\\/) piece accounts for path separators in *nix and Windows\n      /angular(\\\\|\\/)core(\\\\|\\/)@angular/,\n      helpers.root('./src'), // location of your src\n      {} // a map of your routes\n    ),\n\n    new webpack.optimize.CommonsChunkPlugin({\n      name: ['app', 'vendor', 'polyfills']\n    }),\n\n    new HtmlWebpackPlugin({\n      template: 'src/index.html'\n    })\n  ]\n};\n\n</code-example>\n<a id=\"inside-webpack-commonjs\"></a>\n<h3 id=\"inside-webpackcommonjs\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/webpack#inside-webpackcommonjs\"><i class=\"material-icons\">link</i></a>Inside <em>webpack.common.js</em></h3>\n<p>Webpack is a NodeJS-based tool that reads configuration from a JavaScript commonjs module file.</p>\n<p>The configuration imports dependencies with <code>require</code> statements\nand exports several objects as properties of a <code>module.exports</code> object.</p>\n<ul>\n<li><a href=\"guide/webpack#common-entries\"><code>entry</code></a>—the entry-point files that define the bundles.</li>\n<li><a href=\"guide/webpack#common-resolves\"><code>resolve</code></a>—how to resolve file names when they lack extensions.</li>\n<li><a href=\"guide/webpack#common-rules\"><code>module.rules</code></a>— <code>module</code> is an object with <code>rules</code> for deciding how files are loaded.</li>\n<li><a href=\"guide/webpack#common-plugins\"><code>plugins</code></a>—creates instances of the plugins.</li>\n</ul>\n<a id=\"common-entries\"></a>\n<h4 id=\"entry\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/webpack#entry\"><i class=\"material-icons\">link</i></a><em>entry</em></h4>\n<p>The first export is the <code>entry</code> object:</p>\n<code-example path=\"webpack/config/webpack.common.js\" region=\"entries\" title=\"config/webpack.common.js\" linenums=\"false\">\nentry: {\n  'polyfills': './src/polyfills.ts',\n  'vendor': './src/vendor.ts',\n  'app': './src/main.ts'\n},\n\n</code-example>\n<p>This <code>entry</code> object defines the three bundles:</p>\n<ul>\n<li><code>polyfills</code>—the polyfills needed to run Angular applications in most modern browsers.</li>\n<li><code>vendor</code>—the third-party dependencies such as Angular, lodash, and bootstrap.css.</li>\n<li><code>app</code>—the application code.</li>\n</ul>\n<a id=\"common-resolves\"></a>\n<h4 id=\"resolve-extension-less-imports\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/webpack#resolve-extension-less-imports\"><i class=\"material-icons\">link</i></a><em>resolve</em> extension-less imports</h4>\n<p>The app will <code>import</code> dozens if not hundreds of JavaScript and TypeScript files.\nYou could write <code>import</code> statements with explicit extensions like this example:</p>\n<code-example language=\"typescript\">\n  import { AppComponent } from './app.component.ts';\n\n</code-example>\n<p>But most <code>import</code> statements don't mention the extension at all.\nTell Webpack to resolve extension-less file requests by looking for matching files with\n<code>.ts</code> extension or <code>.js</code> extension (for regular JavaScript files and pre-compiled TypeScript files).</p>\n<code-example path=\"webpack/config/webpack.common.js\" region=\"resolve\" title=\"config/webpack.common.js\" linenums=\"false\">\nresolve: {\n  extensions: ['.ts', '.js']\n},\n\n</code-example>\n<div class=\"l-sub-section\">\n<p>If Webpack should resolve extension-less files for styles and HTML,\nadd <code>.css</code> and <code>.html</code> to the list.</p>\n</div>\n<a id=\"common-rules\"></a>\n<h4 id=\"modulerules\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/webpack#modulerules\"><i class=\"material-icons\">link</i></a><em>module.rules</em></h4>\n<p>Rules tell Webpack which loaders to use for each file, or module:</p>\n<code-example path=\"webpack/config/webpack.common.js\" region=\"loaders\" title=\"config/webpack.common.js\" linenums=\"false\">\nmodule: {\n  rules: [\n    {\n      test: /\\.ts$/,\n      loaders: [\n        {\n          loader: 'awesome-typescript-loader',\n          options: { configFileName: helpers.root('src', 'tsconfig.json') }\n        } , 'angular2-template-loader'\n      ]\n    },\n    {\n      test: /\\.html$/,\n      loader: 'html-loader'\n    },\n    {\n      test: /\\.(png|jpe?g|gif|svg|woff|woff2|ttf|eot|ico)$/,\n      loader: 'file-loader?name=assets/[name].[hash].[ext]'\n    },\n    {\n      test: /\\.css$/,\n      exclude: helpers.root('src', 'app'),\n      loader: ExtractTextPlugin.extract({ fallbackLoader: 'style-loader', loader: 'css-loader?sourceMap' })\n    },\n    {\n      test: /\\.css$/,\n      include: helpers.root('src', 'app'),\n      loader: 'raw-loader'\n    }\n  ]\n},\n\n</code-example>\n<ul>\n<li><code>awesome-typescript-loader</code>—a loader to transpile the Typescript code to ES5, guided by the <code>tsconfig.json</code> file.</li>\n<li><code>angular2-template-loader</code>—loads angular components' template and styles.</li>\n<li><code>html-loader</code>—for component templates.</li>\n<li>images/fonts—Images and fonts are bundled as well.</li>\n<li>CSS—the first pattern matches application-wide styles; the second handles\ncomponent-scoped styles (the ones specified in a component's <code>styleUrls</code> metadata property).</li>\n</ul>\n<div class=\"l-sub-section\">\n<p>The first pattern is for the application-wide styles. It excludes <code>.css</code> files within the <code>src/app</code> directory\nwhere the component-scoped styles sit. The <code>ExtractTextPlugin</code> (described below) applies the <code>style</code> and <code>css</code>\nloaders to these files.</p>\n<p>The second pattern filters for component-scoped styles and loads them as strings via the <code>raw-loader</code>,\nwhich is what Angular expects to do with styles specified in a <code>styleUrls</code> metadata property.</p>\n</div>\n<div class=\"l-sub-section\">\n<p>Multiple loaders can be chained using the array notation.</p>\n</div>\n<a id=\"common-plugins\"></a>\n<h4 id=\"plugins-1\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/webpack#plugins-1\"><i class=\"material-icons\">link</i></a><em>plugins</em></h4>\n<p>Finally, create instances of three plugins:</p>\n<code-example path=\"webpack/config/webpack.common.js\" region=\"plugins\" title=\"config/webpack.common.js\" linenums=\"false\">\nplugins: [\n  // Workaround for angular/angular#11580\n  new webpack.ContextReplacementPlugin(\n    // The (\\\\|\\/) piece accounts for path separators in *nix and Windows\n    /angular(\\\\|\\/)core(\\\\|\\/)@angular/,\n    helpers.root('./src'), // location of your src\n    {} // a map of your routes\n  ),\n\n  new webpack.optimize.CommonsChunkPlugin({\n    name: ['app', 'vendor', 'polyfills']\n  }),\n\n  new HtmlWebpackPlugin({\n    template: 'src/index.html'\n  })\n]\n\n</code-example>\n<a id=\"commons-chunk-plugin\"></a>\n<h4 id=\"commonschunkplugin\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/webpack#commonschunkplugin\"><i class=\"material-icons\">link</i></a><em>CommonsChunkPlugin</em></h4>\n<p>The <code>app.js</code> bundle should contain only application code. All vendor code belongs in the <code>vendor.js</code> bundle.</p>\n<p>Of course the application code imports vendor code.\nOn its own, Webpack is not smart enough to keep the vendor code out of the <code>app.js</code> bundle.\nThe <code>CommonsChunkPlugin</code> does that job.</p>\n<div class=\"l-sub-section\">\n<p>The <code>CommonsChunkPlugin</code> identifies the hierarchy among three <em>chunks</em>: <code>app</code> -> <code>vendor</code> -> <code>polyfills</code>.\nWhere Webpack finds that <code>app</code> has shared dependencies with <code>vendor</code>, it removes them from <code>app</code>.\nIt would remove <code>polyfills</code> from <code>vendor</code> if they shared dependencies, which they don't.</p>\n</div>\n<a id=\"html-webpack-plugin\"></a>\n<h4 id=\"htmlwebpackplugin\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/webpack#htmlwebpackplugin\"><i class=\"material-icons\">link</i></a><em>HtmlWebpackPlugin</em></h4>\n<p>Webpack generates a number of js and CSS files.\nYou <em>could</em> insert them into the <code>index.html</code> <em>manually</em>. That would be tedious and error-prone.\nWebpack can inject those scripts and links for you with the <code>HtmlWebpackPlugin</code>.</p>\n<a id=\"environment-configuration\"></a>\n<h3 id=\"environment-specific-configuration\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/webpack#environment-specific-configuration\"><i class=\"material-icons\">link</i></a>Environment-specific configuration</h3>\n<p>The <code>webpack.common.js</code> configuration file does most of the heavy lifting.\nCreate separate, environment-specific configuration files that build on <code>webpack.common</code>\nby merging into it the peculiarities particular to the target environments.</p>\n<p>These files tend to be short and simple.</p>\n<a id=\"development-configuration\"></a>\n<h3 id=\"development-configuration\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/webpack#development-configuration\"><i class=\"material-icons\">link</i></a>Development configuration</h3>\n<p>Here is the <code>webpack.dev.js</code> development configuration file.</p>\n<code-example path=\"webpack/config/webpack.dev.js\" title=\"config/webpack.dev.js\" linenums=\"false\">\nvar webpackMerge = require('webpack-merge');\nvar ExtractTextPlugin = require('extract-text-webpack-plugin');\nvar commonConfig = require('./webpack.common.js');\nvar helpers = require('./helpers');\n\nmodule.exports = webpackMerge(commonConfig, {\n  devtool: 'cheap-module-eval-source-map',\n\n  output: {\n    path: helpers.root('dist'),\n    publicPath: '/',\n    filename: '[name].js',\n    chunkFilename: '[id].chunk.js'\n  },\n\n  plugins: [\n    new ExtractTextPlugin('[name].css')\n  ],\n\n  devServer: {\n    historyApiFallback: true,\n    stats: 'minimal'\n  }\n});\n\n</code-example>\n<p>The development build relies on the Webpack development server, configured near the bottom of the file.</p>\n<p>Although you tell Webpack to put output bundles in the <code>dist</code> folder,\nthe dev server keeps all bundles in memory; it doesn't write them to disk.\nYou won't find any files in the <code>dist</code> folder, at least not any generated from <em>this development build</em>.</p>\n<p>The <code>HtmlWebpackPlugin</code>, added in <code>webpack.common.js</code>, uses the <code>publicPath</code> and the <code>filename</code> settings to generate\nappropriate <code>&#x3C;script></code> and <code>&#x3C;link></code> tags into the <code>index.html</code>.</p>\n<p>The CSS styles are buried inside the Javascript bundles by default. The <code>ExtractTextPlugin</code> extracts them into\nexternal <code>.css</code> files that the <code>HtmlWebpackPlugin</code> inscribes as <code>&#x3C;link></code> tags into the <code>index.html</code>.</p>\n<p>Refer to the <a href=\"https://webpack.github.io/docs/\">Webpack documentation</a> for details on these and\nother configuration options in this file.</p>\n<p>Grab the app code at the end of this guide and try:</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  npm start\n\n</code-example>\n<a id=\"production-configuration\"></a>\n<h3 id=\"production-configuration\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/webpack#production-configuration\"><i class=\"material-icons\">link</i></a>Production configuration</h3>\n<p>Configuration of a <em>production</em> build resembles <em>development</em> configuration with a few key changes.</p>\n<code-example path=\"webpack/config/webpack.prod.js\" title=\"config/webpack.prod.js\" linenums=\"false\">\nvar webpack = require('webpack');\nvar webpackMerge = require('webpack-merge');\nvar ExtractTextPlugin = require('extract-text-webpack-plugin');\nvar commonConfig = require('./webpack.common.js');\nvar helpers = require('./helpers');\n\nconst ENV = process.env.NODE_ENV = process.env.ENV = 'production';\n\nmodule.exports = webpackMerge(commonConfig, {\n  devtool: 'source-map',\n\n  output: {\n    path: helpers.root('dist'),\n    publicPath: '/',\n    filename: '[name].[hash].js',\n    chunkFilename: '[id].[hash].chunk.js'\n  },\n\n  plugins: [\n    new webpack.NoEmitOnErrorsPlugin(),\n    new webpack.optimize.UglifyJsPlugin({ // https://github.com/angular/angular/issues/10618\n      mangle: {\n        keep_fnames: true\n      }\n    }),\n    new ExtractTextPlugin('[name].[hash].css'),\n    new webpack.DefinePlugin({\n      'process.env': {\n        'ENV': JSON.stringify(ENV)\n      }\n    }),\n    new webpack.LoaderOptionsPlugin({\n      htmlLoader: {\n        minimize: false // workaround for ng2\n      }\n    })\n  ]\n});\n\n\n</code-example>\n<p>You'll deploy the application and its dependencies to a real production server.\nYou won't deploy the artifacts needed only in development.</p>\n<p>Put the production output bundle files in the <code>dist</code> folder.</p>\n<p>Webpack generates file names with cache-busting hash.\nThanks to the <code>HtmlWebpackPlugin</code>, you don't have to update the <code>index.html</code> file when the hash changes.</p>\n<p>There are additional plugins:</p>\n<ul>\n<li>*<code>NoEmitOnErrorsPlugin</code>—stops the build if there is an error.</li>\n<li>*<code>UglifyJsPlugin</code>—minifies the bundles.</li>\n<li>*<code>ExtractTextPlugin</code>—extracts embedded css as external files, adding cache-busting hash to the filename.</li>\n<li>*<code>DefinePlugin</code>—use to define environment variables that you can reference within the application.</li>\n<li>*<code>LoaderOptionsPlugins</code>—to override options of certain loaders.</li>\n</ul>\n<p>Thanks to the <code>DefinePlugin</code> and the <code>ENV</code> variable defined at top, you can enable Angular production mode like this:</p>\n<code-example path=\"webpack/src/main.ts\" region=\"enable-prod\" title=\"src/main.ts\" linenums=\"false\">\nif (process.env.ENV === 'production') {\n  enableProdMode();\n}\n\n</code-example>\n<p>Grab the app code at the end of this guide and try:</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  npm run build\n\n</code-example>\n<a id=\"test-configuration\"></a>\n<h3 id=\"test-configuration\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/webpack#test-configuration\"><i class=\"material-icons\">link</i></a>Test configuration</h3>\n<p>You don't need much configuration to run unit tests.\nYou don't need the loaders and plugins that you declared for your development and production builds.\nYou probably don't need to load and process the application-wide styles files for unit tests and doing so would slow you down;\nyou'll use the <code>null</code> loader for those CSS files.</p>\n<p>You could merge the test configuration into the <code>webpack.common</code> configuration and override the parts you don't want or need.\nBut it might be simpler to start over with a completely fresh configuration.</p>\n<code-example path=\"webpack/config/webpack.test.js\" title=\"config/webpack.test.js\" linenums=\"false\">\nvar webpack = require('webpack');\nvar helpers = require('./helpers');\n\nmodule.exports = {\n  devtool: 'inline-source-map',\n\n  resolve: {\n    extensions: ['.ts', '.js']\n  },\n\n  module: {\n    rules: [\n      {\n        test: /\\.ts$/,\n        loaders: [\n          {\n            loader: 'awesome-typescript-loader',\n            options: { configFileName: helpers.root('src', 'tsconfig.json') }\n          } , 'angular2-template-loader'\n        ]\n      },\n      {\n        test: /\\.html$/,\n        loader: 'html-loader'\n\n      },\n      {\n        test: /\\.(png|jpe?g|gif|svg|woff|woff2|ttf|eot|ico)$/,\n        loader: 'null-loader'\n      },\n      {\n        test: /\\.css$/,\n        exclude: helpers.root('src', 'app'),\n        loader: 'null-loader'\n      },\n      {\n        test: /\\.css$/,\n        include: helpers.root('src', 'app'),\n        loader: 'raw-loader'\n      }\n    ]\n  },\n\n  plugins: [\n    new webpack.ContextReplacementPlugin(\n      // The (\\\\|\\/) piece accounts for path separators in *nix and Windows\n      /angular(\\\\|\\/)core(\\\\|\\/)@angular/,\n      helpers.root('./src'), // location of your src\n      {} // a map of your routes\n    )\n  ]\n}\n\n\n</code-example>\n<p>Reconfigure <a href=\"https://karma-runner.github.io/1.0/index.html\">Karma</a> to use Webpack to run the tests:</p>\n<code-example path=\"webpack/config/karma.conf.js\" title=\"config/karma.conf.js\" linenums=\"false\">\nvar webpackConfig = require('./webpack.test');\n\nmodule.exports = function (config) {\n  var _config = {\n    basePath: '',\n\n    frameworks: ['jasmine'],\n\n    files: [\n      {pattern: './config/karma-test-shim.js', watched: false}\n    ],\n\n    preprocessors: {\n      './config/karma-test-shim.js': ['webpack', 'sourcemap']\n    },\n\n    webpack: webpackConfig,\n\n    webpackMiddleware: {\n      stats: 'errors-only'\n    },\n\n    webpackServer: {\n      noInfo: true\n    },\n\n    reporters: ['progress', 'kjhtml'],\n    port: 9876,\n    colors: true,\n    logLevel: config.LOG_INFO,\n    autoWatch: false,\n    browsers: ['Chrome'],\n    singleRun: true\n  };\n\n  config.set(_config);\n};\n\n</code-example>\n<p>You don't precompile the TypeScript; Webpack transpiles the Typescript files on the fly, in memory, and feeds the emitted JS directly to Karma.\nThere are no temporary files on disk.</p>\n<p>The <code>karma-test-shim</code> tells Karma what files to pre-load and\nprimes the Angular test framework with test versions of the providers that every app expects to be pre-loaded.</p>\n<code-example path=\"webpack/config/karma-test-shim.js\" title=\"config/karma-test-shim.js\" linenums=\"false\">\nError.stackTraceLimit = Infinity;\n\nrequire('core-js/es6');\nrequire('core-js/es7/reflect');\n\nrequire('zone.js/dist/zone');\nrequire('zone.js/dist/long-stack-trace-zone');\nrequire('zone.js/dist/proxy');\nrequire('zone.js/dist/sync-test');\nrequire('zone.js/dist/jasmine-patch');\nrequire('zone.js/dist/async-test');\nrequire('zone.js/dist/fake-async-test');\n\nvar appContext = require.context('../src', true, /\\.spec\\.ts/);\n\nappContext.keys().forEach(appContext);\n\nvar testing = require('@angular/core/testing');\nvar browser = require('@angular/platform-browser-dynamic/testing');\n\ntesting.TestBed.initTestEnvironment(browser.BrowserDynamicTestingModule, browser.platformBrowserDynamicTesting());\n\n\n</code-example>\n<p>Notice that you do <em>not</em> load the application code explicitly.\nYou tell Webpack to find and load the test files (the files ending in <code>.spec.ts</code>).\nEach spec file imports all—and only—the application source code that it tests.\nWebpack loads just <em>those</em> specific application files and ignores the other files that you aren't testing.</p>\n<p>Grab the app code at the end of this guide and try:</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  npm test\n\n</code-example>\n<a id=\"try\"></a>\n<h2 id=\"trying-it-out\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/webpack#trying-it-out\"><i class=\"material-icons\">link</i></a>Trying it out</h2>\n<p>Here is the source code for a small application that bundles with the\nWebpack techniques covered in this guide.</p>\n<code-tabs>\n\n  <code-pane title=\"src/index.html\" path=\"webpack/src/index.html\">\n&#x3C;!DOCTYPE html>\n&#x3C;html>\n  &#x3C;head>\n    &#x3C;base href=\"/\">\n    &#x3C;title>Angular With Webpack&#x3C;/title>\n    &#x3C;meta charset=\"UTF-8\">\n    &#x3C;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  &#x3C;/head>\n  &#x3C;body>\n    &#x3C;my-app>Loading...&#x3C;/my-app>\n  &#x3C;/body>\n&#x3C;/html>\n\n</code-pane>\n\n  <code-pane title=\"src/main.ts\" path=\"webpack/src/main.ts\">\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { enableProdMode } from '@angular/core';\n\nimport { AppModule } from './app/app.module';\n\nif (process.env.ENV === 'production') {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n</code-pane>\n\n  <code-pane title=\"src/assets/css/styles.css\" path=\"webpack/src/assets/css/styles.css\">\nbody {\n    background: #0147A7;\n    color: #fff;\n}\n\n</code-pane>\n\n</code-tabs>\n<code-tabs>\n\n  <code-pane title=\"src/app/app.component.ts\" path=\"webpack/src/app/app.component.ts\">\nimport { Component } from '@angular/core';\n\nimport '../assets/css/styles.css';\n\n@Component({\n  selector: 'my-app',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent { }\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/app.component.html\" path=\"webpack/src/app/app.component.html\">\n&#x3C;main>\n  &#x3C;h1>Hello from Angular App with Webpack&#x3C;/h1>\n\n  &#x3C;img src=\"../assets/images/angular.png\">\n&#x3C;/main>\n\n</code-pane>\n\n  <code-pane title=\"src/app/app.component.css\" path=\"webpack/src/app/app.component.css\">\nmain {\n  padding: 1em;\n  font-family: Arial, Helvetica, sans-serif;\n  text-align: center;\n  margin-top: 50px;\n  display: block;\n}\n\n</code-pane>\n\n  <code-pane title=\"src/app/app.component.spec.ts\" path=\"webpack/src/app/app.component.spec.ts\">\nimport { TestBed } from '@angular/core/testing';\n\nimport { AppComponent } from './app.component';\n\ndescribe('App', () => {\n  beforeEach(() => {\n    TestBed.configureTestingModule({ declarations: [AppComponent]});\n  });\n\n  it ('should work', () => {\n    let fixture = TestBed.createComponent(AppComponent);\n    expect(fixture.componentInstance instanceof AppComponent).toBe(true, 'should create AppComponent');\n  });\n});\n\n</code-pane>\n\n  <code-pane title=\"src/app/app.module.ts\" path=\"webpack/src/app/app.module.ts\">\nimport { NgModule } from '@angular/core';\nimport { BrowserModule }  from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  imports: [\n    BrowserModule\n  ],\n  declarations: [\n    AppComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-pane>\n\n</code-tabs>\n<p>The <code>app.component.html</code> displays this downloadable Angular logo\n<a href=\"assets/images/logos/angular/angular.png\">\n<img src=\"assets/images/logos/angular/angular.png\" height=\"40px\" title=\"download Angular logo\"></a>.\nCreate a folder called <code>images</code> under the project's <code>assets</code> folder, then right-click (Cmd+click on Mac)\non the image and download it to that folder.</p>\n<a id=\"bundle-ts\"></a>\n<p>Here again are the TypeScript entry-point files that define the <code>polyfills</code> and <code>vendor</code> bundles.</p>\n<code-tabs>\n\n  <code-pane title=\"src/polyfills.ts\" path=\"webpack/src/polyfills.ts\">\nimport 'core-js/es6';\nimport 'core-js/es7/reflect';\nrequire('zone.js/dist/zone');\n\nif (process.env.ENV === 'production') {\n  // Production\n} else {\n  // Development and test\n  Error['stackTraceLimit'] = Infinity;\n  require('zone.js/dist/long-stack-trace-zone');\n}\n\n\n</code-pane>\n\n  <code-pane title=\"src/vendor.ts\" path=\"webpack/src/vendor.ts\">\n// Angular\nimport '@angular/platform-browser';\nimport '@angular/platform-browser-dynamic';\nimport '@angular/core';\nimport '@angular/common';\nimport '@angular/http';\nimport '@angular/router';\n\n// RxJS\nimport 'rxjs';\n\n// Other vendors for example jQuery, Lodash or Bootstrap\n// You can import js, ts, css, sass, ...\n\n</code-pane>\n\n</code-tabs>\n<a id=\"highlights\"></a>\n<h3 class=\"no-toc\" id=\"highlights\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/webpack#highlights\"><i class=\"material-icons\">link</i></a>Highlights</h3>\n<ul>\n<li>\n<p>There are no <code>&#x3C;script></code> or <code>&#x3C;link></code> tags in the <code>index.html</code>.\nThe <code>HtmlWebpackPlugin</code> inserts them dynamically at runtime.</p>\n</li>\n<li>\n<p>The <code>AppComponent</code> in <code>app.component.ts</code> imports the application-wide css with a simple <code>import</code> statement.</p>\n</li>\n<li>\n<p>The <code>AppComponent</code> itself has its own html template and css file. WebPack loads them with calls to <code>require()</code>.\nWebpack stashes those component-scoped files in the <code>app.js</code> bundle too.\nYou don't see those calls in the source code;\nthey're added behind the scenes by the <code>angular2-template-loader</code> plug-in.</p>\n</li>\n<li>\n<p>The <code>vendor.ts</code> consists of vendor dependency <code>import</code> statements that drive the <code>vendor.js</code> bundle.\nThe application imports these modules too; they'd be duplicated in the <code>app.js</code> bundle\nif the <code>CommonsChunkPlugin</code> hadn't detected the overlap and removed them from <code>app.js</code>.\n<a id=\"conclusion\"></a></p>\n</li>\n</ul>\n<h2 id=\"conclusion\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/webpack#conclusion\"><i class=\"material-icons\">link</i></a>Conclusion</h2>\n<p>You've learned just enough Webpack to configurate development, test and production builds\nfor a small Angular application.</p>\n<p><em>You could always do more</em>. Search the web for expert advice and expand your Webpack knowledge.</p>\n<p><a href=\"guide/webpack#top\">Back to top</a></p>\n\n</div>"
}