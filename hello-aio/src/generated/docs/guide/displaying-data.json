{
  "id": "guide/displaying-data",
  "title": "Displaying Data",
  "contents": "\n<div class=\"content\">\n<h1 id=\"displaying-data\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/displaying-data#displaying-data\"><i class=\"material-icons\">link</i></a>Displaying Data</h1>\n<p>You can display data by binding controls in an HTML template to properties of an Angular component.</p>\n<p>In this page, you'll create a component with a list of heroes.\nYou'll display the list of hero names and\nconditionally show a message below the list.</p>\n<p>The final UI looks like this:</p>\n<figure>\n  <img src=\"generated/images/guide/displaying-data/final.png\" alt=\"Final UI\" width=\"348\" height=\"266\">\n</figure>\n<div class=\"l-sub-section\">\n<p>The <live-example></live-example> demonstrates all of the syntax and code\nsnippets described in this page.</p>\n</div>\n<a id=\"interpolation\"></a>\n<h2 id=\"showing-component-properties-with-interpolation\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/displaying-data#showing-component-properties-with-interpolation\"><i class=\"material-icons\">link</i></a>Showing component properties with interpolation</h2>\n<p>The easiest way to display a component property\nis to bind the property name through interpolation.\nWith interpolation, you put the property name in the view template, enclosed in double curly braces: <code>{{myHero}}</code>.</p>\n<p>Follow the <a href=\"guide/setup\">setup</a> instructions for creating a new project\nnamed <code>displaying-data</code>.</p>\n<p>Then modify the <code>app.component.ts</code> file by\nchanging the template and the body of the component.</p>\n<p>When you're done, it should look like this:</p>\n<code-example path=\"displaying-data/src/app/app.component.1.ts\" title=\"src/app/app.component.ts\">\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'my-app',\n  template: `\n    &#x3C;h1>{{title}}&#x3C;/h1>\n    &#x3C;h2>My favorite hero is: {{myHero}}&#x3C;/h2>\n    `\n})\nexport class AppComponent {\n  title = 'Tour of Heroes';\n  myHero = 'Windstorm';\n}\n\n\n</code-example>\n<p>You added two properties to the formerly empty component: <code>title</code> and <code>myHero</code>.</p>\n<p>The revised template displays the two component properties using double curly brace\ninterpolation:</p>\n<code-example path=\"displaying-data/src/app/app.component.1.ts\" linenums=\"false\" title=\"src/app/app.component.ts (template)\" region=\"template\">\ntemplate: `\n  &#x3C;h1>{{title}}&#x3C;/h1>\n  &#x3C;h2>My favorite hero is: {{myHero}}&#x3C;/h2>\n  `\n\n</code-example>\n<div class=\"l-sub-section\">\n<p>The template is a multi-line string within ECMAScript 2015 backticks (<code>`</code>).\nThe backtick (<code>`</code>)—which is <em>not</em> the same character as a single\nquote (<code>'</code>)—allows you to compose a string over several lines, which makes the\nHTML more readable.</p>\n</div>\n<p>Angular automatically pulls the value of the <code>title</code> and <code>myHero</code> properties from the component and\ninserts those values into the browser. Angular updates the display\nwhen these properties change.</p>\n<div class=\"l-sub-section\">\n<p>More precisely, the redisplay occurs after some kind of asynchronous event related to\nthe view, such as a keystroke, a timer completion, or a response to an HTTP request.</p>\n</div>\n<p>Notice that you don't call <strong>new</strong> to create an instance of the <code>AppComponent</code> class.\nAngular is creating an instance for you. How?</p>\n<p>The CSS <code>selector</code> in the <code>@Component</code> decorator specifies an element named <code>&#x3C;my-app></code>.\nThat element is a placeholder in the body of your <code>index.html</code> file:</p>\n<code-example path=\"displaying-data/src/index.html\" linenums=\"false\" title=\"src/index.html (body)\" region=\"body\">\n&#x3C;body>\n  &#x3C;my-app>loading...&#x3C;/my-app>\n&#x3C;/body>\n\n</code-example>\n<p>When you bootstrap with the <code>AppComponent</code> class (in <code>main.ts</code>), Angular looks for a <code>&#x3C;my-app></code>\nin the <code>index.html</code>, finds it, instantiates an instance of <code>AppComponent</code>, and renders it\ninside the <code>&#x3C;my-app></code> tag.</p>\n<p>Now run the app. It should display the title and hero name:</p>\n<figure>\n  <img src=\"generated/images/guide/displaying-data/title-and-hero.png\" alt=\"Title and Hero\" width=\"224\" height=\"59\">\n</figure>\n<p>The next few sections review some of the coding choices in the app.</p>\n<h2 id=\"template-inline-or-template-file\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/displaying-data#template-inline-or-template-file\"><i class=\"material-icons\">link</i></a>Template inline or template file?</h2>\n<p>You can store your component's template in one of two places.\nYou can define it <em>inline</em> using the <code>template</code> property, or you can define\nthe template in a separate HTML file and link to it in\nthe component metadata using the <code>@Component</code> decorator's <code>templateUrl</code> property.</p>\n<p>The choice between inline and separate HTML is a matter of taste,\ncircumstances, and organization policy.\nHere the app uses inline HTML because the template is small and the demo\nis simpler without the additional HTML file.</p>\n<p>In either style, the template data bindings have the same access to the component's properties.</p>\n<h2 id=\"constructor-or-variable-initialization\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/displaying-data#constructor-or-variable-initialization\"><i class=\"material-icons\">link</i></a>Constructor or variable initialization?</h2>\n<p>Although this example uses variable assignment to initialize the components, you can instead declare and initialize the properties using a constructor:</p>\n<code-example path=\"displaying-data/src/app/app-ctor.component.ts\" linenums=\"false\" title=\"src/app/app-ctor.component.ts (class)\" region=\"class\">\nexport class AppCtorComponent {\n  title: string;\n  myHero: string;\n\n  constructor() {\n    this.title = 'Tour of Heroes';\n    this.myHero = 'Windstorm';\n  }\n}\n\n\n</code-example>\n<p>This app uses more terse \"variable assignment\" style simply for brevity.</p>\n<a id=\"ngFor\"></a>\n<h2 id=\"showing-an-array-property-with-ngfor\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/displaying-data#showing-an-array-property-with-ngfor\"><i class=\"material-icons\">link</i></a>Showing an array property with <strong>*ngFor</strong></h2>\n<p>To display a list of heroes, begin by adding an array of hero names to the component and redefine <code>myHero</code> to be the first name in the array.</p>\n<code-example path=\"displaying-data/src/app/app.component.2.ts\" linenums=\"false\" title=\"src/app/app.component.ts (class)\" region=\"class\">\nexport class AppComponent {\n  title = 'Tour of Heroes';\n  heroes = ['Windstorm', 'Bombasto', 'Magneta', 'Tornado'];\n  myHero = this.heroes[0];\n}\n\n\n</code-example>\n<p>Now use the Angular <code>ngFor</code> directive in the template to display\neach item in the <code>heroes</code> list.</p>\n<code-example path=\"displaying-data/src/app/app.component.2.ts\" linenums=\"false\" title=\"src/app/app.component.ts (template)\" region=\"template\">\ntemplate: `\n  &#x3C;h1>{{title}}&#x3C;/h1>\n  &#x3C;h2>My favorite hero is: {{myHero}}&#x3C;/h2>\n  &#x3C;p>Heroes:&#x3C;/p>\n  &#x3C;ul>\n    &#x3C;li *ngFor=\"let hero of heroes\">\n      {{ hero }}\n    &#x3C;/li>\n  &#x3C;/ul>\n`\n\n</code-example>\n<p>This UI uses the HTML unordered list with <code>&#x3C;ul></code> and <code>&#x3C;li></code> tags. The <code>*ngFor</code>\nin the <code>&#x3C;li></code> element is the Angular \"repeater\" directive.\nIt marks that <code>&#x3C;li></code> element (and its children) as the \"repeater template\":</p>\n<code-example path=\"displaying-data/src/app/app.component.2.ts\" linenums=\"false\" title=\"src/app/app.component.ts (li)\" region=\"li\">\n&#x3C;li *ngFor=\"let hero of heroes\">\n  {{ hero }}\n&#x3C;/li>\n\n</code-example>\n<div class=\"alert is-important\">\n<p>Don't forget the leading asterisk (*) in <code>*ngFor</code>. It is an essential part of the syntax.\nFor more information, see the <a href=\"guide/template-syntax#ngFor\">Template Syntax</a> page.</p>\n</div>\n<p>Notice the <code>hero</code> in the <code>ngFor</code> double-quoted instruction;\nit is an example of a template input variable. Read\nmore about template input variables in the <a href=\"guide/template-syntax#microsyntax\">microsyntax</a> section of\nthe <a href=\"guide/template-syntax\">Template Syntax</a> page.</p>\n<p>Angular duplicates the <code>&#x3C;li></code> for each item in the list, setting the <code>hero</code> variable\nto the item (the hero) in the current iteration. Angular uses that variable as the\ncontext for the interpolation in the double curly braces.</p>\n<div class=\"l-sub-section\">\n<p>In this case, <code>ngFor</code> is displaying an array, but <code>ngFor</code> can\nrepeat items for any <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\">iterable</a> object.</p>\n</div>\n<p>Now the heroes appear in an unordered list.</p>\n<figure>\n  <img src=\"generated/images/guide/displaying-data/hero-names-list.png\" alt=\"After ngfor\" width=\"250\" height=\"273\">\n</figure>\n<h2 id=\"creating-a-class-for-the-data\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/displaying-data#creating-a-class-for-the-data\"><i class=\"material-icons\">link</i></a>Creating a class for the data</h2>\n<p>The app's code defines the data directly inside the component, which isn't best practice.\nIn a simple demo, however, it's fine.</p>\n<p>At the moment, the binding is to an array of strings.\nIn real applications, most bindings are to more specialized objects.</p>\n<p>To convert this binding to use specialized objects, turn the array\nof hero names into an array of <code>Hero</code> objects. For that you'll need a <code>Hero</code> class.</p>\n<p>Create a new file in the <code>app</code> folder called  <code>hero.ts</code> with the following code:</p>\n<code-example path=\"displaying-data/src/app/hero.ts\" linenums=\"false\" title=\"src/app/hero.ts (excerpt)\">\nexport class Hero {\n  constructor(\n    public id: number,\n    public name: string) { }\n}\n\n</code-example>\n<p>You've defined a class with a constructor and two properties: <code>id</code> and <code>name</code>.</p>\n<p>It might not look like the class has properties, but it does.\nThe declaration of the constructor parameters takes advantage of a TypeScript shortcut.</p>\n<p>Consider the first parameter:</p>\n<code-example path=\"displaying-data/src/app/hero.ts\" linenums=\"false\" title=\"src/app/hero.ts (id)\" region=\"id\">\npublic id: number,\n\n</code-example>\n<p>That brief syntax does a lot:</p>\n<ul>\n<li>Declares a constructor parameter and its type.</li>\n<li>Declares a public property of the same name.</li>\n<li>Initializes that property with the corresponding argument when creating an instance of the class.</li>\n</ul>\n<h3 id=\"using-the-hero-class\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/displaying-data#using-the-hero-class\"><i class=\"material-icons\">link</i></a>Using the Hero class</h3>\n<p>After importing the <code>Hero</code> class, the <code>AppComponent.heroes</code> property can return a <em>typed</em> array\nof <code>Hero</code> objects:</p>\n<code-example path=\"displaying-data/src/app/app.component.3.ts\" linenums=\"false\" title=\"src/app/app.component.ts (heroes)\" region=\"heroes\">\nheroes = [\n  new Hero(1, 'Windstorm'),\n  new Hero(13, 'Bombasto'),\n  new Hero(15, 'Magneta'),\n  new Hero(20, 'Tornado')\n];\nmyHero = this.heroes[0];\n\n</code-example>\n<p>Next, update the template.\nAt the moment it displays the hero's <code>id</code> and <code>name</code>.\nFix that to display only the hero's <code>name</code> property.</p>\n<code-example path=\"displaying-data/src/app/app.component.3.ts\" linenums=\"false\" title=\"src/app/app.component.ts (template)\" region=\"template\">\ntemplate: `\n  &#x3C;h1>{{title}}&#x3C;/h1>\n  &#x3C;h2>My favorite hero is: {{myHero.name}}&#x3C;/h2>\n  &#x3C;p>Heroes:&#x3C;/p>\n  &#x3C;ul>\n    &#x3C;li *ngFor=\"let hero of heroes\">\n      {{ hero.name }}\n    &#x3C;/li>\n  &#x3C;/ul>\n`\n\n</code-example>\n<p>The display looks the same, but the code is clearer.</p>\n<a id=\"ngIf\"></a>\n<h2 id=\"conditional-display-with-ngif\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/displaying-data#conditional-display-with-ngif\"><i class=\"material-icons\">link</i></a>Conditional display with NgIf</h2>\n<p>Sometimes an app needs to display a view or a portion of a view only under specific circumstances.</p>\n<p>Let's change the example to display a message if there are more than three heroes.</p>\n<p>The Angular <code>ngIf</code> directive inserts or removes an element based on a <em>truthy/falsy</em> condition.\nTo see it in action, add the following paragraph at the bottom of the template:</p>\n<code-example path=\"displaying-data/src/app/app.component.ts\" linenums=\"false\" title=\"src/app/app.component.ts (message)\" region=\"message\">\n&#x3C;p *ngIf=\"heroes.length > 3\">There are many heroes!&#x3C;/p>\n\n</code-example>\n<div class=\"alert is-important\">\n<p>Don't forget the leading asterisk (*) in <code>*ngIf</code>. It is an essential part of the syntax.\nRead more about <code>ngIf</code> and <code>*</code> in the <a href=\"guide/template-syntax#ngIf\">ngIf section</a> of the <a href=\"guide/template-syntax\">Template Syntax</a> page.</p>\n</div>\n<p>The template expression inside the double quotes,\n<code>*ngIf=\"heroes.length > 3\"</code>, looks and behaves much like TypeScript.\nWhen the component's list of heroes has more than three items, Angular adds the paragraph\nto the DOM and the message appears. If there are three or fewer items, Angular omits the\nparagraph, so no message appears. For more information,\nsee the <a href=\"guide/template-syntax#template-expressions\">template expressions</a> section of the\n<a href=\"guide/template-syntax\">Template Syntax</a> page.</p>\n<div class=\"alert is-helpful\">\n<p>Angular isn't showing and hiding the message. It is adding and removing the paragraph element from the DOM. That improves performance, especially in larger projects when conditionally including or excluding\nbig chunks of HTML with many data bindings.</p>\n</div>\n<p>Try it out. Because the array has four items, the message should appear.\nGo back into <code>app.component.ts\"</code> and delete or comment out one of the elements from the hero array.\nThe browser should refresh automatically and the message should disappear.</p>\n<h2 id=\"summary\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/displaying-data#summary\"><i class=\"material-icons\">link</i></a>Summary</h2>\n<p>Now you know how to use:</p>\n<ul>\n<li><strong>Interpolation</strong> with double curly braces to display a component property.</li>\n<li><strong>ngFor</strong> to display an array of items.</li>\n<li>A TypeScript class to shape the <strong>model data</strong> for your component and display properties of that model.</li>\n<li><strong>ngIf</strong> to conditionally display a chunk of HTML based on a boolean expression.</li>\n</ul>\n<p>Here's the final code:</p>\n<code-tabs>\n\n  <code-pane title=\"src/app/app.component.ts\" path=\"displaying-data/src/app/app.component.ts\" region=\"final\">\nimport { Component } from '@angular/core';\n\nimport { Hero } from './hero';\n\n@Component({\n  selector: 'my-app',\n  template: `\n  &#x3C;h1>{{title}}&#x3C;/h1>\n  &#x3C;h2>My favorite hero is: {{myHero.name}}&#x3C;/h2>\n  &#x3C;p>Heroes:&#x3C;/p>\n  &#x3C;ul>\n    &#x3C;li *ngFor=\"let hero of heroes\">\n      {{ hero.name }}\n      &#x3C;/li>\n  &#x3C;/ul>\n  &#x3C;p *ngIf=\"heroes.length > 3\">There are many heroes!&#x3C;/p>\n`\n})\nexport class AppComponent {\n  title = 'Tour of Heroes';\n  heroes = [\n    new Hero(1, 'Windstorm'),\n    new Hero(13, 'Bombasto'),\n    new Hero(15, 'Magneta'),\n    new Hero(20, 'Tornado')\n  ];\n  myHero = this.heroes[0];\n}\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/hero.ts\" path=\"displaying-data/src/app/hero.ts\">\nexport class Hero {\n  constructor(\n    public id: number,\n    public name: string) { }\n}\n\n</code-pane>\n\n  <code-pane title=\"src/app/app.module.ts\" path=\"displaying-data/src/app/app.module.ts\">\nimport { NgModule } from '@angular/core';\nimport { BrowserModule }  from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  imports: [\n    BrowserModule\n  ],\n  declarations: [\n    AppComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-pane>\n\n  <code-pane title=\"main.ts\" path=\"displaying-data/src/main.ts\">\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n\n</code-pane>\n\n</code-tabs>\n\n</div>"
}