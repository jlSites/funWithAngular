{
  "id": "api/animations/keyframes",
  "title": "keyframes",
  "contents": "<article>\n  <header class=\"api-header\">\n    <h1 class=\"no-toc\" id=\"keyframes\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/animations/keyframes#keyframes\"><i class=\"material-icons\">link</i></a>keyframes</h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    <label class=\"api-status-label experimental\">experimental</label>\n    \n    <span class=\"version\"></span>\n  </header>\n\n  \n  <!-- INFO BAR -->\n<section class=\"info-bar\">\n\n<table class=\"is-full-width\">\n<tbody>\n<tr>\n  <th>npm Package</th>\n  <td><a href=\"https://www.npmjs.com/package/@angular/animations\">@angular/animations</a></td>\n</tr>\n<tr>\n  <th>Module</th>\n  <td><code>import { keyframes } from <a href=\"api/animations\">@angular/animations</a>;</code></td>\n</tr>\n<tr>\n  <th>Source</th>\n  <td><a href=\"https://github.com/angular/angular/tree/4.3.0-rc.0/packages/animations/src/animation_metadata.ts#L573-L621\">animations/src/animation_metadata.ts</a></td>\n</tr>\n\n</tbody>\n</table>\n\n  \n  \n  \n  \n<code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">\nfunction keyframes(steps: AnimationStyleMetadata[]): AnimationKeyframesSequenceMetadata;\n</code-example>\n\n  \n\n  \n\n<section class=\"description\">\n  <h2 id=\"description\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/animations/keyframes#description\"><i class=\"material-icons\">link</i></a>Description</h2>\n  <p><code>keyframes</code> is an animation-specific function that is designed to be used inside of Angular's\nanimation DSL language. If this information is new, please navigate to the <a href=\"api/core/Component#animations\">component animations metadata page</a> to gain a better understanding of\nhow animations in Angular are used.</p>\n<p><code>keyframes</code> specifies a collection of <a href=\"api/animations/style\">style</a> entries each optionally characterized\nby an <code>offset</code> value.</p>\n<h3 id=\"usage\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/animations/keyframes#usage\"><i class=\"material-icons\">link</i></a>Usage</h3>\n<p>The <code>keyframes</code> animation function is designed to be used alongside the <a href=\"api/animations/animate\">animate</a>\nanimation function. Instead of applying animations from where they are currently to their\ndestination, keyframes can describe how each style entry is applied and at what point within the\nanimation arc (much like CSS Keyframe Animations do).</p>\n<p>For each <code>style()</code> entry an <code>offset</code> value can be set. Doing so allows to specifiy at what\npercentage of the animate time the styles will be applied.</p>\n<code-example language=\"typescript\">\n// the provided offset values describe when each backgroundColor value is applied.\nanimate(\"5s\", keyframes([\n  style({ backgroundColor: \"red\", offset: 0 }),\n  style({ backgroundColor: \"blue\", offset: 0.2 }),\n  style({ backgroundColor: \"orange\", offset: 0.3 }),\n  style({ backgroundColor: \"black\", offset: 1 })\n]))\n</code-example>\n<p>Alternatively, if there are no <code>offset</code> values used within the style entries then the offsets\nwill be calculated automatically.</p>\n<code-example language=\"typescript\">\nanimate(\"5s\", keyframes([\n  style({ backgroundColor: \"red\" }) // offset = 0\n  style({ backgroundColor: \"blue\" }) // offset = 0.33\n  style({ backgroundColor: \"orange\" }) // offset = 0.66\n  style({ backgroundColor: \"black\" }) // offset = 1\n]))\n</code-example>\n<code-example>\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {Component, NgModule} from '@angular/core';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\n\n@Component({\n  selector: 'example-app',\n  styles: [`\n    .toggle-container {\n      background-color:white;\n      border:10px solid black;\n      width:200px;\n      text-align:center;\n      line-height:100px;\n      font-size:50px;\n      box-sizing:border-box;\n      overflow:hidden;\n    }\n  `],\n  animations: [trigger(\n      'openClose',\n      [\n        state('collapsed, void', style({height: '0px', color: 'maroon', borderColor: 'maroon'})),\n        state('expanded', style({height: '*', borderColor: 'green', color: 'green'})),\n        transition(\n            'collapsed &#x3C;=> expanded', [animate(500, style({height: '250px'})), animate(500)])\n      ])],\n  template: `\n    &#x3C;button (click)=\"expand()\">Open&#x3C;/button>\n    &#x3C;button (click)=\"collapse()\">Closed&#x3C;/button>\n    &#x3C;hr />\n    &#x3C;div class=\"toggle-container\" [@openClose]=\"stateExpression\">\n      Look at this box\n    &#x3C;/div>\n  `\n})\nexport class MyExpandoCmp {\n  stateExpression: string;\n  constructor() { this.collapse(); }\n  expand() { this.stateExpression = 'expanded'; }\n  collapse() { this.stateExpression = 'collapsed'; }\n}\n\n@NgModule(\n    {imports: [BrowserAnimationsModule], declarations: [MyExpandoCmp], bootstrap: [MyExpandoCmp]})\nexport class AppModule {\n}\n\n\n</code-example>\n\n</section>\n\n\n\n\n\n</section></article>"
}