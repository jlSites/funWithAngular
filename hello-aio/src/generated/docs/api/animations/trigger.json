{
  "id": "api/animations/trigger",
  "title": "trigger",
  "contents": "<article>\n  <header class=\"api-header\">\n    <h1 class=\"no-toc\" id=\"trigger\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/animations/trigger#trigger\"><i class=\"material-icons\">link</i></a>trigger</h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    <label class=\"api-status-label experimental\">experimental</label>\n    \n    <span class=\"version\"></span>\n  </header>\n\n  \n  <!-- INFO BAR -->\n<section class=\"info-bar\">\n\n<table class=\"is-full-width\">\n<tbody>\n<tr>\n  <th>npm Package</th>\n  <td><a href=\"https://www.npmjs.com/package/@angular/animations\">@angular/animations</a></td>\n</tr>\n<tr>\n  <th>Module</th>\n  <td><code>import { trigger } from <a href=\"api/animations\">@angular/animations</a>;</code></td>\n</tr>\n<tr>\n  <th>Source</th>\n  <td><a href=\"https://github.com/angular/angular/tree/4.3.0-rc.0/packages/animations/src/animation_metadata.ts#L235-L346\">animations/src/animation_metadata.ts</a></td>\n</tr>\n\n</tbody>\n</table>\n\n  \n  \n  \n  \n<code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">\nfunction trigger(name: string, definitions: AnimationMetadata[]): AnimationTriggerMetadata;\n</code-example>\n\n  \n\n  \n\n<section class=\"description\">\n  <h2 id=\"description\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/animations/trigger#description\"><i class=\"material-icons\">link</i></a>Description</h2>\n  <p><code>trigger</code> is an animation-specific function that is designed to be used inside of Angular's\nanimation DSL language. If this information is new, please navigate to the\n<a href=\"api/core/Component#animations\">component animations metadata page</a> to gain a better\nunderstanding of how animations in Angular are used.</p>\n<p><code>trigger</code> Creates an animation trigger which will a list of <a href=\"api/animations/state\">state</a> and\n<a href=\"api/animations/transition\">transition</a> entries that will be evaluated when the expression\nbound to the trigger changes.</p>\n<p>Triggers are registered within the component annotation data under the\n<a href=\"api/core/Component#animations\">animations section</a>. An animation trigger can be placed on an element\nwithin a template by referencing the name of the trigger followed by the expression value that\nthe\ntrigger is bound to (in the form of <code>[@triggerName]=\"expression\"</code>.</p>\n<h3 id=\"usage\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/animations/trigger#usage\"><i class=\"material-icons\">link</i></a>Usage</h3>\n<p><code>trigger</code> will create an animation trigger reference based on the provided <code>name</code> value. The\nprovided <code><a href=\"api/animations/animation\">animation</a></code> value is expected to be an array consisting of <a href=\"api/animations/state\">state</a> and\n<a href=\"api/animations/transition\">transition</a> declarations.</p>\n<code-example language=\"typescript\">\n@Component({\n  selector: 'my-component',\n  templateUrl: 'my-component-tpl.html',\n  animations: [\n    trigger(\"myAnimationTrigger\", [\n      state(...),\n      state(...),\n      transition(...),\n      transition(...)\n    ])\n  ]\n})\nclass MyComponent {\n  myStatusExp = \"something\";\n}\n</code-example>\n<p>The template associated with this component will make use of the <code>myAnimationTrigger</code> animation\ntrigger by binding to an element within its template code.</p>\n<code-example language=\"html\">\n&#x3C;!-- somewhere inside of my-component-tpl.html -->\n&#x3C;div [@myAnimationTrigger]=\"myStatusExp\">...&#x3C;/div>\n</code-example>\n<h2 id=\"disable-child-animations\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/animations/trigger#disable-child-animations\"><i class=\"material-icons\">link</i></a>Disable Child Animations</h2>\n<p>A special animation control binding called <code>@.disabled</code> can be placed on an element which will\nthen disable animations for any inner animation triggers situated within the element.</p>\n<p>When true, the <code>@.disabled</code> binding will prevent inner animations from rendering. The example\nbelow shows how to use this feature:</p>\n<code-example language=\"ts\">\n@Component({\n  selector: 'my-component',\n  template: `\n    &#x3C;div [@.disabled]=\"isDisabled\">\n      &#x3C;div [@childAnimation]=\"exp\">&#x3C;/div>\n    &#x3C;/div>\n  `,\n  animations: [\n    trigger(\"childAnimation\", [\n      // ...\n    ])\n  ]\n})\nclass MyComponent {\n  isDisabled = true;\n  exp = '...';\n}\n</code-example>\n<p>The <code>@childAnimation</code> trigger will not animate because <code>@.disabled</code> prevents it from happening\n(when true).</p>\n<p>Note that <code>@.disbled</code> will only disable inner animations (any animations running on the same\nelement will not be disabled).</p>\n<h3 id=\"disabling-animations-application-wide\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/animations/trigger#disabling-animations-application-wide\"><i class=\"material-icons\">link</i></a>Disabling Animations Application-wide</h3>\n<p>When an area of the template is set to have animations disabled, <strong>all</strong> inner components will\nalso have their animations disabled as well. This means that all animations for an angular\napplication can be disabled by placing a host binding set on <code>@.disabled</code> on the topmost Angular\ncomponent.</p>\n<code-example language=\"ts\">\nimport {Component, HostBinding} from '@angular/core';\n\n@Component({\n  selector: 'app-component',\n  templateUrl: 'app.component.html',\n})\nclass AppComponent {\n  @HostBinding('@.disabled')\n  public animationsDisabled = true;\n}\n</code-example>\n<h3 id=\"what-about-animations-that-us-query-and-animatechild\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/animations/trigger#what-about-animations-that-us-query-and-animatechild\"><i class=\"material-icons\">link</i></a>What about animations that us <code>query()</code> and <code>animateChild()</code>?</h3>\n<p>Despite inner animations being disabled, a parent animation can <a href=\"api/animations/query\">query</a> for inner\nelements located in disabled areas of the template and still animate them as it sees fit. This is\nalso the case for when a sub animation is queried by a parent and then later animated using <a href=\"api/animations/animateChild\">animateChild</a>.</p>\n\n</section>\n\n\n\n\n\n</section></article>"
}