{
  "id": "api/animations/transition",
  "title": "transition",
  "contents": "<article>\n  <header class=\"api-header\">\n    <h1 class=\"no-toc\" id=\"transition\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/animations/transition#transition\"><i class=\"material-icons\">link</i></a>transition</h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    <label class=\"api-status-label experimental\">experimental</label>\n    \n    <span class=\"version\"></span>\n  </header>\n\n  \n  <!-- INFO BAR -->\n<section class=\"info-bar\">\n\n<table class=\"is-full-width\">\n<tbody>\n<tr>\n  <th>npm Package</th>\n  <td><a href=\"https://www.npmjs.com/package/@angular/animations\">@angular/animations</a></td>\n</tr>\n<tr>\n  <th>Module</th>\n  <td><code>import { transition } from <a href=\"api/animations\">@angular/animations</a>;</code></td>\n</tr>\n<tr>\n  <th>Source</th>\n  <td><a href=\"https://github.com/angular/angular/tree/4.3.0-rc.0/packages/animations/src/animation_metadata.ts#L622-L734\">animations/src/animation_metadata.ts</a></td>\n</tr>\n\n</tbody>\n</table>\n\n  \n  \n  \n  \n<code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">\nfunction transition(stateChangeExpr: string, steps: AnimationMetadata | AnimationMetadata[], options: AnimationOptions | null): AnimationTransitionMetadata;\n</code-example>\n\n  \n\n  \n\n<section class=\"description\">\n  <h2 id=\"description\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/animations/transition#description\"><i class=\"material-icons\">link</i></a>Description</h2>\n  <p><code>transition</code> is an animation-specific function that is designed to be used inside of Angular's\nanimation DSL language. If this information is new, please navigate to the <a href=\"api/core/Component#animations\">component animations metadata page</a> to gain a better understanding of\nhow animations in Angular are used.</p>\n<p><code>transition</code> declares the <a href=\"api/animations/sequence\">sequence of animation steps</a> that will be run when the\nprovided <code>stateChangeExpr</code> value is satisfied. The <code>stateChangeExpr</code> consists of a <code>state1 => state2</code> which consists of two known states (use an asterix (<code>*</code>) to refer to a dynamic starting\nand/or ending state).</p>\n<p>A function can also be provided as the <code>stateChangeExpr</code> argument for a transition and this\nfunction will be executed each time a state change occurs. If the value returned within the\nfunction is true then the associated animation will be run.</p>\n<p>Animation transitions are placed within an <a href=\"api/animations/trigger\">animation trigger</a>. For an transition\nto animate to a state value and persist its styles then one or more <a href=\"api/animations/state\">animation\nstates</a> is expected to be defined.</p>\n<h3 id=\"usage\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/animations/transition#usage\"><i class=\"material-icons\">link</i></a>Usage</h3>\n<p>An animation transition is kicked off the <code>stateChangeExpr</code> predicate evaluates to true based on\nwhat the previous state is and what the current state has become. In other words, if a transition\nis defined that matches the old/current state criteria then the associated animation will be\ntriggered.</p>\n<code-example language=\"typescript\">\n// all transition/state changes are defined within an animation trigger\ntrigger(\"myAnimationTrigger\", [\n  // if a state is defined then its styles will be persisted when the\n  // animation has fully completed itself\n  state(\"on\", style({ background: \"green\" })),\n  state(\"off\", style({ background: \"grey\" })),\n\n  // a transition animation that will be kicked off when the state value\n  // bound to \"myAnimationTrigger\" changes from \"on\" to \"off\"\n  transition(\"on => off\", animate(500)),\n\n  // it is also possible to do run the same animation for both directions\n  transition(\"on &#x3C;=> off\", animate(500)),\n\n  // or to define multiple states pairs separated by commas\n  transition(\"on => off, off => void\", animate(500)),\n\n  // this is a catch-all state change for when an element is inserted into\n  // the page and the destination state is unknown\n  transition(\"void => *\", [\n    style({ opacity: 0 }),\n    animate(500)\n  ]),\n\n  // this will capture a state change between any states\n  transition(\"* => *\", animate(\"1s 0s\")),\n\n  // you can also go full out and include a function\n  transition((fromState, toState) => {\n    // when `true` then it will allow the animation below to be invoked\n    return fromState == \"off\" &#x26;&#x26; toState == \"on\";\n  }, animate(\"1s 0s\"))\n])\n</code-example>\n<p>The template associated with this component will make use of the <code>myAnimationTrigger</code> animation\ntrigger by binding to an element within its template code.</p>\n<code-example language=\"html\">\n&#x3C;!-- somewhere inside of my-component-tpl.html -->\n&#x3C;div [@myAnimationTrigger]=\"myStatusExp\">...&#x3C;/div>\n</code-example>\n<h4 id=\"the-final-animate-call\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/animations/transition#the-final-animate-call\"><i class=\"material-icons\">link</i></a>The final <code>animate</code> call</h4>\n<p>If the final step within the transition steps is a call to <code>animate()</code> that <strong>only</strong> uses a\ntiming value with <strong>no style data</strong> then it will be automatically used as the final animation arc\nfor the element to animate itself to the final state. This involves an automatic mix of\nadding/removing CSS styles so that the element will be in the exact state it should be for the\napplied state to be presented correctly.</p>\n<code-example>\n// start off by hiding the element, but make sure that it animates properly to whatever state\n// is currently active for \"myAnimationTrigger\"\ntransition(\"void => *\", [\n  style({ opacity: 0 }),\n  animate(500)\n])\n</code-example>\n<h3 id=\"transition-aliases-enter-and-leave\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/animations/transition#transition-aliases-enter-and-leave\"><i class=\"material-icons\">link</i></a>Transition Aliases (<code>:enter</code> and <code>:leave</code>)</h3>\n<p>Given that enter (insertion) and leave (removal) animations are so common, the <code>transition</code>\nfunction accepts both <code>:enter</code> and <code>:leave</code> values which are aliases for the <code>void => *</code> and <code>* => void</code> state changes.</p>\n<code-example>\ntransition(\":enter\", [\n  style({ opacity: 0 }),\n  animate(500, style({ opacity: 1 }))\n])\ntransition(\":leave\", [\n  animate(500, style({ opacity: 0 }))\n])\n</code-example>\n<code-example>\nimport {animate, state, style, transition, trigger} from '@angular/animations';\nimport {Component, NgModule} from '@angular/core';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\n\n@Component({\n  selector: 'example-app',\n  styles: [`\n    .toggle-container {\n      background-color:white;\n      border:10px solid black;\n      width:200px;\n      text-align:center;\n      line-height:100px;\n      font-size:50px;\n      box-sizing:border-box;\n      overflow:hidden;\n    }\n  `],\n  animations: [trigger(\n      'openClose',\n      [\n        state('collapsed, void', style({height: '0px', color: 'maroon', borderColor: 'maroon'})),\n        state('expanded', style({height: '*', borderColor: 'green', color: 'green'})),\n        transition(\n            'collapsed &#x3C;=> expanded', [animate(500, style({height: '250px'})), animate(500)])\n      ])],\n  template: `\n    &#x3C;button (click)=\"expand()\">Open&#x3C;/button>\n    &#x3C;button (click)=\"collapse()\">Closed&#x3C;/button>\n    &#x3C;hr />\n    &#x3C;div class=\"toggle-container\" [@openClose]=\"stateExpression\">\n      Look at this box\n    &#x3C;/div>\n  `\n})\nexport class MyExpandoCmp {\n  stateExpression: string;\n  constructor() { this.collapse(); }\n  expand() { this.stateExpression = 'expanded'; }\n  collapse() { this.stateExpression = 'collapsed'; }\n}\n\n@NgModule(\n    {imports: [BrowserAnimationsModule], declarations: [MyExpandoCmp], bootstrap: [MyExpandoCmp]})\nexport class AppModule {\n}\n\n\n</code-example>\n\n</section>\n\n\n\n\n\n</section></article>"
}