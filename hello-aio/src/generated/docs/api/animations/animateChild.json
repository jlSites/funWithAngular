{
  "id": "api/animations/animateChild",
  "title": "animateChild",
  "contents": "<article>\n  <header class=\"api-header\">\n    <h1 class=\"no-toc\" id=\"animatechild\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/animations/animateChild#animatechild\"><i class=\"material-icons\">link</i></a>animateChild</h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    <label class=\"api-status-label experimental\">experimental</label>\n    \n    <span class=\"version\"></span>\n  </header>\n\n  \n  <!-- INFO BAR -->\n<section class=\"info-bar\">\n\n<table class=\"is-full-width\">\n<tbody>\n<tr>\n  <th>npm Package</th>\n  <td><a href=\"https://www.npmjs.com/package/@angular/animations\">@angular/animations</a></td>\n</tr>\n<tr>\n  <th>Module</th>\n  <td><code>import { animateChild } from <a href=\"api/animations\">@angular/animations</a>;</code></td>\n</tr>\n<tr>\n  <th>Source</th>\n  <td><a href=\"https://github.com/angular/angular/tree/4.3.0-rc.0/packages/animations/src/animation_metadata.ts#L776-L877\">animations/src/animation_metadata.ts</a></td>\n</tr>\n\n</tbody>\n</table>\n\n  \n  \n  \n  \n<code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">\nfunction animateChild(options: AnimateChildOptions | null): AnimationAnimateChildMetadata;\n</code-example>\n\n  \n\n  \n\n<section class=\"description\">\n  <h2 id=\"description\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/animations/animateChild#description\"><i class=\"material-icons\">link</i></a>Description</h2>\n  <p><code><a href=\"api/animations/animateChild\">animateChild</a></code> is an animation-specific function that is designed to be used inside of Angular's\nanimation DSL language. It works by allowing a queried element to execute its own\nanimation within the animation sequence.</p>\n<p>Each time an animation is triggered in angular, the parent animation\nwill always get priority and any child animations will be blocked. In order\nfor a child animation to run, the parent animation must query each of the elements\ncontaining child animations and then allow the animations to run using <code><a href=\"api/animations/animateChild\">animateChild</a></code>.</p>\n<p>The example HTML code below shows both parent and child elements that have animation\ntriggers that will execute at the same time.</p>\n<code-example language=\"html\">\n&#x3C;!-- parent-child.component.html -->\n&#x3C;button (click)=\"exp =! exp\">Toggle&#x3C;/button>\n&#x3C;hr>\n\n&#x3C;div [@parentAnimation]=\"exp\">\n  &#x3C;header>Hello&#x3C;/header>\n  &#x3C;div [@childAnimation]=\"exp\">\n      one\n  &#x3C;/div>\n  &#x3C;div [@childAnimation]=\"exp\">\n      two\n  &#x3C;/div>\n  &#x3C;div [@childAnimation]=\"exp\">\n      three\n  &#x3C;/div>\n&#x3C;/div>\n</code-example>\n<p>Now when the <code>exp</code> value changes to true, only the <code>parentAnimation</code> animation will animate\nbecause it has priority. However, using <code><a href=\"api/animations/query\">query</a></code> and <code><a href=\"api/animations/animateChild\">animateChild</a></code> each of the inner animations\ncan also fire:</p>\n<code-example language=\"ts\">\n// parent-child.component.ts\nimport {trigger, transition, animate, style, query, animateChild} from '@angular/animations';\n@Component({\n  selector: 'parent-child-component',\n  animations: [\n    trigger('parentAnimation', [\n      transition('false => true', [\n        query('header', [\n          style({ opacity: 0 }),\n          animate(500, style({ opacity: 1 }))\n        ]),\n        query('@childAnimation', [\n          animateChild()\n        ])\n      ])\n    ]),\n    trigger('childAnimation', [\n      transition('false => true', [\n        style({ opacity: 0 }),\n        animate(500, style({ opacity: 1 }))\n      ])\n    ])\n  ]\n})\nclass ParentChildCmp {\n  exp: boolean = false;\n}\n</code-example>\n<p>In the animation code above, when the <code>parentAnimation</code> transition kicks off it first queries to\nfind the header element and fades it in. It then finds each of the sub elements that contain the\n<code>@childAnimation</code> trigger and then allows for their animations to fire.</p>\n<p>This example can be further extended by using stagger:</p>\n<code-example language=\"ts\">\nquery('@childAnimation', stagger(100, [\n  animateChild()\n]))\n</code-example>\n<p>Now each of the sub animations start off with respect to the <code>100ms</code> staggering step.</p>\n<h2 id=\"the-first-frame-of-child-animations\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/animations/animateChild#the-first-frame-of-child-animations\"><i class=\"material-icons\">link</i></a>The first frame of child animations</h2>\n<p>When sub animations are executed using <code><a href=\"api/animations/animateChild\">animateChild</a></code> the animation engine will always apply the\nfirst frame of every sub animation immediately at the start of the animation sequence. This way\nthe parent animation does not need to set any initial styling data on the sub elements before the\nsub animations kick off.</p>\n<p>In the example above the first frame of the <code>childAnimation</code>'s <code>false => true</code> transition\nconsists of a style of <code>opacity: 0</code>. This is applied immediately when the <code>parentAnimation</code>\nanimation transition sequence starts. Only then when the <code>@childAnimation</code> is queried and called\nwith <code><a href=\"api/animations/animateChild\">animateChild</a></code> will it then animate to its destination of <code>opacity: 1</code>.</p>\n<p>Note that this feature designed to be used alongside <a href=\"api/animations/query\">query()</a> and it will only work\nwith animations that are assigned using the Angular animation DSL (this means that CSS keyframes\nand transitions are not handled by this API).</p>\n\n</section>\n\n\n\n\n\n</section></article>"
}