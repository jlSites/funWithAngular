{
  "id": "api/upgrade/UpgradeAdapter",
  "title": "UpgradeAdapter",
  "contents": "<article>\n  <header class=\"api-header\">\n    <h1 class=\"no-toc\" id=\"upgradeadapter\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#upgradeadapter\"><i class=\"material-icons\">link</i></a>UpgradeAdapter</h1>\n    <label class=\"api-type-label class\">class</label>\n    \n    \n    \n    <span class=\"version\"></span>\n  </header>\n\n  \n  <!-- INFO BAR -->\n<section class=\"info-bar\">\n\n<table class=\"is-full-width\">\n<tbody>\n<tr>\n  <th>npm Package</th>\n  <td><a href=\"https://www.npmjs.com/package/@angular/upgrade\">@angular/upgrade</a></td>\n</tr>\n<tr>\n  <th>Module</th>\n  <td><code>import { UpgradeAdapter } from <a href=\"api/upgrade\">@angular/upgrade</a>;</code></td>\n</tr>\n<tr>\n  <th>Source</th>\n  <td><a href=\"https://github.com/angular/angular/tree/4.3.0-rc.0/packages/upgrade/src/dynamic/upgrade_adapter.ts#L21-L592\">upgrade/src/dynamic/upgrade_adapter.ts</a></td>\n</tr>\n\n</tbody>\n</table>\n\n  \n  \n  \n  <section class=\"class-overview\">\n<h2 id=\"overview\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#overview\"><i class=\"material-icons\">link</i></a>Overview</h2>\n<code-example language=\"ts\" hidecopy=\"true\">\nclass UpgradeAdapter {\n  <a class=\"code-anchor\" href=\"api/upgrade/UpgradeAdapter#downgradeNg2Component\">downgradeNg2Component(component: Type&#x3C;any>): Function</a>\n  <a class=\"code-anchor\" href=\"api/upgrade/UpgradeAdapter#upgradeNg1Component\">upgradeNg1Component(name: string): Type&#x3C;any></a>\n  <a class=\"code-anchor\" href=\"api/upgrade/UpgradeAdapter#registerForNg1Tests\">registerForNg1Tests(modules?: string[]): UpgradeAdapterRef</a>\n  <a class=\"code-anchor\" href=\"api/upgrade/UpgradeAdapter#bootstrap\">bootstrap(element: Element, modules?: any[], config?: IAngularBootstrapConfig): UpgradeAdapterRef</a>\n  <a class=\"code-anchor\" href=\"api/upgrade/UpgradeAdapter#upgradeNg1Provider\">upgradeNg1Provider(name: string, options?: {asToken: any})</a>\n  <a class=\"code-anchor\" href=\"api/upgrade/UpgradeAdapter#downgradeNg2Provider\">downgradeNg2Provider(token: any): Function</a>\n}\n</code-example>\n</section>\n\n  \n\n  \n\n\n<section class=\"description\">\n  <h2 id=\"description\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#description\"><i class=\"material-icons\">link</i></a>Description</h2>\n  <p>Use <code><a href=\"api/upgrade/UpgradeAdapter\">UpgradeAdapter</a></code> to allow AngularJS and Angular to coexist in a single application.</p>\n<p>The <code><a href=\"api/upgrade/UpgradeAdapter\">UpgradeAdapter</a></code> allows:\n1. creation of Angular component from AngularJS component directive\n(See [UpgradeAdapter#upgradeNg1Component()])\n2. creation of AngularJS directive from Angular component.\n(See [UpgradeAdapter#downgradeNg2Component()])\n3. Bootstrapping of a hybrid Angular application which contains both of the frameworks\ncoexisting in a single application.</p>\n<h2 id=\"mental-model\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#mental-model\"><i class=\"material-icons\">link</i></a>Mental Model</h2>\n<p>When reasoning about how a hybrid application works it is useful to have a mental model which\ndescribes what is happening and explains what is happening at the lowest level.</p>\n<ol>\n<li>There are two independent frameworks running in a single application, each framework treats\nthe other as a black box.</li>\n<li>Each DOM element on the page is owned exactly by one framework. Whichever framework\ninstantiated the element is the owner. Each framework only updates/interacts with its own\nDOM elements and ignores others.</li>\n<li>AngularJS directives always execute inside AngularJS framework codebase regardless of\nwhere they are instantiated.</li>\n<li>Angular components always execute inside Angular framework codebase regardless of\nwhere they are instantiated.</li>\n<li>An AngularJS component can be upgraded to an Angular component. This creates an\nAngular directive, which bootstraps the AngularJS component directive in that location.</li>\n<li>An Angular component can be downgraded to an AngularJS component directive. This creates\nan AngularJS directive, which bootstraps the Angular component in that location.</li>\n<li>Whenever an adapter component is instantiated the host element is owned by the framework\ndoing the instantiation. The other framework then instantiates and owns the view for that\ncomponent. This implies that component bindings will always follow the semantics of the\ninstantiation framework. The syntax is always that of Angular syntax.</li>\n<li>AngularJS is always bootstrapped first and owns the bottom most view.</li>\n<li>The new application is running in Angular zone, and therefore it no longer needs calls to\n<code>$apply()</code>.</li>\n</ol>\n<h3 id=\"example\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#example\"><i class=\"material-icons\">link</i></a>Example</h3>\n<code-example>\nconst adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module), myCompilerOptions);\nconst module = angular.module('myExample', []);\nmodule.directive('ng2Comp', adapter.downgradeNg2Component(Ng2Component));\n\nmodule.directive('ng1Hello', function() {\n  return {\n     scope: { title: '=' },\n     template: 'ng1[Hello {{title}}!](&#x3C;span ng-transclude>&#x3C;/span>)'\n  };\n});\n\n\n@Component({\n  selector: 'ng2-comp',\n  inputs: ['name'],\n  template: 'ng2[&#x3C;ng1-hello [title]=\"name\">transclude&#x3C;/ng1-hello>](&#x3C;ng-content>&#x3C;/ng-content>)',\n  directives:\n})\nclass Ng2Component {\n}\n\n@NgModule({\n  declarations: [Ng2Component, adapter.upgradeNg1Component('ng1Hello')],\n  imports: [BrowserModule]\n})\nclass MyNg2Module {}\n\n\ndocument.body.innerHTML = '&#x3C;ng2-comp name=\"World\">project&#x3C;/ng2-comp>';\n\nadapter.bootstrap(document.body, ['myExample']).ready(function() {\n  expect(document.body.textContent).toEqual(\n      \"ng2[ng1[Hello World!](transclude)](project)\");\n});\n</code-example>\n\n</section>\n\n\n\n\n\n<section class=\"constructor\">\n  <a id=\"constructor\"></a>\n  <h2 id=\"constructor\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#constructor\"><i class=\"material-icons\">link</i></a>Constructor</h2>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">constructor(ng2AppModule: Type&#x3C;any>, compilerOptions?: CompilerOptions)</code-example>\n  \n</section>\n\n\n\n\n<section class=\"instance-members\">\n  <h2 id=\"members\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#members\"><i class=\"material-icons\">link</i></a>Members</h2>\n  \n    <div class=\"instance-member\">\n  <a id=\"downgradeNg2Component\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">downgradeNg2Component(component: Type&#x3C;any>): Function</code-example>\n  <p>Allows Angular Component to be used from AngularJS.</p>\n<p>Use <code>downgradeNg2Component</code> to create an AngularJS Directive Definition Factory from\nAngular Component. The adapter will bootstrap Angular component from within the\nAngularJS template.</p>\n<h2 id=\"mental-model-1\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#mental-model-1\"><i class=\"material-icons\">link</i></a>Mental Model</h2>\n<ol>\n<li>The component is instantiated by being listed in AngularJS template. This means that the\nhost element is controlled by AngularJS, but the component's view will be controlled by\nAngular.</li>\n<li>Even thought the component is instantiated in AngularJS, it will be using Angular\nsyntax. This has to be done, this way because we must follow Angular components do not\ndeclare how the attributes should be interpreted.</li>\n<li><code>ng-model</code> is controlled by AngularJS and communicates with the downgraded Angular component\nby way of the <code><a href=\"api/forms/ControlValueAccessor\">ControlValueAccessor</a></code> interface from @angular/forms. Only components that\nimplement this interface are eligible.</li>\n</ol>\n<h2 id=\"supported-features\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#supported-features\"><i class=\"material-icons\">link</i></a>Supported Features</h2>\n<ul>\n<li>\n<p>Bindings:</p>\n<ul>\n<li>Attribute: <code>&#x3C;comp name=\"World\"></code></li>\n<li>Interpolation:  <code>&#x3C;comp greeting=\"Hello {{name}}!\"></code></li>\n<li>Expression:  <code>&#x3C;comp [name]=\"username\"></code></li>\n<li>Event:  <code>&#x3C;comp (close)=\"doSomething()\"></code></li>\n<li>ng-model: <code>&#x3C;comp ng-model=\"name\"></code></li>\n</ul>\n</li>\n<li>Content projection: yes</li>\n</ul>\n<h3 id=\"example-1\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#example-1\"><i class=\"material-icons\">link</i></a>Example</h3>\n<code-example>\nconst adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module));\nconst module = angular.module('myExample', []);\nmodule.directive('greet', adapter.downgradeNg2Component(Greeter));\n\n@Component({\n  selector: 'greet',\n  template: '{{salutation}} {{name}}! - &#x3C;ng-content>&#x3C;/ng-content>'\n})\nclass Greeter {\n  @Input() salutation: string;\n  @Input() name: string;\n}\n\n@NgModule({\n  declarations: [Greeter],\n  imports: [BrowserModule]\n})\nclass MyNg2Module {}\n\ndocument.body.innerHTML =\n  'ng1 template: &#x3C;greet salutation=\"Hello\" [name]=\"world\">text&#x3C;/greet>';\n\nadapter.bootstrap(document.body, ['myExample']).ready(function() {\n  expect(document.body.textContent).toEqual(\"ng1 template: Hello world! - text\");\n});\n</code-example>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"upgradeNg1Component\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">upgradeNg1Component(name: string): Type&#x3C;any></code-example>\n  <p>Allows AngularJS Component to be used from Angular.</p>\n<p>Use <code>upgradeNg1Component</code> to create an Angular component from AngularJS Component\ndirective. The adapter will bootstrap AngularJS component from within the Angular\ntemplate.</p>\n<h2 id=\"mental-model-2\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#mental-model-2\"><i class=\"material-icons\">link</i></a>Mental Model</h2>\n<ol>\n<li>The component is instantiated by being listed in Angular template. This means that the\nhost element is controlled by Angular, but the component's view will be controlled by\nAngularJS.</li>\n</ol>\n<h2 id=\"supported-features-1\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#supported-features-1\"><i class=\"material-icons\">link</i></a>Supported Features</h2>\n<ul>\n<li>\n<p>Bindings:</p>\n<ul>\n<li>Attribute: <code>&#x3C;comp name=\"World\"></code></li>\n<li>Interpolation:  <code>&#x3C;comp greeting=\"Hello {{name}}!\"></code></li>\n<li>Expression:  <code>&#x3C;comp [name]=\"username\"></code></li>\n<li>Event:  <code>&#x3C;comp (close)=\"doSomething()\"></code></li>\n</ul>\n</li>\n<li>Transclusion: yes</li>\n<li>\n<p>Only some of the features of\n<a href=\"https://docs.angularjs.org/api/ng/service/$compile\">Directive Definition Object</a> are\nsupported:</p>\n<ul>\n<li><code>compile</code>: not supported because the host element is owned by Angular, which does\nnot allow modifying DOM structure during compilation.</li>\n<li><code>controller</code>: supported. (NOTE: injection of <code>$attrs</code> and <code>$transclude</code> is not supported.)</li>\n<li><code>controllerAs</code>: supported.</li>\n<li><code>bindToController</code>: supported.</li>\n<li><code>link</code>: supported. (NOTE: only pre-link function is supported.)</li>\n<li><code>name</code>: supported.</li>\n<li><code>priority</code>: ignored.</li>\n<li><code>replace</code>: not supported.</li>\n<li><code>require</code>: supported.</li>\n<li><code>restrict</code>: must be set to 'E'.</li>\n<li><code>scope</code>: supported.</li>\n<li><code>template</code>: supported.</li>\n<li><code>templateUrl</code>: supported.</li>\n<li><code>terminal</code>: ignored.</li>\n<li><code>transclude</code>: supported.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"example-2\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#example-2\"><i class=\"material-icons\">link</i></a>Example</h3>\n<code-example>\nconst adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module));\nconst module = angular.module('myExample', []);\n\nmodule.directive('greet', function() {\n  return {\n    scope: {salutation: '=', name: '=' },\n    template: '{{salutation}} {{name}}! - &#x3C;span ng-transclude>&#x3C;/span>'\n  };\n});\n\nmodule.directive('ng2', adapter.downgradeNg2Component(Ng2Component));\n\n@Component({\n  selector: 'ng2',\n  template: 'ng2 template: &#x3C;greet salutation=\"Hello\" [name]=\"world\">text&#x3C;/greet>'\n})\nclass Ng2Component {\n}\n\n@NgModule({\n  declarations: [Ng2Component, adapter.upgradeNg1Component('greet')],\n  imports: [BrowserModule]\n})\nclass MyNg2Module {}\n\ndocument.body.innerHTML = '&#x3C;ng2>&#x3C;/ng2>';\n\nadapter.bootstrap(document.body, ['myExample']).ready(function() {\n  expect(document.body.textContent).toEqual(\"ng2 template: Hello world! - text\");\n});\n</code-example>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"registerForNg1Tests\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">registerForNg1Tests(modules?: string[]): UpgradeAdapterRef</code-example>\n  <p>Registers the adapter's AngularJS upgrade module for unit testing in AngularJS.\nUse this instead of <code>angular.mock.module()</code> to load the upgrade module into\nthe AngularJS testing injector.</p>\n<h3 id=\"example-3\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#example-3\"><i class=\"material-icons\">link</i></a>Example</h3>\n<code-example>\nconst upgradeAdapter = new UpgradeAdapter(MyNg2Module);\n\n// configure the adapter with upgrade/downgrade components and services\nupgradeAdapter.downgradeNg2Component(MyComponent);\n\nlet upgradeAdapterRef: UpgradeAdapterRef;\nlet $compile, $rootScope;\n\n// We must register the adapter before any calls to `inject()`\nbeforeEach(() => {\n  upgradeAdapterRef = upgradeAdapter.registerForNg1Tests(['heroApp']);\n});\n\nbeforeEach(inject((_$compile_, _$rootScope_) => {\n  $compile = _$compile_;\n  $rootScope = _$rootScope_;\n}));\n\nit(\"says hello\", (done) => {\n  upgradeAdapterRef.ready(() => {\n    const element = $compile(\"&#x3C;my-component>&#x3C;/my-component>\")($rootScope);\n    $rootScope.$apply();\n    expect(element.html()).toContain(\"Hello World\");\n    done();\n  })\n});\n</code-example>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"bootstrap\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">bootstrap(element: Element, modules?: any[], config?: IAngularBootstrapConfig): UpgradeAdapterRef</code-example>\n  <p>Bootstrap a hybrid AngularJS / Angular application.</p>\n<p>This <code>bootstrap</code> method is a direct replacement (takes same arguments) for AngularJS\n<a href=\"https://docs.angularjs.org/api/ng/function/angular.bootstrap\"><code>bootstrap</code></a> method. Unlike\nAngularJS, this bootstrap is asynchronous.</p>\n<h3 id=\"example-4\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#example-4\"><i class=\"material-icons\">link</i></a>Example</h3>\n<code-example>\nconst adapter = new UpgradeAdapter(MyNg2Module);\nconst module = angular.module('myExample', []);\nmodule.directive('ng2', adapter.downgradeNg2Component(Ng2));\n\nmodule.directive('ng1', function() {\n  return {\n     scope: { title: '=' },\n     template: 'ng1[Hello {{title}}!](&#x3C;span ng-transclude>&#x3C;/span>)'\n  };\n});\n\n\n@Component({\n  selector: 'ng2',\n  inputs: ['name'],\n  template: 'ng2[&#x3C;ng1 [title]=\"name\">transclude&#x3C;/ng1>](&#x3C;ng-content>&#x3C;/ng-content>)'\n})\nclass Ng2 {\n}\n\n@NgModule({\n  declarations: [Ng2, adapter.upgradeNg1Component('ng1')],\n  imports: [BrowserModule]\n})\nclass MyNg2Module {}\n\ndocument.body.innerHTML = '&#x3C;ng2 name=\"World\">project&#x3C;/ng2>';\n\nadapter.bootstrap(document.body, ['myExample']).ready(function() {\n  expect(document.body.textContent).toEqual(\n      \"ng2[ng1[Hello World!](transclude)](project)\");\n});\n</code-example>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"upgradeNg1Provider\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">upgradeNg1Provider(name: string, options?: {asToken: any})</code-example>\n  <p>Allows AngularJS service to be accessible from Angular.</p>\n<h3 id=\"example-5\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#example-5\"><i class=\"material-icons\">link</i></a>Example</h3>\n<code-example>\nclass Login { ... }\nclass Server { ... }\n\n@Injectable()\nclass Example {\n  constructor(@Inject('server') server, login: Login) {\n    ...\n  }\n}\n\nconst module = angular.module('myExample', []);\nmodule.service('server', Server);\nmodule.service('login', Login);\n\nconst adapter = new UpgradeAdapter(MyNg2Module);\nadapter.upgradeNg1Provider('server');\nadapter.upgradeNg1Provider('login', {asToken: Login});\n\nadapter.bootstrap(document.body, ['myExample']).ready((ref) => {\n  const example: Example = ref.ng2Injector.get(Example);\n});\n</code-example>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"downgradeNg2Provider\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">downgradeNg2Provider(token: any): Function</code-example>\n  <p>Allows Angular service to be accessible from AngularJS.</p>\n<h3 id=\"example-6\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/upgrade/UpgradeAdapter#example-6\"><i class=\"material-icons\">link</i></a>Example</h3>\n<code-example>\nclass Example {\n}\n\nconst adapter = new UpgradeAdapter(MyNg2Module);\n\nconst module = angular.module('myExample', []);\nmodule.factory('example', adapter.downgradeNg2Provider(Example));\n\nadapter.bootstrap(document.body, ['myExample']).ready((ref) => {\n  const example: Example = ref.ng1Injector.get('example');\n});\n</code-example>\n\n  </div>\n\n    \n    \n  \n</section>\n\n\n\n\n\n\n\n\n</section></article>"
}