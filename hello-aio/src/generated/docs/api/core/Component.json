{
  "id": "api/core/Component",
  "title": "Component",
  "contents": "<article>\n  <header class=\"api-header\">\n    <h1 class=\"no-toc\" id=\"component\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/Component#component\"><i class=\"material-icons\">link</i></a>Component</h1>\n    <label class=\"api-type-label decorator\">decorator</label>\n    \n    \n    <label class=\"api-status-label stable\">stable</label>\n    <span class=\"version\"></span>\n  </header>\n\n  \n  <!-- INFO BAR -->\n<section class=\"info-bar\">\n\n<table class=\"is-full-width\">\n<tbody>\n<tr>\n  <th>npm Package</th>\n  <td><a href=\"https://www.npmjs.com/package/@angular/core\">@angular/core</a></td>\n</tr>\n<tr>\n  <th>Module</th>\n  <td><code>import { Component } from <a href=\"api/core\">@angular/core</a>;</code></td>\n</tr>\n<tr>\n  <th>Source</th>\n  <td><a href=\"https://github.com/angular/angular/tree/4.3.0-rc.0/packages/core/src/metadata/directives.ts#L687-L688\">core/src/metadata/directives.ts</a></td>\n</tr>\n\n</tbody>\n</table>\n\n  \n<div class=\"what-it-does info-banner\">\n  <p>Marks a class as an Angular component and collects component configuration\nmetadata.</p>\n\n</div>\n\n  \n  \n  <section class=\"decorator-overview\">\n  <h2 id=\"metadata-overview\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/Component#metadata-overview\"><i class=\"material-icons\">link</i></a>Metadata Overview</h2>\n<code-example language=\"ts\" hidecopy=\"true\">\n@Component({ \n  <a class=\"code-anchor\" href=\"api/core/Component#changeDetection\">changeDetection?: ChangeDetectionStrategy</a>\n  <a class=\"code-anchor\" href=\"api/core/Component#viewProviders\">viewProviders?: Provider[]</a>\n  <a class=\"code-anchor\" href=\"api/core/Component#moduleId\">moduleId?: string</a>\n  <a class=\"code-anchor\" href=\"api/core/Component#templateUrl\">templateUrl?: string</a>\n  <a class=\"code-anchor\" href=\"api/core/Component#template\">template?: string</a>\n  <a class=\"code-anchor\" href=\"api/core/Component#styleUrls\">styleUrls?: string[]</a>\n  <a class=\"code-anchor\" href=\"api/core/Component#styles\">styles?: string[]</a>\n  <a class=\"code-anchor\" href=\"api/core/Component#animations\">animations?: any[]</a>\n  <a class=\"code-anchor\" href=\"api/core/Component#encapsulation\">encapsulation?: ViewEncapsulation</a>\n  <a class=\"code-anchor\" href=\"api/core/Component#interpolation\">interpolation?: [string, string]</a>\n  <a class=\"code-anchor\" href=\"api/core/Component#entryComponents\">entryComponents?: Array&#x3C;Type&#x3C;any>|any[]></a>\n})\n</code-example>\n</section>\n  \n<section class=\"how-to-use\">\n  <h2 id=\"how-to-use\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/Component#how-to-use\"><i class=\"material-icons\">link</i></a>How To Use</h2>\n  <code-example>\n@Component({selector: 'greet', template: 'Hello {{name}}!'})\nclass Greet {\n  name: string = 'World';\n}\n\n</code-example>\n\n</section>\n\n\n  \n  \n<section class=\"description\">\n  <h2 id=\"description\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/Component#description\"><i class=\"material-icons\">link</i></a>Description</h2>\n  <p>Component decorator allows you to mark a class as an Angular component and provide additional\nmetadata that determines how the component should be processed, instantiated and used at\nruntime.</p>\n<p>Components are the most basic building block of an UI in an Angular application.\nAn Angular application is a tree of Angular components.\nAngular components are a subset of directives. Unlike directives, components always have\na template and only one component can be instantiated per an element in a template.</p>\n<p>A component must belong to an NgModule in order for it to be usable\nby another component or application. To specify that a component is a member of an NgModule,\nyou should list it in the <code>declarations</code> field of that NgModule.</p>\n<p>In addition to the metadata configuration specified via the Component decorator,\ncomponents can control their runtime behavior by implementing various Life-Cycle hooks.</p>\n<p><strong>Metadata Properties:</strong></p>\n<ul>\n<li><strong>animations</strong> - list of animations of this component</li>\n<li><strong>changeDetection</strong> - change detection strategy used by this component</li>\n<li><strong>encapsulation</strong> - style encapsulation strategy used by this component</li>\n<li><strong>entryComponents</strong> - list of components that are dynamically inserted into the view of this\ncomponent</li>\n<li><strong>exportAs</strong> - name under which the component instance is exported in a template</li>\n<li><strong>host</strong> - map of class property to host element bindings for events, properties and\nattributes</li>\n<li><strong>inputs</strong> - list of class property names to data-bind as component inputs</li>\n<li><strong>interpolation</strong> - custom interpolation markers used in this component's template</li>\n<li><strong>moduleId</strong> - ES/CommonJS module id of the file in which this component is defined</li>\n<li><strong>outputs</strong> - list of class property names that expose output events that others can\nsubscribe to</li>\n<li><strong>providers</strong> - list of providers available to this component and its children</li>\n<li><strong>queries</strong> -  configure queries that can be injected into the component</li>\n<li><strong>selector</strong> - css selector that identifies this component in a template</li>\n<li><strong>styleUrls</strong> - list of urls to stylesheets to be applied to this component's view</li>\n<li><strong>styles</strong> - inline-defined styles to be applied to this component's view</li>\n<li><strong>template</strong> - inline-defined template for the view</li>\n<li><strong>templateUrl</strong> - url to an external file containing a template for the view</li>\n<li><strong>viewProviders</strong> - list of providers available to this component and its view children</li>\n</ul>\n<h3 id=\"example\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/Component#example\"><i class=\"material-icons\">link</i></a>Example</h3>\n<code-example>\n@Component({selector: 'greet', template: 'Hello {{name}}!'})\nclass Greet {\n  name: string = 'World';\n}\n\n</code-example>\n\n</section>\n\n  \n\n<section class=\"metadata-members\">\n  <h2 id=\"metadata-properties\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/Component#metadata-properties\"><i class=\"material-icons\">link</i></a>Metadata Properties</h2>\n  \n    <div class=\"metadata-member\">\n  <a id=\"changeDetection\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">changeDetection?: ChangeDetectionStrategy</code-example>\n  <p>Defines the used change detection strategy.</p>\n<p>When a component is instantiated, Angular creates a change detector, which is responsible for\npropagating the component's bindings.</p>\n<p>The <code>changeDetection</code> property defines, whether the change detection will be checked every time\nor only when the component tells it to do so.</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"metadata-member\">\n  <a id=\"viewProviders\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">viewProviders?: Provider[]</code-example>\n  <p>Defines the set of injectable objects that are visible to its view DOM children.</p>\n<h2 id=\"simple-example\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/Component#simple-example\"><i class=\"material-icons\">link</i></a>Simple Example</h2>\n<p>Here is an example of a class that can be injected:</p>\n<code-example>\nclass Greeter {\n   greet(name:string) {\n     return 'Hello ' + name + '!';\n   }\n}\n\n@Directive({\n  selector: 'needs-greeter'\n})\nclass NeedsGreeter {\n  greeter:Greeter;\n\n  constructor(greeter:Greeter) {\n    this.greeter = greeter;\n  }\n}\n\n@Component({\n  selector: 'greet',\n  viewProviders: [\n    Greeter\n  ],\n  template: `&#x3C;needs-greeter>&#x3C;/needs-greeter>`\n})\nclass HelloWorld {\n}\n</code-example>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"metadata-member\">\n  <a id=\"moduleId\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">moduleId?: string</code-example>\n  <p>The module id of the module that contains the component.\nNeeded to be able to resolve relative urls for templates and styles.\nIn CommonJS, this can always be set to <code>module.id</code>, similarly SystemJS exposes <code>__moduleName</code>\nvariable within each module.</p>\n<h2 id=\"simple-example-1\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/Component#simple-example-1\"><i class=\"material-icons\">link</i></a>Simple Example</h2>\n<code-example>\n@Directive({\n  selector: 'someDir',\n  moduleId: module.id\n})\nclass SomeDir {\n}\n</code-example>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"metadata-member\">\n  <a id=\"templateUrl\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">templateUrl?: string</code-example>\n  <p>Specifies a template URL for an Angular component.</p>\n<p>Only one of <code>templateUrl</code> or <code>template</code> can be defined per View.</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"metadata-member\">\n  <a id=\"template\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">template?: string</code-example>\n  <p>Specifies an inline template for an Angular component.</p>\n<p>Only one of <code>templateUrl</code> or <code>template</code> can be defined per Component.</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"metadata-member\">\n  <a id=\"styleUrls\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">styleUrls?: string[]</code-example>\n  <p>Specifies stylesheet URLs for an Angular component.</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"metadata-member\">\n  <a id=\"styles\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">styles?: string[]</code-example>\n  <p>Specifies inline stylesheets for an Angular component.</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"metadata-member\">\n  <a id=\"animations\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">animations?: any[]</code-example>\n  <p>Animations are defined on components via an animation-like DSL. This DSL approach to describing\nanimations allows for a flexibility that both benefits developers and the framework.</p>\n<p>Animations work by listening on state changes that occur on an element within\nthe template. When a state change occurs, Angular can then take advantage and animate the\narc in between. This works similar to how CSS transitions work, however, by having a\nprogrammatic DSL, animations are not limited to environments that are DOM-specific.\n(Angular can also perform optimizations behind the scenes to make animations more performant.)</p>\n<p>For animations to be available for use, animation state changes are placed within\n<a href=\"api/core/trigger\">animation triggers</a> which are housed inside of the <code>animations</code> annotation\nmetadata. Within a trigger both <a href=\"api/core/state\">state</a> and <a href=\"api/core/transition\">transition</a> entries\ncan be placed.</p>\n<code-example language=\"typescript\">\n@Component({\n  selector: 'animation-cmp',\n  templateUrl: 'animation-cmp.html',\n  animations: [\n    // this here is our animation trigger that\n    // will contain our state change animations.\n    trigger('myTriggerName', [\n      // the styles defined for the `on` and `off`\n      // states declared below are persisted on the\n      // element once the animation completes.\n      state('on', style({ opacity: 1 }),\n      state('off', style({ opacity: 0 }),\n\n      // this here is our animation that kicks off when\n      // this state change jump is true\n      transition('on => off', [\n        animate(\"1s\")\n      ])\n    ])\n  ]\n})\n</code-example>\n<p>As depicted in the code above, a group of related animation states are all contained within\nan animation <code>trigger</code> (the code example above called the trigger <code>myTriggerName</code>).\nWhen a trigger is created then it can be bound onto an element within the component's\ntemplate via a property prefixed by an <code>@</code> symbol followed by trigger name and an expression\nthat\nis used to determine the state value for that trigger.</p>\n<code-example language=\"html\">\n&#x3C;!-- animation-cmp.html -->\n&#x3C;div @myTriggerName=\"expression\">...&#x3C;/div>\n</code-example>\n<p>For state changes to be executed, the <code>expression</code> value must change value from its existing\nvalue\nto something that we have set an animation to animate on (in the example above we are listening\nto a change of state between <code>on</code> and <code>off</code>). The <code>expression</code> value attached to the trigger\nmust be something that can be evaluated with the template/component context.</p>\n<h3 id=\"dsl-animation-functions\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/Component#dsl-animation-functions\"><i class=\"material-icons\">link</i></a>DSL Animation Functions</h3>\n<p>Please visit each of the animation DSL functions listed below to gain a better understanding\nof how and why they are used for crafting animations in Angular:</p>\n<ul>\n<li>\n<a href=\"api/core/trigger\">trigger()</a>\n</li>\n<li>\n<a href=\"api/core/state\">state()</a>\n</li>\n<li>\n<a href=\"api/core/transition\">transition()</a>\n</li>\n<li>\n<a href=\"api/core/group\">group()</a>\n</li>\n<li>\n<a href=\"api/core/sequence\">sequence()</a>\n</li>\n<li>\n<a href=\"api/core/style\">style()</a>\n</li>\n<li>\n<a href=\"api/core/animate\">animate()</a>\n</li>\n<li>\n<a href=\"api/core/keyframes\">keyframes()</a>\n</li>\n</ul>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"metadata-member\">\n  <a id=\"encapsulation\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">encapsulation?: ViewEncapsulation</code-example>\n  <p>Specifies how the template and the styles should be encapsulated:</p>\n<ul>\n<li>\n<a href=\"api/core/ViewEncapsulation#Native\">`ViewEncapsulation.Native`</a>\n<p> to use shadow roots - only works\nif natively available on the platform,</p>\n</li>\n<li>\n<a href=\"api/core/ViewEncapsulation#Emulated\">`ViewEncapsulation.Emulated`</a>\n<p> to use shimmed CSS that\nemulates the native behavior,</p>\n</li>\n<li>\n<a href=\"api/core/ViewEncapsulation#None\">`ViewEncapsulation.None`</a>\n<p> to use global CSS without any\nencapsulation.</p>\n</li>\n</ul>\n<p>When no <code>encapsulation</code> is defined for the component, the default value from the\n<a href=\"api/core/CompilerOptions\"><code><a href=\"api/core/CompilerOptions\">CompilerOptions</a></code></a> is used. The default is <code>ViewEncapsulation.Emulated</code>}. Provide a new\n<code><a href=\"api/core/CompilerOptions\">CompilerOptions</a></code> to override this value.</p>\n<p>If the encapsulation is set to <code>ViewEncapsulation.Emulated</code> and the component has no <code>styles</code>\nnor <code>styleUrls</code> the encapsulation will automatically be switched to <code>ViewEncapsulation.None</code>.</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"metadata-member\">\n  <a id=\"interpolation\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">interpolation?: [string, string]</code-example>\n  <p>Overrides the default encapsulation start and end delimiters (respectively <code>{{</code> and <code>}}</code>)</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"metadata-member\">\n  <a id=\"entryComponents\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">entryComponents?: Array&#x3C;Type&#x3C;any>|any[]></code-example>\n  <p>Defines the components that should be compiled as well when\nthis component is defined. For each components listed here,\nAngular will create a <a href=\"api/core/ComponentFactory\"><code><a href=\"api/core/ComponentFactory\">ComponentFactory</a></code></a> and store it in the\n<a href=\"api/core/ComponentFactoryResolver\"><code><a href=\"api/core/ComponentFactoryResolver\">ComponentFactoryResolver</a></code></a>.</p>\n\n  </div>\n\n    \n    \n  \n</section>\n\n\n\n\n\n</section></article>"
}