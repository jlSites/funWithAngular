{
  "id": "api/core/Directive",
  "title": "Directive",
  "contents": "<article>\n  <header class=\"api-header\">\n    <h1 class=\"no-toc\" id=\"directive\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/Directive#directive\"><i class=\"material-icons\">link</i></a>Directive</h1>\n    <label class=\"api-type-label decorator\">decorator</label>\n    \n    \n    <label class=\"api-status-label stable\">stable</label>\n    <span class=\"version\"></span>\n  </header>\n\n  \n  <!-- INFO BAR -->\n<section class=\"info-bar\">\n\n<table class=\"is-full-width\">\n<tbody>\n<tr>\n  <th>npm Package</th>\n  <td><a href=\"https://www.npmjs.com/package/@angular/core\">@angular/core</a></td>\n</tr>\n<tr>\n  <th>Module</th>\n  <td><code>import { Directive } from <a href=\"api/core\">@angular/core</a>;</code></td>\n</tr>\n<tr>\n  <th>Source</th>\n  <td><a href=\"https://github.com/angular/angular/tree/4.3.0-rc.0/packages/core/src/metadata/directives.ts#L403-L403\">core/src/metadata/directives.ts</a></td>\n</tr>\n\n</tbody>\n</table>\n\n  \n<div class=\"what-it-does info-banner\">\n  <p>Marks a class as an Angular directive and collects directive configuration\nmetadata.</p>\n\n</div>\n\n  \n  \n  <section class=\"decorator-overview\">\n  <h2 id=\"metadata-overview\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/Directive#metadata-overview\"><i class=\"material-icons\">link</i></a>Metadata Overview</h2>\n<code-example language=\"ts\" hidecopy=\"true\">\n@Directive({ \n  <a class=\"code-anchor\" href=\"api/core/Directive#selector\">selector?: string</a>\n  <a class=\"code-anchor\" href=\"api/core/Directive#inputs\">inputs?: string[]</a>\n  <a class=\"code-anchor\" href=\"api/core/Directive#outputs\">outputs?: string[]</a>\n  <a class=\"code-anchor\" href=\"api/core/Directive#host\">host?: {[key: string]: string}</a>\n  <a class=\"code-anchor\" href=\"api/core/Directive#providers\">providers?: Provider[]</a>\n  <a class=\"code-anchor\" href=\"api/core/Directive#exportAs\">exportAs?: string</a>\n  <a class=\"code-anchor\" href=\"api/core/Directive#queries\">queries?: {[key: string]: any}</a>\n})\n</code-example>\n</section>\n  \n<section class=\"how-to-use\">\n  <h2 id=\"how-to-use\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/Directive#how-to-use\"><i class=\"material-icons\">link</i></a>How To Use</h2>\n  <code-example>\nimport {Directive} from '@angular/core';\n\n@Directive({\n  selector: 'my-directive',\n})\nexport class MyDirective {\n}\n</code-example>\n\n</section>\n\n\n  \n  \n<section class=\"description\">\n  <h2 id=\"description\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/Directive#description\"><i class=\"material-icons\">link</i></a>Description</h2>\n  <p>Directive decorator allows you to mark a class as an Angular directive and provide additional\nmetadata that determines how the directive should be processed, instantiated and used at\nruntime.</p>\n<p>Directives allow you to attach behavior to elements in the DOM..</p>\n<p>A directive must belong to an NgModule in order for it to be usable\nby another directive, component, or application. To specify that a directive is a member of an\nNgModule,\nyou should list it in the <code>declarations</code> field of that NgModule.</p>\n<p>In addition to the metadata configuration specified via the Directive decorator,\ndirectives can control their runtime behavior by implementing various Life-Cycle hooks.</p>\n<p><strong>Metadata Properties:</strong></p>\n<ul>\n<li><strong>exportAs</strong> - name under which the component instance is exported in a template</li>\n<li><strong>host</strong> - map of class property to host element bindings for events, properties and\nattributes</li>\n<li><strong>inputs</strong> - list of class property names to data-bind as component inputs</li>\n<li><strong>outputs</strong> - list of class property names that expose output events that others can\nsubscribe to</li>\n<li><strong>providers</strong> - list of providers available to this component and its children</li>\n<li><strong>queries</strong> -  configure queries that can be injected into the component</li>\n<li><strong>selector</strong> - css selector that identifies this component in a template</li>\n</ul>\n\n</section>\n\n  \n\n<section class=\"metadata-members\">\n  <h2 id=\"metadata-properties\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/Directive#metadata-properties\"><i class=\"material-icons\">link</i></a>Metadata Properties</h2>\n  \n    <div class=\"metadata-member\">\n  <a id=\"selector\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">selector?: string</code-example>\n  <p>The CSS selector that triggers the instantiation of a directive.</p>\n<p>Angular only allows directives to trigger on CSS selectors that do not cross element\nboundaries.</p>\n<p><code>selector</code> may be declared as one of the following:</p>\n<ul>\n<li><code>element-name</code>: select by element name.</li>\n<li><code>.class</code>: select by class name.</li>\n<li><code>[attribute]</code>: select by attribute name.</li>\n<li><code>[attribute=value]</code>: select by attribute name and value.</li>\n<li><code>:not(sub_selector)</code>: select only if the element does not match the <code>sub_selector</code>.</li>\n<li><code>selector1, selector2</code>: select if either <code>selector1</code> or <code>selector2</code> matches.</li>\n</ul>\n<h3 id=\"example\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/Directive#example\"><i class=\"material-icons\">link</i></a>Example</h3>\n<p>Suppose we have a directive with an <code>input[type=text]</code> selector.</p>\n<p>And the following HTML:</p>\n<code-example language=\"html\">\n&#x3C;form>\n  &#x3C;input type=\"text\">\n  &#x3C;input type=\"radio\">\n&#x3C;form>\n</code-example>\n<p>The directive would only be instantiated on the <code>&#x3C;input type=\"text\"></code> element.</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"metadata-member\">\n  <a id=\"inputs\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">inputs?: string[]</code-example>\n  <p>Enumerates the set of data-bound input properties for a directive</p>\n<p>Angular automatically updates input properties during change detection.</p>\n<p>The <code>inputs</code> property defines a set of <code>directiveProperty</code> to <code>bindingProperty</code>\nconfiguration:</p>\n<ul>\n<li><code>directiveProperty</code> specifies the component property where the value is written.</li>\n<li><code>bindingProperty</code> specifies the DOM property where the value is read from.</li>\n</ul>\n<p>When <code>bindingProperty</code> is not provided, it is assumed to be equal to <code>directiveProperty</code>.</p>\n<h3 id=\"example-live-demo\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/Directive#example-live-demo\"><i class=\"material-icons\">link</i></a>Example (<a href=\"http://plnkr.co/edit/ivhfXY?p=preview\">live demo</a>)</h3>\n<p>The following example creates a component with two data-bound properties.</p>\n<code-example language=\"typescript\">\n@Component({\n  selector: 'bank-account',\n  inputs: ['bankName', 'id: account-id'],\n  template: `\n    Bank Name: {{bankName}}\n    Account Id: {{id}}\n  `\n})\nclass BankAccount {\n  bankName: string;\n  id: string;\n\n  // this property is not bound, and won't be automatically updated by Angular\n  normalizedBankName: string;\n}\n\n@Component({\n  selector: 'app',\n  template: `\n    &#x3C;bank-account bank-name=\"RBC\" account-id=\"4747\">&#x3C;/bank-account>\n  `\n})\nclass App {}\n</code-example>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"metadata-member\">\n  <a id=\"outputs\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">outputs?: string[]</code-example>\n  <p>Enumerates the set of event-bound output properties.</p>\n<p>When an output property emits an event, an event handler attached to that event\nthe template is invoked.</p>\n<p>The <code>outputs</code> property defines a set of <code>directiveProperty</code> to <code>bindingProperty</code>\nconfiguration:</p>\n<ul>\n<li><code>directiveProperty</code> specifies the component property that emits events.</li>\n<li><code>bindingProperty</code> specifies the DOM property the event handler is attached to.</li>\n</ul>\n<h3 id=\"example-live-demo-1\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/Directive#example-live-demo-1\"><i class=\"material-icons\">link</i></a>Example (<a href=\"http://plnkr.co/edit/d5CNq7?p=preview\">live demo</a>)</h3>\n<code-example language=\"typescript\">\n@Directive({\n  selector: 'interval-dir',\n  outputs: ['everySecond', 'five5Secs: everyFiveSeconds']\n})\nclass IntervalDir {\n  everySecond = new EventEmitter();\n  five5Secs = new EventEmitter();\n\n  constructor() {\n    setInterval(() => this.everySecond.emit(\"event\"), 1000);\n    setInterval(() => this.five5Secs.emit(\"event\"), 5000);\n  }\n}\n\n@Component({\n  selector: 'app',\n  template: `\n    &#x3C;interval-dir (everySecond)=\"everySecond()\" (everyFiveSeconds)=\"everyFiveSeconds()\">\n    &#x3C;/interval-dir>\n  `\n})\nclass App {\n  everySecond() { console.log('second'); }\n  everyFiveSeconds() { console.log('five seconds'); }\n}\n</code-example>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"metadata-member\">\n  <a id=\"host\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">host?: {[key: string]: string}</code-example>\n  <p>Specify the events, actions, properties and attributes related to the host element.</p>\n<h2 id=\"host-listeners\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/Directive#host-listeners\"><i class=\"material-icons\">link</i></a>Host Listeners</h2>\n<p>Specifies which DOM events a directive listens to via a set of <code>(event)</code> to <code>method</code>\nkey-value pairs:</p>\n<ul>\n<li><code>event</code>: the DOM event that the directive listens to.</li>\n<li><code>statement</code>: the statement to execute when the event occurs.\nIf the evaluation of the statement returns <code>false</code>, then <code>preventDefault</code>is applied on the DOM\nevent.</li>\n</ul>\n<p>To listen to global events, a target must be added to the event name.\nThe target can be <code>window</code>, <code>document</code> or <code>body</code>.</p>\n<p>When writing a directive event binding, you can also refer to the $event local variable.</p>\n<h3 id=\"example-live-demo-2\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/Directive#example-live-demo-2\"><i class=\"material-icons\">link</i></a>Example (<a href=\"http://plnkr.co/edit/DlA5KU?p=preview\">live demo</a>)</h3>\n<p>The following example declares a directive that attaches a click listener to the button and\ncounts clicks.</p>\n<code-example language=\"typescript\">\n@Directive({\n  selector: 'button[counting]',\n  host: {\n    '(click)': 'onClick($event.target)'\n  }\n})\nclass CountClicks {\n  numberOfClicks = 0;\n\n  onClick(btn) {\n    console.log(\"button\", btn, \"number of clicks:\", this.numberOfClicks++);\n  }\n}\n\n@Component({\n  selector: 'app',\n  template: `&#x3C;button counting>Increment&#x3C;/button>`\n})\nclass App {}\n</code-example>\n<h2 id=\"host-property-bindings\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/Directive#host-property-bindings\"><i class=\"material-icons\">link</i></a>Host Property Bindings</h2>\n<p>Specifies which DOM properties a directive updates.</p>\n<p>Angular automatically checks host property bindings during change detection.\nIf a binding changes, it will update the host element of the directive.</p>\n<h3 id=\"example-live-demo-3\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/Directive#example-live-demo-3\"><i class=\"material-icons\">link</i></a>Example (<a href=\"http://plnkr.co/edit/gNg0ED?p=preview\">live demo</a>)</h3>\n<p>The following example creates a directive that sets the <code>valid</code> and <code>invalid</code> classes\non the DOM element that has ngModel directive on it.</p>\n<code-example language=\"typescript\">\n@Directive({\n  selector: '[ngModel]',\n  host: {\n    '[class.valid]': 'valid',\n    '[class.invalid]': 'invalid'\n  }\n})\nclass NgModelStatus {\n  constructor(public control:NgModel) {}\n  get valid { return this.control.valid; }\n  get invalid { return this.control.invalid; }\n}\n\n@Component({\n  selector: 'app',\n  template: `&#x3C;input [(ngModel)]=\"prop\">`\n})\nclass App {\n  prop;\n}\n</code-example>\n<h2 id=\"attributes\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/Directive#attributes\"><i class=\"material-icons\">link</i></a>Attributes</h2>\n<p>Specifies static attributes that should be propagated to a host element.</p>\n<h3 id=\"example-1\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/Directive#example-1\"><i class=\"material-icons\">link</i></a>Example</h3>\n<p>In this example using <code>my-button</code> directive (ex.: <code>&#x3C;div my-button>&#x3C;/div></code>) on a host element\n(here: <code>&#x3C;div></code> ) will ensure that this element will get the \"button\" role.</p>\n<code-example language=\"typescript\">\n@Directive({\n  selector: '[my-button]',\n  host: {\n    'role': 'button'\n  }\n})\nclass MyButton {\n}\n</code-example>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"metadata-member\">\n  <a id=\"providers\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">providers?: Provider[]</code-example>\n  <p>Defines the set of injectable objects that are visible to a Directive and its light DOM\nchildren.</p>\n<h2 id=\"simple-example\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/Directive#simple-example\"><i class=\"material-icons\">link</i></a>Simple Example</h2>\n<p>Here is an example of a class that can be injected:</p>\n<code-example>\nclass Greeter {\n   greet(name:string) {\n     return 'Hello ' + name + '!';\n   }\n}\n\n@Directive({\n  selector: 'greet',\n  providers: [\n    Greeter\n  ]\n})\nclass HelloWorld {\n  greeter:Greeter;\n\n  constructor(greeter:Greeter) {\n    this.greeter = greeter;\n  }\n}\n</code-example>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"metadata-member\">\n  <a id=\"exportAs\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">exportAs?: string</code-example>\n  <p>Defines the name that can be used in the template to assign this directive to a variable.</p>\n<h2 id=\"simple-example-1\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/Directive#simple-example-1\"><i class=\"material-icons\">link</i></a>Simple Example</h2>\n<code-example>\n@Directive({\n  selector: 'child-dir',\n  exportAs: 'child'\n})\nclass ChildDir {\n}\n\n@Component({\n  selector: 'main',\n  template: `&#x3C;child-dir #c=\"child\">&#x3C;/child-dir>`\n})\nclass MainComponent {\n}\n</code-example>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"metadata-member\">\n  <a id=\"queries\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">queries?: {[key: string]: any}</code-example>\n  <p>Configures the queries that will be injected into the directive.</p>\n<p>Content queries are set before the <code>ngAfterContentInit</code> callback is called.\nView queries are set before the <code>ngAfterViewInit</code> callback is called.</p>\n<h3 id=\"example-2\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/Directive#example-2\"><i class=\"material-icons\">link</i></a>Example</h3>\n<code-example>\n@Component({\n  selector: 'someDir',\n  queries: {\n    contentChildren: new ContentChildren(ChildDirective),\n    viewChildren: new ViewChildren(ChildDirective)\n  },\n  template: '&#x3C;child-directive>&#x3C;/child-directive>'\n})\nclass SomeDir {\n  contentChildren: QueryList&#x3C;ChildDirective>,\n  viewChildren: QueryList&#x3C;ChildDirective>\n\n  ngAfterContentInit() {\n    // contentChildren is set\n  }\n\n  ngAfterViewInit() {\n    // viewChildren is set\n  }\n}\n</code-example>\n\n  </div>\n\n    \n    \n  \n</section>\n\n\n\n\n\n</section></article>"
}