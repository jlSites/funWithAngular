{
  "id": "api/core/NgZone",
  "title": "NgZone",
  "contents": "<article>\n  <header class=\"api-header\">\n    <h1 class=\"no-toc\" id=\"ngzone\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/NgZone#ngzone\"><i class=\"material-icons\">link</i></a>NgZone</h1>\n    <label class=\"api-type-label class\">class</label>\n    \n    \n    \n    <span class=\"version\"></span>\n  </header>\n\n  \n  <!-- INFO BAR -->\n<section class=\"info-bar\">\n\n<table class=\"is-full-width\">\n<tbody>\n<tr>\n  <th>npm Package</th>\n  <td><a href=\"https://www.npmjs.com/package/@angular/core\">@angular/core</a></td>\n</tr>\n<tr>\n  <th>Module</th>\n  <td><code>import { NgZone } from <a href=\"api/core\">@angular/core</a>;</code></td>\n</tr>\n<tr>\n  <th>Source</th>\n  <td><a href=\"https://github.com/angular/angular/tree/4.3.0-rc.0/packages/core/src/zone/ng_zone.ts#L13-L189\">core/src/zone/ng_zone.ts</a></td>\n</tr>\n\n</tbody>\n</table>\n\n  \n  \n  \n  <section class=\"class-overview\">\n<h2 id=\"overview\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/NgZone#overview\"><i class=\"material-icons\">link</i></a>Overview</h2>\n<code-example language=\"ts\" hidecopy=\"true\">\nclass NgZone {\n  <a class=\"code-anchor\" href=\"api/core/NgZone#isInAngularZone\">static isInAngularZone(): boolean</a>\n  <a class=\"code-anchor\" href=\"api/core/NgZone#assertInAngularZone\">static assertInAngularZone(): void</a>\n  <a class=\"code-anchor\" href=\"api/core/NgZone#assertNotInAngularZone\">static assertNotInAngularZone(): void</a>\n  <a class=\"code-anchor\" href=\"api/core/NgZone#hasPendingMicrotasks\">hasPendingMicrotasks: boolean</a>\n  <a class=\"code-anchor\" href=\"api/core/NgZone#hasPendingMacrotasks\">hasPendingMacrotasks: boolean</a>\n  <a class=\"code-anchor\" href=\"api/core/NgZone#isStable\">isStable: boolean</a>\n  <a class=\"code-anchor\" href=\"api/core/NgZone#onUnstable\">onUnstable: EventEmitter&#x3C;any></a>\n  <a class=\"code-anchor\" href=\"api/core/NgZone#onMicrotaskEmpty\">onMicrotaskEmpty: EventEmitter&#x3C;any></a>\n  <a class=\"code-anchor\" href=\"api/core/NgZone#onStable\">onStable: EventEmitter&#x3C;any></a>\n  <a class=\"code-anchor\" href=\"api/core/NgZone#onError\">onError: EventEmitter&#x3C;any></a>\n  <a class=\"code-anchor\" href=\"api/core/NgZone#run\">run(fn: () => any): any</a>\n  <a class=\"code-anchor\" href=\"api/core/NgZone#runGuarded\">runGuarded(fn: () => any): any</a>\n  <a class=\"code-anchor\" href=\"api/core/NgZone#runOutsideAngular\">runOutsideAngular(fn: () => any): any</a>\n}\n</code-example>\n</section>\n\n  \n\n  \n\n\n<section class=\"description\">\n  <h2 id=\"description\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/NgZone#description\"><i class=\"material-icons\">link</i></a>Description</h2>\n  <p>An injectable service for executing work inside or outside of the Angular zone.</p>\n<p>The most common use of this service is to optimize performance when starting a work consisting of\none or more asynchronous tasks that don't require UI updates or error handling to be handled by\nAngular. Such tasks can be kicked off via <a href=\"api/core/NgZone#runOutsideAngular\">runOutsideAngular</a> and if needed, these tasks\ncan reenter the Angular zone via <a href=\"api/core/NgZone#run\">run</a>.</p>\n<!-- TODO: add/fix links to:\n  - docs explaining zones and the use of zones in Angular and change-detection\n  - link to runOutsideAngular/run (throughout this file!)\n  -->\n<h3 id=\"example\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/NgZone#example\"><i class=\"material-icons\">link</i></a>Example</h3>\n<code-example>\nimport {Component, NgZone} from '@angular/core';\nimport {NgIf} from '@angular/common';\n\n@Component({\n  selector: 'ng-zone-demo'.\n  template: `\n    &#x3C;h2>Demo: NgZone&#x3C;/h2>\n\n    &#x3C;p>Progress: {{progress}}%&#x3C;/p>\n    &#x3C;p *ngIf=\"progress >= 100\">Done processing {{label}} of Angular zone!&#x3C;/p>\n\n    &#x3C;button (click)=\"processWithinAngularZone()\">Process within Angular zone&#x3C;/button>\n    &#x3C;button (click)=\"processOutsideOfAngularZone()\">Process outside of Angular zone&#x3C;/button>\n  `,\n})\nexport class NgZoneDemo {\n  progress: number = 0;\n  label: string;\n\n  constructor(private _ngZone: NgZone) {}\n\n  // Loop inside the Angular zone\n  // so the UI DOES refresh after each setTimeout cycle\n  processWithinAngularZone() {\n    this.label = 'inside';\n    this.progress = 0;\n    this._increaseProgress(() => console.log('Inside Done!'));\n  }\n\n  // Loop outside of the Angular zone\n  // so the UI DOES NOT refresh after each setTimeout cycle\n  processOutsideOfAngularZone() {\n    this.label = 'outside';\n    this.progress = 0;\n    this._ngZone.runOutsideAngular(() => {\n      this._increaseProgress(() => {\n      // reenter the Angular zone and display done\n      this._ngZone.run(() => {console.log('Outside Done!') });\n    }}));\n  }\n\n  _increaseProgress(doneCallback: () => void) {\n    this.progress += 1;\n    console.log(`Current progress: ${this.progress}%`);\n\n    if (this.progress &#x3C; 100) {\n      window.setTimeout(() => this._increaseProgress(doneCallback)), 10)\n    } else {\n      doneCallback();\n    }\n  }\n}\n</code-example>\n\n</section>\n\n\n\n<section class=\"static-members\">\n  <h2 id=\"static-members\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/NgZone#static-members\"><i class=\"material-icons\">link</i></a>Static Members</h2>\n  \n    <div class=\"static-member\">\n  <a id=\"isInAngularZone\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">static isInAngularZone(): boolean</code-example>\n  \n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"static-member\">\n  <a id=\"assertInAngularZone\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">static assertInAngularZone(): void</code-example>\n  \n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"static-member\">\n  <a id=\"assertNotInAngularZone\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">static assertNotInAngularZone(): void</code-example>\n  \n  </div>\n\n    \n    \n  \n</section>\n\n\n\n<section class=\"constructor\">\n  <a id=\"constructor\"></a>\n  <h2 id=\"constructor\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/NgZone#constructor\"><i class=\"material-icons\">link</i></a>Constructor</h2>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">constructor({enableLongStackTrace = false}:)</code-example>\n  \n</section>\n\n\n\n\n<section class=\"instance-members\">\n  <h2 id=\"members\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/NgZone#members\"><i class=\"material-icons\">link</i></a>Members</h2>\n  \n    <div class=\"instance-member\">\n  <a id=\"hasPendingMicrotasks\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">hasPendingMicrotasks: boolean</code-example></div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"hasPendingMacrotasks\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">hasPendingMacrotasks: boolean</code-example></div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"isStable\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">isStable: boolean</code-example>\n  <p>Whether there are no outstanding microtasks or macrotasks.</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"onUnstable\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">onUnstable: EventEmitter&#x3C;any></code-example>\n  <p>Notifies when code enters Angular Zone. This gets fired first on VM Turn.</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"onMicrotaskEmpty\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">onMicrotaskEmpty: EventEmitter&#x3C;any></code-example>\n  <p>Notifies when there is no more microtasks enqueue in the current VM Turn.\nThis is a hint for Angular to do change detection, which may enqueue more microtasks.\nFor this reason this event can fire multiple times per VM Turn.</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"onStable\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">onStable: EventEmitter&#x3C;any></code-example>\n  <p>Notifies when the last <code>onMicrotaskEmpty</code> has run and there are no more microtasks, which\nimplies we are about to relinquish VM turn.\nThis event gets called just once.</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"onError\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">onError: EventEmitter&#x3C;any></code-example>\n  <p>Notifies that an error has been delivered.</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"run\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">run(fn: () => any): any</code-example>\n  <p>Executes the <code>fn</code> function synchronously within the Angular zone and returns value returned by\nthe function.</p>\n<p>Running functions via <code>run</code> allows you to reenter Angular zone from a task that was executed\noutside of the Angular zone (typically started via <a href=\"api/core/NgZone#runOutsideAngular\">runOutsideAngular</a>).</p>\n<p>Any future tasks or microtasks scheduled from within this function will continue executing from\nwithin the Angular zone.</p>\n<p>If a synchronous error happens it will be rethrown and not reported via <code>onError</code>.</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"runGuarded\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">runGuarded(fn: () => any): any</code-example>\n  <p>Same as <code>run</code>, except that synchronous errors are caught and forwarded via <code>onError</code> and not\nrethrown.</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"runOutsideAngular\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">runOutsideAngular(fn: () => any): any</code-example>\n  <p>Executes the <code>fn</code> function synchronously in Angular's parent zone and returns value returned by\nthe function.</p>\n<p>Running functions via <a href=\"api/core/NgZone#runOutsideAngular\">runOutsideAngular</a> allows you to escape Angular's zone and do\nwork that\ndoesn't trigger Angular change-detection or is subject to Angular's error handling.</p>\n<p>Any future tasks or microtasks scheduled from within this function will continue executing from\noutside of the Angular zone.</p>\n<p>Use <a href=\"api/core/NgZone#run\">run</a> to reenter the Angular zone and do work that updates the application model.</p>\n\n  </div>\n\n    \n    \n  \n</section>\n\n\n\n\n\n\n\n\n</section></article>"
}