{
  "id": "api/core/ComponentDecorator",
  "title": "ComponentDecorator",
  "contents": "<article>\n  <header class=\"api-header\">\n    <h1 class=\"no-toc\" id=\"componentdecorator\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ComponentDecorator#componentdecorator\"><i class=\"material-icons\">link</i></a>ComponentDecorator</h1>\n    <label class=\"api-type-label interface\">interface</label>\n    \n    \n    \n    <span class=\"version\"></span>\n  </header>\n\n  \n  <!-- INFO BAR -->\n<section class=\"info-bar\">\n\n<table class=\"is-full-width\">\n<tbody>\n<tr>\n  <th>npm Package</th>\n  <td><a href=\"https://www.npmjs.com/package/@angular/core\">@angular/core</a></td>\n</tr>\n<tr>\n  <th>Module</th>\n  <td><code>import { ComponentDecorator } from <a href=\"api/core\">@angular/core</a>;</code></td>\n</tr>\n<tr>\n  <th>Source</th>\n  <td><a href=\"https://github.com/angular/angular/tree/4.3.0-rc.0/packages/core/src/metadata/directives.ts#L404-L472\">core/src/metadata/directives.ts</a></td>\n</tr>\n\n</tbody>\n</table>\n\n  \n  \n  \n  <section class=\"interface-overview\">\n<h2 id=\"interface-overview\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ComponentDecorator#interface-overview\"><i class=\"material-icons\">link</i></a>Interface Overview</h2>\n<code-example language=\"ts\" hidecopy=\"true\">\ninterface ComponentDecorator { \n  <a class=\"code-anchor\" href=\"api/core/ComponentDecorator#call\">(obj: Component): TypeDecorator</a>\n  <a class=\"code-anchor\" href=\"api/core/ComponentDecorator#new\">new (obj: Component): Component</a>\n}\n</code-example>\n</section>\n  \n\n  \n  \n<section class=\"description\">\n  <h2 id=\"description\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ComponentDecorator#description\"><i class=\"material-icons\">link</i></a>Description</h2>\n  <p>Type of the Component decorator / constructor function.</p>\n\n</section>\n\n  \n\n<section class=\"instance-members\">\n  <h2 id=\"members\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ComponentDecorator#members\"><i class=\"material-icons\">link</i></a>Members</h2>\n  \n    <div class=\"instance-member\">\n  <a id=\"call\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">(obj: Component): TypeDecorator</code-example>\n  <p>Component decorator allows you to mark a class as an Angular component and provide additional\nmetadata that determines how the component should be processed, instantiated and used at\nruntime.</p>\n<p>Components are the most basic building block of an UI in an Angular application.\nAn Angular application is a tree of Angular components.\nAngular components are a subset of directives. Unlike directives, components always have\na template and only one component can be instantiated per an element in a template.</p>\n<p>A component must belong to an NgModule in order for it to be usable\nby another component or application. To specify that a component is a member of an NgModule,\nyou should list it in the <code>declarations</code> field of that NgModule.</p>\n<p>In addition to the metadata configuration specified via the Component decorator,\ncomponents can control their runtime behavior by implementing various Life-Cycle hooks.</p>\n<p><strong>Metadata Properties:</strong></p>\n<ul>\n<li><strong>animations</strong> - list of animations of this component</li>\n<li><strong>changeDetection</strong> - change detection strategy used by this component</li>\n<li><strong>encapsulation</strong> - style encapsulation strategy used by this component</li>\n<li><strong>entryComponents</strong> - list of components that are dynamically inserted into the view of this\ncomponent</li>\n<li><strong>exportAs</strong> - name under which the component instance is exported in a template</li>\n<li><strong>host</strong> - map of class property to host element bindings for events, properties and\nattributes</li>\n<li><strong>inputs</strong> - list of class property names to data-bind as component inputs</li>\n<li><strong>interpolation</strong> - custom interpolation markers used in this component's template</li>\n<li><strong>moduleId</strong> - ES/CommonJS module id of the file in which this component is defined</li>\n<li><strong>outputs</strong> - list of class property names that expose output events that others can\nsubscribe to</li>\n<li><strong>providers</strong> - list of providers available to this component and its children</li>\n<li><strong>queries</strong> -  configure queries that can be injected into the component</li>\n<li><strong>selector</strong> - css selector that identifies this component in a template</li>\n<li><strong>styleUrls</strong> - list of urls to stylesheets to be applied to this component's view</li>\n<li><strong>styles</strong> - inline-defined styles to be applied to this component's view</li>\n<li><strong>template</strong> - inline-defined template for the view</li>\n<li><strong>templateUrl</strong> - url to an external file containing a template for the view</li>\n<li><strong>viewProviders</strong> - list of providers available to this component and its view children</li>\n</ul>\n<h3 id=\"example\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ComponentDecorator#example\"><i class=\"material-icons\">link</i></a>Example</h3>\n<code-example>\n@Component({selector: 'greet', template: 'Hello {{name}}!'})\nclass Greet {\n  name: string = 'World';\n}\n\n</code-example>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"new\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">new (obj: Component): Component</code-example>\n  <p>See the <a href=\"api/core/Component\"><code><a href=\"api/core/Component\">Component</a></code></a> decorator.</p>\n\n  </div>\n\n    \n    \n  \n</section>\n\n\n\n\n\n</section></article>"
}