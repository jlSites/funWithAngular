{
  "id": "api/core/ElementRef",
  "title": "ElementRef",
  "contents": "<article>\n  <header class=\"api-header\">\n    <h1 class=\"no-toc\" id=\"elementref\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ElementRef#elementref\"><i class=\"material-icons\">link</i></a>ElementRef</h1>\n    <label class=\"api-type-label class\">class</label>\n    \n    \n    \n    <span class=\"version\"></span>\n  </header>\n\n  \n  <!-- INFO BAR -->\n<section class=\"info-bar\">\n\n<table class=\"is-full-width\">\n<tbody>\n<tr>\n  <th>npm Package</th>\n  <td><a href=\"https://www.npmjs.com/package/@angular/core\">@angular/core</a></td>\n</tr>\n<tr>\n  <th>Module</th>\n  <td><code>import { ElementRef } from <a href=\"api/core\">@angular/core</a>;</code></td>\n</tr>\n<tr>\n  <th>Source</th>\n  <td><a href=\"https://github.com/angular/angular/tree/4.3.0-rc.0/packages/core/src/linker/element_ref.ts#L1-L48\">core/src/linker/element_ref.ts</a></td>\n</tr>\n\n</tbody>\n</table>\n\n  \n  \n<section &#x22;security&#x22;=\"\">\n  <h2 id=\"security-risk\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ElementRef#security-risk\"><i class=\"material-icons\">link</i></a>Security Risk</h2>\n  <p>Permitting direct access to the DOM can make your application more vulnerable to\nXSS attacks. Carefully review any use of <code><a href=\"api/core/ElementRef\">ElementRef</a></code> in your code. For more detail, see the\n<a href=\"http://g.co/ng/security\">Security Guide</a>.</p>\n\n</section>\n\n  \n  <section class=\"class-overview\">\n<h2 id=\"overview\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ElementRef#overview\"><i class=\"material-icons\">link</i></a>Overview</h2>\n<code-example language=\"ts\" hidecopy=\"true\">\nclass ElementRef {\n  <a class=\"code-anchor\" href=\"api/core/ElementRef#nativeElement\">nativeElement: any</a>\n}\n</code-example>\n</section>\n\n  \n\n  \n\n\n\n\n\n\n<section class=\"constructor\">\n  <a id=\"constructor\"></a>\n  <h2 id=\"constructor\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ElementRef#constructor\"><i class=\"material-icons\">link</i></a>Constructor</h2>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">constructor(nativeElement: any)</code-example>\n  \n</section>\n\n\n\n\n<section class=\"instance-members\">\n  <h2 id=\"members\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ElementRef#members\"><i class=\"material-icons\">link</i></a>Members</h2>\n  \n    <div class=\"instance-member\">\n  <a id=\"nativeElement\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">nativeElement: any</code-example>\n  <p>The underlying native element or <code>null</code> if direct access to native elements is not supported\n(e.g. when the application runs in a web worker).</p>\n<div class=\"callout is-critical\">\n  <header>Use with caution</header>\n  <p>\n   Use this API as the last resort when direct access to DOM is needed. Use templating and\n   data-binding provided by Angular instead. Alternatively you take a look at <a href=\"api/core/Renderer\"><code><a href=\"api/core/Renderer\">Renderer</a></code></a>\n   which provides API that can safely be used even when direct access to native elements is not\n   supported.\n  </p>\n  <p>\n   Relying on direct DOM access creates tight coupling between your application and rendering\n   layers which will make it impossible to separate the two and deploy your application into a\n   web worker.\n  </p>\n</div>\n\n  </div>\n\n    \n    \n  \n</section>\n\n\n\n\n\n\n\n\n</section></article>"
}