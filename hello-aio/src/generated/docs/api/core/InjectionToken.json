{
  "id": "api/core/InjectionToken",
  "title": "InjectionToken",
  "contents": "<article>\n  <header class=\"api-header\">\n    <h1 class=\"no-toc\" id=\"injectiontoken\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/InjectionToken#injectiontoken\"><i class=\"material-icons\">link</i></a>InjectionToken</h1>\n    <label class=\"api-type-label class\">class</label>\n    \n    \n    \n    <span class=\"version\"></span>\n  </header>\n\n  \n  <!-- INFO BAR -->\n<section class=\"info-bar\">\n\n<table class=\"is-full-width\">\n<tbody>\n<tr>\n  <th>npm Package</th>\n  <td><a href=\"https://www.npmjs.com/package/@angular/core\">@angular/core</a></td>\n</tr>\n<tr>\n  <th>Module</th>\n  <td><code>import { InjectionToken } from <a href=\"api/core\">@angular/core</a>;</code></td>\n</tr>\n<tr>\n  <th>Source</th>\n  <td><a href=\"https://github.com/angular/angular/tree/4.3.0-rc.0/packages/core/src/di/injection_token.ts#L37-L67\">core/src/di/injection_token.ts</a></td>\n</tr>\n\n</tbody>\n</table>\n\n  \n  \n  \n  <section class=\"class-overview\">\n<h2 id=\"overview\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/InjectionToken#overview\"><i class=\"material-icons\">link</i></a>Overview</h2>\n<code-example language=\"ts\" hidecopy=\"true\">\nclass InjectionToken&#x3C;T> extends OpaqueToken {\n  <a class=\"code-anchor\" href=\"api/core/InjectionToken#toString\">toString(): string</a>\n}\n</code-example>\n</section>\n\n  \n\n  \n\n\n<section class=\"description\">\n  <h2 id=\"description\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/InjectionToken#description\"><i class=\"material-icons\">link</i></a>Description</h2>\n  <p>Creates a token that can be used in a DI Provider.</p>\n<p>Use an <code><a href=\"api/core/InjectionToken\">InjectionToken</a></code> whenever the type you are injecting is not reified (does not have a\nruntime representation) such as when injecting an interface, callable type, array or\nparametrized type.</p>\n<p><code><a href=\"api/core/InjectionToken\">InjectionToken</a></code> is parameterized on <code>T</code> which is the type of object which will be returned by\nthe <code><a href=\"api/core/Injector\">Injector</a></code>. This provides additional level of type safety.</p>\n<code-example>\ninterface MyInterface {...}\nvar myInterface = injector.get(new InjectionToken&#x3C;MyInterface>('SomeToken'));\n// myInterface is inferred to be MyInterface.\n</code-example>\n<h3 id=\"example\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/InjectionToken#example\"><i class=\"material-icons\">link</i></a>Example</h3>\n<code-example>\nconst BASE_URL = new InjectionToken&#x3C;string>('BaseUrl');\nconst injector =\n    ReflectiveInjector.resolveAndCreate([{provide: BASE_URL, useValue: 'http://localhost'}]);\nconst url = injector.get(BASE_URL);\n// here `url` is inferred to be `string` because `BASE_URL` is `InjectionToken&#x3C;string>`.\nexpect(url).toBe('http://localhost');\n\n</code-example>\n\n</section>\n\n\n\n\n\n<section class=\"constructor\">\n  <a id=\"constructor\"></a>\n  <h2 id=\"constructor\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/InjectionToken#constructor\"><i class=\"material-icons\">link</i></a>Constructor</h2>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">constructor(desc: string)</code-example>\n  \n</section>\n\n\n\n\n<section class=\"instance-members\">\n  <h2 id=\"members\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/InjectionToken#members\"><i class=\"material-icons\">link</i></a>Members</h2>\n  \n    <div class=\"instance-member\">\n  <a id=\"toString\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">toString(): string</code-example></div>\n\n    \n    \n  \n</section>\n\n\n\n\n\n\n\n\n</section></article>"
}