{
  "id": "api/core/ExistingProvider",
  "title": "ExistingProvider",
  "contents": "<article>\n  <header class=\"api-header\">\n    <h1 class=\"no-toc\" id=\"existingprovider\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ExistingProvider#existingprovider\"><i class=\"material-icons\">link</i></a>ExistingProvider</h1>\n    <label class=\"api-type-label interface\">interface</label>\n    \n    \n    \n    <span class=\"version\"></span>\n  </header>\n\n  \n  <!-- INFO BAR -->\n<section class=\"info-bar\">\n\n<table class=\"is-full-width\">\n<tbody>\n<tr>\n  <th>npm Package</th>\n  <td><a href=\"https://www.npmjs.com/package/@angular/core\">@angular/core</a></td>\n</tr>\n<tr>\n  <th>Module</th>\n  <td><code>import { ExistingProvider } from <a href=\"api/core\">@angular/core</a>;</code></td>\n</tr>\n<tr>\n  <th>Source</th>\n  <td><a href=\"https://github.com/angular/angular/tree/4.3.0-rc.0/packages/core/src/di/provider.ts#L118-L155\">core/src/di/provider.ts</a></td>\n</tr>\n\n</tbody>\n</table>\n\n  \n<div class=\"what-it-does info-banner\">\n  <p>Configures the <a href=\"api/core/Injector\"><code><a href=\"api/core/Injector\">Injector</a></code></a> to return a value of another <code>useExisting</code> token.</p>\n\n</div>\n\n  \n  \n  <section class=\"interface-overview\">\n<h2 id=\"interface-overview\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ExistingProvider#interface-overview\"><i class=\"material-icons\">link</i></a>Interface Overview</h2>\n<code-example language=\"ts\" hidecopy=\"true\">\ninterface ExistingProvider { \n  <a class=\"code-anchor\" href=\"api/core/ExistingProvider#provide\">provide: any</a>\n  <a class=\"code-anchor\" href=\"api/core/ExistingProvider#useExisting\">useExisting: any</a>\n  <a class=\"code-anchor\" href=\"api/core/ExistingProvider#multi\">multi?: boolean</a>\n}\n</code-example>\n</section>\n  \n<section class=\"how-to-use\">\n  <h2 id=\"how-to-use\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ExistingProvider#how-to-use\"><i class=\"material-icons\">link</i></a>How To Use</h2>\n  <code-example>\nconst provider: ExistingProvider = {provide: 'someToken', useExisting: 'someOtherToken'};\n</code-example>\n\n</section>\n\n\n  \n  \n<section class=\"description\">\n  <h2 id=\"description\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ExistingProvider#description\"><i class=\"material-icons\">link</i></a>Description</h2>\n  <p>For more details, see the <a href=\"guide/dependency-injection\">\"Dependency Injection Guide\"</a>.</p>\n<h3 id=\"example\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ExistingProvider#example\"><i class=\"material-icons\">link</i></a>Example</h3>\n<code-example>\nclass Greeting {\n  salutation = 'Hello';\n}\n\nclass FormalGreeting extends Greeting {\n  salutation = 'Greetings';\n}\n\nconst injector = ReflectiveInjector.resolveAndCreate(\n    [FormalGreeting, {provide: Greeting, useExisting: FormalGreeting}]);\n\nexpect(injector.get(Greeting).salutation).toEqual('Greetings');\nexpect(injector.get(FormalGreeting).salutation).toEqual('Greetings');\nexpect(injector.get(FormalGreeting)).toBe(injector.get(Greeting));\n\n</code-example>\n\n</section>\n\n  \n\n<section class=\"instance-members\">\n  <h2 id=\"members\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ExistingProvider#members\"><i class=\"material-icons\">link</i></a>Members</h2>\n  \n    <div class=\"instance-member\">\n  <a id=\"provide\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">provide: any</code-example>\n  <p>An injection token. (Typically an instance of <code><a href=\"api/core/Type\">Type</a></code> or <code><a href=\"api/core/InjectionToken\">InjectionToken</a></code>, but can be <code>any</code>).</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"useExisting\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">useExisting: any</code-example>\n  <p>Existing <code>token</code> to return. (equivalent to <code>injector.get(useExisting)</code>)</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"multi\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">multi?: boolean</code-example>\n  <p>If true, then injector returns an array of instances. This is useful to allow multiple\nproviders spread across many files to provide configuration information to a common token.</p>\n<h3 id=\"example-1\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/ExistingProvider#example-1\"><i class=\"material-icons\">link</i></a>Example</h3>\n<code-example>\nconst injector = ReflectiveInjector.resolveAndCreate([\n  {provide: 'local', multi: true, useValue: 'en'},\n  {provide: 'local', multi: true, useValue: 'sk'},\n]);\n\nconst locales: string[] = injector.get('local');\nexpect(locales).toEqual(['en', 'sk']);\n\n</code-example>\n\n  </div>\n\n    \n    \n  \n</section>\n\n\n\n\n\n</section></article>"
}