{
  "id": "api/core/wtfCreateScope",
  "title": "wtfCreateScope",
  "contents": "<article>\n  <header class=\"api-header\">\n    <h1 class=\"no-toc\" id=\"wtfcreatescope\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/wtfCreateScope#wtfcreatescope\"><i class=\"material-icons\">link</i></a>wtfCreateScope</h1>\n    <label class=\"api-type-label const\">const</label>\n    \n    \n    \n    <span class=\"version\"></span>\n  </header>\n\n  \n  <!-- INFO BAR -->\n<section class=\"info-bar\">\n\n<table class=\"is-full-width\">\n<tbody>\n<tr>\n  <th>npm Package</th>\n  <td><a href=\"https://www.npmjs.com/package/@angular/core\">@angular/core</a></td>\n</tr>\n<tr>\n  <th>Module</th>\n  <td><code>import { wtfCreateScope } from <a href=\"api/core\">@angular/core</a>;</code></td>\n</tr>\n<tr>\n  <th>Source</th>\n  <td><a href=\"https://github.com/angular/angular/tree/4.3.0-rc.0/packages/core/src/profile/profile.ts#L54-L54\">core/src/profile/profile.ts</a></td>\n</tr>\n\n</tbody>\n</table>\n\n  \n  \n  \n  \n  <code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">\n  const wtfCreateScope: any;\n  </code-example>\n\n  \n\n  \n  \n<section class=\"description\">\n  <h2 id=\"description\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/wtfCreateScope#description\"><i class=\"material-icons\">link</i></a>Description</h2>\n  <p>Create trace scope.</p>\n<p>Scopes must be strictly nested and are analogous to stack frames, but\ndo not have to follow the stack frames. Instead it is recommended that they follow logical\nnesting. You may want to use\n<a href=\"http://google.github.io/tracing-framework/instrumenting-code.html#custom-events\">Event\nSignatures</a>\nas they are defined in WTF.</p>\n<p>Used to mark scope entry. The return value is used to leave the scope.</p>\n<p>    var myScope = wtfCreateScope('MyClass#myMethod(ascii someVal)');</p>\n<p>    someMethod() {\nvar s = myScope('Foo'); // 'Foo' gets stored in tracing UI\n// DO SOME WORK HERE\nreturn wtfLeave(s, 123); // Return value 123\n}</p>\n<p>Note, adding try-finally block around the work to ensure that <code><a href=\"api/core/wtfLeave\">wtfLeave</a></code> gets called can\nnegatively impact the performance of your application. For this reason we recommend that\nyou don't add them to ensure that <code><a href=\"api/core/wtfLeave\">wtfLeave</a></code> gets called. In production <code><a href=\"api/core/wtfLeave\">wtfLeave</a></code> is a noop and\nso try-finally block has no value. When debugging perf issues, skipping <code><a href=\"api/core/wtfLeave\">wtfLeave</a></code>, do to\nexception, will produce incorrect trace, but presence of exception signifies logic error which\nneeds to be fixed before the app should be profiled. Add try-finally only when you expect that\nan exception is expected during normal execution while profiling.</p>\n\n</section>\n\n\n\n\n</section></article>"
}