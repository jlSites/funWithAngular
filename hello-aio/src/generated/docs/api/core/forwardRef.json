{
  "id": "api/core/forwardRef",
  "title": "forwardRef",
  "contents": "<article>\n  <header class=\"api-header\">\n    <h1 class=\"no-toc\" id=\"forwardref\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/forwardRef#forwardref\"><i class=\"material-icons\">link</i></a>forwardRef</h1>\n    <label class=\"api-type-label function\">function</label>\n    \n    \n    \n    <span class=\"version\"></span>\n  </header>\n\n  \n  <!-- INFO BAR -->\n<section class=\"info-bar\">\n\n<table class=\"is-full-width\">\n<tbody>\n<tr>\n  <th>npm Package</th>\n  <td><a href=\"https://www.npmjs.com/package/@angular/core\">@angular/core</a></td>\n</tr>\n<tr>\n  <th>Module</th>\n  <td><code>import { forwardRef } from <a href=\"api/core\">@angular/core</a>;</code></td>\n</tr>\n<tr>\n  <th>Source</th>\n  <td><a href=\"https://github.com/angular/angular/tree/4.3.0-rc.0/packages/core/src/di/forward_ref.ts#L23-L40\">core/src/di/forward_ref.ts</a></td>\n</tr>\n\n</tbody>\n</table>\n\n  \n  \n  \n  \n<code-example language=\"ts\" hidecopy=\"true\" class=\"no-box api-heading\">\nfunction forwardRef(forwardRefFn: ForwardRefFn): Type&#x3C;any>;\n</code-example>\n\n  \n\n  \n\n<section class=\"description\">\n  <h2 id=\"description\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/forwardRef#description\"><i class=\"material-icons\">link</i></a>Description</h2>\n  <p>Allows to refer to references which are not yet defined.</p>\n<p>For instance, <code><a href=\"api/core/forwardRef\">forwardRef</a></code> is used when the <code>token</code> which we need to refer to for the purposes of\nDI is declared,\nbut not yet defined. It is also used when the <code>token</code> which we use when creating a query is not\nyet defined.</p>\n<h3 id=\"example\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/core/forwardRef#example\"><i class=\"material-icons\">link</i></a>Example</h3>\n<code-example>\nclass Door {\n  lock: Lock;\n\n  // Door attempts to inject Lock, despite it not being defined yet.\n  // forwardRef makes this possible.\n  constructor(@Inject(forwardRef(() => Lock)) lock: Lock) { this.lock = lock; }\n}\n\n// Only at this point Lock is defined.\nclass Lock {}\n\nconst injector = ReflectiveInjector.resolveAndCreate([Door, Lock]);\nconst door = injector.get(Door);\nexpect(door instanceof Door).toBeTruthy();\nexpect(door.lock instanceof Lock).toBeTruthy();\n\n</code-example>\n\n</section>\n\n\n\n\n\n</section></article>"
}