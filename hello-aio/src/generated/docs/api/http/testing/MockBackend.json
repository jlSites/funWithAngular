{
  "id": "api/http/testing/MockBackend",
  "title": "MockBackend",
  "contents": "<article>\n  <header class=\"api-header\">\n    <h1 class=\"no-toc\" id=\"mockbackend\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/http/testing/MockBackend#mockbackend\"><i class=\"material-icons\">link</i></a>MockBackend</h1>\n    <label class=\"api-type-label class\">class</label>\n    \n    \n    \n    <span class=\"version\"></span>\n  </header>\n\n  \n  <!-- INFO BAR -->\n<section class=\"info-bar\">\n\n<table class=\"is-full-width\">\n<tbody>\n<tr>\n  <th>npm Package</th>\n  <td><a href=\"https://www.npmjs.com/package/@angular/http\">@angular/http</a></td>\n</tr>\n<tr>\n  <th>Module</th>\n  <td><code>import { MockBackend } from <a href=\"api/http/testing\">@angular/http/testing</a>;</code></td>\n</tr>\n<tr>\n  <th>Source</th>\n  <td><a href=\"https://github.com/angular/angular/tree/4.3.0-rc.0/packages/http/testing/src/mock_backend.ts#L107-L292\">http/testing/src/mock_backend.ts</a></td>\n</tr>\n\n</tbody>\n</table>\n\n  \n  \n  \n  <section class=\"class-overview\">\n<h2 id=\"overview\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/http/testing/MockBackend#overview\"><i class=\"material-icons\">link</i></a>Overview</h2>\n<code-example language=\"ts\" hidecopy=\"true\">\nclass MockBackend implements ConnectionBackend {\n  <a class=\"code-anchor\" href=\"api/http/testing/MockBackend#connections\">connections: any</a>\n  <a class=\"code-anchor\" href=\"api/http/testing/MockBackend#connectionsArray\">connectionsArray: MockConnection[]</a>\n  <a class=\"code-anchor\" href=\"api/http/testing/MockBackend#pendingConnections\">pendingConnections: any</a>\n  <a class=\"code-anchor\" href=\"api/http/testing/MockBackend#verifyNoPendingRequests\">verifyNoPendingRequests()</a>\n  <a class=\"code-anchor\" href=\"api/http/testing/MockBackend#resolveAllConnections\">resolveAllConnections()</a>\n  <a class=\"code-anchor\" href=\"api/http/testing/MockBackend#createConnection\">createConnection(req: Request): MockConnection</a>\n}\n</code-example>\n</section>\n\n  \n\n  \n\n\n<section class=\"description\">\n  <h2 id=\"description\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/http/testing/MockBackend#description\"><i class=\"material-icons\">link</i></a>Description</h2>\n  <p>A mock backend for testing the <a href=\"api/http/Http\"><code><a href=\"api/http/Http\">Http</a></code></a> service.</p>\n<p>This class can be injected in tests, and should be used to override providers\nto other backends, such as <a href=\"api/http/XHRBackend\"><code><a href=\"api/http/XHRBackend\">XHRBackend</a></code></a>.</p>\n<h3 id=\"example\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/http/testing/MockBackend#example\"><i class=\"material-icons\">link</i></a>Example</h3>\n<code-example>\nimport {Injectable, ReflectiveInjector} from '@angular/core';\nimport {async, fakeAsync, tick} from '@angular/core/testing';\nimport {BaseRequestOptions, ConnectionBackend, Http, RequestOptions} from '@angular/http';\nimport {Response, ResponseOptions} from '@angular/http';\nimport {MockBackend, MockConnection} from '@angular/http/testing';\n\nconst HERO_ONE = 'HeroNrOne';\nconst HERO_TWO = 'WillBeAlwaysTheSecond';\n\n@Injectable()\nclass HeroService {\n  constructor(private http: Http) {}\n\n  getHeroes(): Promise&#x3C;String[]> {\n    return this.http.get('myservices.de/api/heroes')\n        .toPromise()\n        .then(response => response.json().data)\n        .catch(e => this.handleError(e));\n  }\n\n  private handleError(error: any): Promise&#x3C;any> {\n    console.error('An error occurred', error);\n    return Promise.reject(error.message || error);\n  }\n}\n\ndescribe('MockBackend HeroService Example', () => {\n  beforeEach(() => {\n    this.injector = ReflectiveInjector.resolveAndCreate([\n      {provide: ConnectionBackend, useClass: MockBackend},\n      {provide: RequestOptions, useClass: BaseRequestOptions},\n      Http,\n      HeroService,\n    ]);\n    this.heroService = this.injector.get(HeroService);\n    this.backend = this.injector.get(ConnectionBackend) as MockBackend;\n    this.backend.connections.subscribe((connection: any) => this.lastConnection = connection);\n  });\n\n  it('getHeroes() should query current service url', () => {\n    this.heroService.getHeroes();\n    expect(this.lastConnection).toBeDefined('no http service connection at all?');\n    expect(this.lastConnection.request.url).toMatch(/api\\/heroes$/, 'url invalid');\n  });\n\n  it('getHeroes() should return some heroes', fakeAsync(() => {\n       let result: String[];\n       this.heroService.getHeroes().then((heroes: String[]) => result = heroes);\n       this.lastConnection.mockRespond(new Response(new ResponseOptions({\n         body: JSON.stringify({data: [HERO_ONE, HERO_TWO]}),\n       })));\n       tick();\n       expect(result.length).toEqual(2, 'should contain given amount of heroes');\n       expect(result[0]).toEqual(HERO_ONE, ' HERO_ONE should be the first hero');\n       expect(result[1]).toEqual(HERO_TWO, ' HERO_TWO should be the second hero');\n     }));\n\n  it('getHeroes() while server is down', fakeAsync(() => {\n       let result: String[];\n       let catchedError: any;\n       this.heroService.getHeroes()\n           .then((heroes: String[]) => result = heroes)\n           .catch((error: any) => catchedError = error);\n       this.lastConnection.mockRespond(new Response(new ResponseOptions({\n         status: 404,\n         statusText: 'URL not Found',\n       })));\n       tick();\n       expect(result).toBeUndefined();\n       expect(catchedError).toBeDefined();\n     }));\n});\n</code-example>\n<p>This method only exists in the mock implementation, not in real Backends.</p>\n\n</section>\n\n\n\n\n\n<section class=\"constructor\">\n  <a id=\"constructor\"></a>\n  <h2 id=\"constructor\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/http/testing/MockBackend#constructor\"><i class=\"material-icons\">link</i></a>Constructor</h2>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">constructor()</code-example>\n  \n</section>\n\n\n\n\n<section class=\"instance-members\">\n  <h2 id=\"members\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/http/testing/MockBackend#members\"><i class=\"material-icons\">link</i></a>Members</h2>\n  \n    <div class=\"instance-member\">\n  <a id=\"connections\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">connections: any</code-example>\n  <a href=\"api/core/EventEmitter\"><code><a href=\"api/core/EventEmitter\">EventEmitter</a></code></a>\n<p>of <a href=\"api/http/testing/MockConnection\"><code><a href=\"api/http/testing/MockConnection\">MockConnection</a></code></a> instances that have been created by this backend. Can be subscribed\nto in order to respond to connections.</p>\n<h3 id=\"example-1\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/http/testing/MockBackend#example-1\"><i class=\"material-icons\">link</i></a>Example</h3>\n<code-example>\nimport {ReflectiveInjector} from '@angular/core';\nimport {fakeAsync, tick} from '@angular/core/testing';\nimport {BaseRequestOptions, ConnectionBackend, Http, RequestOptions} from '@angular/http';\nimport {Response, ResponseOptions} from '@angular/http';\nimport {MockBackend, MockConnection} from '@angular/http/testing';\n\nit('should get a response', fakeAsync(() => {\n     let connection:\n         MockConnection;  // this will be set when a new connection is emitted from the\n                          // backend.\n     let text: string;    // this will be set from mock response\n     let injector = ReflectiveInjector.resolveAndCreate([\n       {provide: ConnectionBackend, useClass: MockBackend},\n       {provide: RequestOptions, useClass: BaseRequestOptions},\n       Http,\n     ]);\n     let backend = injector.get(ConnectionBackend);\n     let http = injector.get(Http);\n     backend.connections.subscribe((c: MockConnection) => connection = c);\n     http.request('something.json').toPromise().then((res: any) => text = res.text());\n     connection.mockRespond(new Response(new ResponseOptions({body: 'Something'})));\n     tick();\n     expect(text).toBe('Something');\n   }));\n</code-example>\n<p>This property only exists in the mock implementation, not in real Backends.</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"connectionsArray\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">connectionsArray: MockConnection[]</code-example>\n  <p>An array representation of <code>connections</code>. This array will be updated with each connection that\nis created by this backend.</p>\n<p>This property only exists in the mock implementation, not in real Backends.</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"pendingConnections\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">pendingConnections: any</code-example>\n  <a href=\"api/core/EventEmitter\"><code><a href=\"api/core/EventEmitter\">EventEmitter</a></code></a>\n<p> of <a href=\"api/http/testing/MockConnection\"><code><a href=\"api/http/testing/MockConnection\">MockConnection</a></code></a> instances that haven't yet been resolved (i.e.\nwith a <code>readyState</code>\nless than 4). Used internally to verify that no connections are pending via the\n<code>verifyNoPendingRequests</code> method.</p>\n<p>This property only exists in the mock implementation, not in real Backends.</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"verifyNoPendingRequests\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">verifyNoPendingRequests()</code-example>\n  <p>Checks all connections, and raises an exception if any connection has not received a response.</p>\n<p>This method only exists in the mock implementation, not in real Backends.</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"resolveAllConnections\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">resolveAllConnections()</code-example>\n  <p>Can be used in conjunction with <code>verifyNoPendingRequests</code> to resolve any not-yet-resolve\nconnections, if it's expected that there are connections that have not yet received a response.</p>\n<p>This method only exists in the mock implementation, not in real Backends.</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"createConnection\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">createConnection(req: Request): MockConnection</code-example>\n  <p>Creates a new <a href=\"api/http/testing/MockConnection\"><code><a href=\"api/http/testing/MockConnection\">MockConnection</a></code></a>. This is equivalent to calling <code>new MockConnection()</code>, except that it also will emit the new <code><a href=\"api/http/Connection\">Connection</a></code> to the <code>connections</code>\nemitter of this <code><a href=\"api/http/testing/MockBackend\">MockBackend</a></code> instance. This method will usually only be used by tests\nagainst the framework itself, not by end-users.</p>\n\n  </div>\n\n    \n    \n  \n</section>\n\n\n\n<section class=\"annotations\">\n  <h2 id=\"annotations\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/http/testing/MockBackend#annotations\"><i class=\"material-icons\">link</i></a>Annotations</h2>\n    <code-example hidecopy=\"true\" class=\"no-box api-heading\">@Injectable()</code-example>\n    \n  \n</section>\n\n\n\n\n\n\n</section></article>"
}