{
  "id": "api/forms/NgModel",
  "title": "NgModel",
  "contents": "<article>\n  <header class=\"api-header\">\n    <h1 class=\"no-toc\" id=\"ngmodel\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/NgModel#ngmodel\"><i class=\"material-icons\">link</i></a>NgModel</h1>\n    <label class=\"api-type-label directive\">directive</label>\n    \n    \n    \n    <span class=\"version\"></span>\n  </header>\n\n  \n  <!-- INFO BAR -->\n<section class=\"info-bar\">\n\n<table class=\"is-full-width\">\n<tbody>\n<tr>\n  <th>npm Package</th>\n  <td><a href=\"https://www.npmjs.com/package/@angular/forms\">@angular/forms</a></td>\n</tr>\n<tr>\n  <th>Module</th>\n  <td><code>import { NgModel } from <a href=\"api/forms\">@angular/forms</a>;</code></td>\n</tr>\n<tr>\n  <th>Source</th>\n  <td><a href=\"https://github.com/angular/angular/tree/4.3.0-rc.0/packages/forms/src/directives/ng_model.ts#L47-L231\">forms/src/directives/ng_model.ts</a></td>\n</tr>\n\n</tbody>\n</table>\n\n  \n<div class=\"what-it-does info-banner\">\n  <p>Creates a <a href=\"api/forms/FormControl\"><code><a href=\"api/forms/FormControl\">FormControl</a></code></a> instance from a domain model and binds it\nto a form control element.</p>\n<p>The <a href=\"api/forms/FormControl\"><code><a href=\"api/forms/FormControl\">FormControl</a></code></a> instance will track the value, user interaction, and\nvalidation status of the control and keep the view synced with the model. If used\nwithin a parent form, the directive will also register itself with the form as a child\ncontrol.</p>\n\n</div>\n\n  \n  \n  <section class=\"directive-overview\">\n  <h2 id=\"overview\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/NgModel#overview\"><i class=\"material-icons\">link</i></a>Overview</h2>\n<code-example language=\"ts\" hidecopy=\"true\">\n<a href=\"api/forms/NgModel#annotations\">@Directive({\n  selector: '[ngModel]:not([formControlName]):not([formControl])',\n  providers: [formControlBinding],\n  exportAs: 'ngModel'\n})</a>\nclass NgModel extends NgControl implements OnChanges, OnDestroy {\n  <a class=\"code-anchor\" href=\"api/forms/NgModel#viewModel\">viewModel: any</a>\n  <a class=\"code-anchor\" href=\"api/forms/NgModel#name\">name: string</a>\n  <a class=\"code-anchor\" href=\"api/forms/NgModel#isDisabled\">isDisabled: boolean</a>\n  <a class=\"code-anchor\" href=\"api/forms/NgModel#model\">model: any</a>\n  <a class=\"code-anchor\" href=\"api/forms/NgModel#options\">options: {name?: string, standalone?: boolean}</a>\n  <a class=\"code-anchor\" href=\"api/forms/NgModel#update\">update: new EventEmitter()</a>\n  <a class=\"code-anchor\" href=\"api/forms/NgModel#ngOnChanges\">ngOnChanges(changes: SimpleChanges)</a>\n  <a class=\"code-anchor\" href=\"api/forms/NgModel#ngOnDestroy\">ngOnDestroy(): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/NgModel#control\">get control(): FormControl</a>\n  <a class=\"code-anchor\" href=\"api/forms/NgModel#path\">get path(): string[]</a>\n  <a class=\"code-anchor\" href=\"api/forms/NgModel#formDirective\">get formDirective(): any</a>\n  <a class=\"code-anchor\" href=\"api/forms/NgModel#validator\">get validator(): ValidatorFn|null</a>\n  <a class=\"code-anchor\" href=\"api/forms/NgModel#asyncValidator\">get asyncValidator(): AsyncValidatorFn|null</a>\n  <a class=\"code-anchor\" href=\"api/forms/NgModel#viewToModelUpdate\">viewToModelUpdate(newValue: any): void</a>\n}\n</code-example>\n</section>\n\n  \n<section class=\"how-to-use\">\n  <h2 id=\"how-to-use\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/NgModel#how-to-use\"><i class=\"material-icons\">link</i></a>How To Use</h2>\n  <p>This directive can be used by itself or as part of a larger form. All you need is the\n<code>ngModel</code> selector to activate it.</p>\n<p>It accepts a domain model as an optional <a href=\"api/core/Input\"><code><a href=\"api/core/Input\">Input</a></code></a>. If you have a one-way binding\nto <code>ngModel</code> with <code>[]</code> syntax, changing the value of the domain model in the component\nclass will set the value in the view. If you have a two-way binding with <code>[()]</code> syntax\n(also known as 'banana-box syntax'), the value in the UI will always be synced back to\nthe domain model in your class as well.</p>\n<p>If you wish to inspect the properties of the associated <a href=\"api/forms/FormControl\"><code><a href=\"api/forms/FormControl\">FormControl</a></code></a> (like\nvalidity state), you can also export the directive into a local template variable using\n<code>ngModel</code> as the key (ex: <code>#myVar=\"ngModel\"</code>). You can then access the control using the\ndirective's <code>control</code> property, but most properties you'll need (like <code>valid</code> and <code>dirty</code>)\nwill fall through to the control anyway, so you can access them directly. You can see a\nfull list of properties directly available in <a href=\"api/forms/AbstractControlDirective\"><code><a href=\"api/forms/AbstractControlDirective\">AbstractControlDirective</a></code></a>.</p>\n<p>The following is an example of a simple standalone control using <code>ngModel</code>:</p>\n<code-example>\nimport {Component} from '@angular/core';\n\n@Component({\n  selector: 'example-app',\n  template: `\n    &#x3C;input [(ngModel)]=\"name\" #ctrl=\"ngModel\" required>\n\n    &#x3C;p>Value: {{ name }}&#x3C;/p>\n    &#x3C;p>Valid: {{ ctrl.valid }}&#x3C;/p>\n    \n    &#x3C;button (click)=\"setValue()\">Set value&#x3C;/button>\n  `,\n})\nexport class SimpleNgModelComp {\n  name: string = '';\n\n  setValue() { this.name = 'Nancy'; }\n}\n\n</code-example>\n<p>When using the <code>ngModel</code> within <code>&#x3C;form></code> tags, you'll also need to supply a <code>name</code> attribute\nso that the control can be registered with the parent form under that name.</p>\n<p>It's worth noting that in the context of a parent form, you often can skip one-way or\ntwo-way binding because the parent form will sync the value for you. You can access\nits properties by exporting it into a local template variable using <code>ngForm</code> (ex:\n<code>#f=\"ngForm\"</code>). Then you can pass it where it needs to go on submit.</p>\n<p>If you do need to populate initial values into your form, using a one-way binding for\n<code>ngModel</code> tends to be sufficient as long as you use the exported form's value rather\nthan the domain model's value on submit.</p>\n<p>Take a look at an example of using <code>ngModel</code> within a form:</p>\n<code-example>\nimport {Component} from '@angular/core';\nimport {NgForm} from '@angular/forms';\n\n@Component({\n  selector: 'example-app',\n  template: `\n    &#x3C;form #f=\"ngForm\" (ngSubmit)=\"onSubmit(f)\" novalidate>\n      &#x3C;input name=\"first\" ngModel required #first=\"ngModel\">\n      &#x3C;input name=\"last\" ngModel>\n      &#x3C;button>Submit&#x3C;/button>\n    &#x3C;/form>\n    \n    &#x3C;p>First name value: {{ first.value }}&#x3C;/p>\n    &#x3C;p>First name valid: {{ first.valid }}&#x3C;/p>\n    &#x3C;p>Form value: {{ f.value | json }}&#x3C;/p>\n    &#x3C;p>Form valid: {{ f.valid }}&#x3C;/p>\n  `,\n})\nexport class SimpleFormComp {\n  onSubmit(f: NgForm) {\n    console.log(f.value);  // { first: '', last: '' }\n    console.log(f.valid);  // false\n  }\n}\n\n</code-example>\n<p>To see <code>ngModel</code> examples with different form control types, see:</p>\n<ul>\n<li>Radio buttons: <a href=\"api/forms/RadioControlValueAccessor\"><code><a href=\"api/forms/RadioControlValueAccessor\">RadioControlValueAccessor</a></code></a></li>\n<li>Selects: <a href=\"api/forms/SelectControlValueAccessor\"><code><a href=\"api/forms/SelectControlValueAccessor\">SelectControlValueAccessor</a></code></a></li>\n</ul>\n<p><strong>npm package</strong>: <code>@angular/forms</code></p>\n<p><strong>NgModule</strong>: <code><a href=\"api/forms/FormsModule\">FormsModule</a></code></p>\n\n</section>\n\n\n  \n\n<section class=\"selectors\">\n  <h2 id=\"selectors\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/NgModel#selectors\"><i class=\"material-icons\">link</i></a>Selectors</h2>\n  \n  <div class=\"selector\">\n    <code>[ngModel]:not([formControlName]):not([formControl])</code>\n  </div>\n  \n</section>\n\n\n  \n<section class=\"inputs\">\n  <h2 id=\"inputs\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/NgModel#inputs\"><i class=\"material-icons\">link</i></a>Inputs</h2>\n  \n  <div class=\"input\">\n    <code>name</code> bound to <code>NgModel.name</code>\n    \n  </div>\n  \n  <div class=\"input\">\n    <code>disabled</code> bound to <code>NgModel.isDisabled</code>\n    \n  </div>\n  \n  <div class=\"input\">\n    <code>ngModel</code> bound to <code>NgModel.model</code>\n    \n  </div>\n  \n  <div class=\"input\">\n    <code>ngModelOptions</code> bound to <code>NgModel.options</code>\n    \n  </div>\n  \n</section>\n\n  \n<section class=\"outputs\">\n  <h2 id=\"outputs\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/NgModel#outputs\"><i class=\"material-icons\">link</i></a>Outputs</h2>\n  \n  <div class=\"output\">\n    <code>ngModelChange</code> bound to <code>NgModel.update</code>\n    \n  </div>\n  \n</section>\n\n  \n<section class=\"export-as\">\n  <h2 id=\"exported-as\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/NgModel#exported-as\"><i class=\"material-icons\">link</i></a>Exported as</h2>\n  <div>\n    <code>ngModel</code>\n  </div>\n</section>\n\n\n\n\n\n\n\n\n<section class=\"constructor\">\n  <a id=\"constructor\"></a>\n  <h2 id=\"constructor\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/NgModel#constructor\"><i class=\"material-icons\">link</i></a>Constructor</h2>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">constructor(parent: ControlContainer, validators: Array&#x3C;Validator|ValidatorFn>, asyncValidators: Array&#x3C;AsyncValidator|AsyncValidatorFn>, valueAccessors: ControlValueAccessor[])</code-example>\n  \n</section>\n\n\n\n\n<section class=\"instance-members\">\n  <h2 id=\"members\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/NgModel#members\"><i class=\"material-icons\">link</i></a>Members</h2>\n  \n    <div class=\"instance-member\">\n  <a id=\"viewModel\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">viewModel: any</code-example></div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"name\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">name: string</code-example></div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"isDisabled\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">isDisabled: boolean</code-example></div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"model\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">model: any</code-example></div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"options\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">options: {name?: string, standalone?: boolean}</code-example></div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"update\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">update: new EventEmitter()</code-example></div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"ngOnChanges\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">ngOnChanges(changes: SimpleChanges)</code-example></div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"ngOnDestroy\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">ngOnDestroy(): void</code-example></div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"control\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">get control(): FormControl</code-example></div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"path\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">get path(): string[]</code-example></div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"formDirective\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">get formDirective(): any</code-example></div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"validator\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">get validator(): ValidatorFn|null</code-example></div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"asyncValidator\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">get asyncValidator(): AsyncValidatorFn|null</code-example></div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"viewToModelUpdate\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">viewToModelUpdate(newValue: any): void</code-example></div>\n\n    \n    \n  \n</section>\n\n\n\n<section class=\"annotations\">\n  <h2 id=\"annotations\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/NgModel#annotations\"><i class=\"material-icons\">link</i></a>Annotations</h2>\n    <code-example hidecopy=\"true\" class=\"no-box api-heading\">@Directive({\n  selector: '[ngModel]:not([formControlName]):not([formControl])',\n  providers: [formControlBinding],\n  exportAs: 'ngModel'\n})</code-example>\n    \n  \n</section>\n\n\n\n\n\n\n</section></article>"
}