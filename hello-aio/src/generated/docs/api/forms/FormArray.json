{
  "id": "api/forms/FormArray",
  "title": "FormArray",
  "contents": "<article>\n  <header class=\"api-header\">\n    <h1 class=\"no-toc\" id=\"formarray\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/FormArray#formarray\"><i class=\"material-icons\">link</i></a>FormArray</h1>\n    <label class=\"api-type-label class\">class</label>\n    \n    \n    \n    <span class=\"version\"></span>\n  </header>\n\n  \n  <!-- INFO BAR -->\n<section class=\"info-bar\">\n\n<table class=\"is-full-width\">\n<tbody>\n<tr>\n  <th>npm Package</th>\n  <td><a href=\"https://www.npmjs.com/package/@angular/forms\">@angular/forms</a></td>\n</tr>\n<tr>\n  <th>Module</th>\n  <td><code>import { FormArray } from <a href=\"api/forms\">@angular/forms</a>;</code></td>\n</tr>\n<tr>\n  <th>Source</th>\n  <td><a href=\"https://github.com/angular/angular/tree/4.3.0-rc.0/packages/forms/src/model.ts#L1088-L1366\">forms/src/model.ts</a></td>\n</tr>\n\n</tbody>\n</table>\n\n  \n<div class=\"what-it-does info-banner\">\n  <p>Tracks the value and validity state of an array of <a href=\"api/forms/FormControl\"><code><a href=\"api/forms/FormControl\">FormControl</a></code></a>,\n<a href=\"api/forms/FormGroup\"><code><a href=\"api/forms/FormGroup\">FormGroup</a></code></a> or <a href=\"api/forms/FormArray\"><code><a href=\"api/forms/FormArray\">FormArray</a></code></a> instances.</p>\n<p>A <code><a href=\"api/forms/FormArray\">FormArray</a></code> aggregates the values of each child <a href=\"api/forms/FormControl\"><code><a href=\"api/forms/FormControl\">FormControl</a></code></a> into an array.\nIt calculates its status by reducing the statuses of its children. For example, if one of\nthe controls in a <code><a href=\"api/forms/FormArray\">FormArray</a></code> is invalid, the entire array becomes invalid.</p>\n<p><code><a href=\"api/forms/FormArray\">FormArray</a></code> is one of the three fundamental building blocks used to define forms in Angular,\nalong with <a href=\"api/forms/FormControl\"><code><a href=\"api/forms/FormControl\">FormControl</a></code></a> and <a href=\"api/forms/FormGroup\"><code><a href=\"api/forms/FormGroup\">FormGroup</a></code></a>.</p>\n\n</div>\n\n  \n  \n  <section class=\"class-overview\">\n<h2 id=\"overview\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/FormArray#overview\"><i class=\"material-icons\">link</i></a>Overview</h2>\n<code-example language=\"ts\" hidecopy=\"true\">\nclass FormArray extends AbstractControl {\n  <a class=\"code-anchor\" href=\"api/forms/FormArray#controls\">controls: AbstractControl[]</a>\n  <a class=\"code-anchor\" href=\"api/forms/FormArray#at\">at(index: number): AbstractControl</a>\n  <a class=\"code-anchor\" href=\"api/forms/FormArray#push\">push(control: AbstractControl): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/FormArray#insert\">insert(index: number, control: AbstractControl): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/FormArray#removeAt\">removeAt(index: number): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/FormArray#setControl\">setControl(index: number, control: AbstractControl): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/FormArray#length\">get length(): number</a>\n  <a class=\"code-anchor\" href=\"api/forms/FormArray#setValue\">setValue(value: any[], options: {onlySelf?: boolean, emitEvent?: boolean}): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/FormArray#patchValue\">patchValue(value: any[], options: {onlySelf?: boolean, emitEvent?: boolean}): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/FormArray#reset\">reset(value: any, options: {onlySelf?: boolean, emitEvent?: boolean}): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/FormArray#getRawValue\">getRawValue(): any[]</a>\n}\n</code-example>\n</section>\n\n  \n<section class=\"how-to-use\">\n  <h2 id=\"how-to-use\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/FormArray#how-to-use\"><i class=\"material-icons\">link</i></a>How To Use</h2>\n  <p>When instantiating a <a href=\"api/forms/FormArray\"><code><a href=\"api/forms/FormArray\">FormArray</a></code></a>, pass in an array of child controls as the first\nargument.</p>\n<h3 id=\"example\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/FormArray#example\"><i class=\"material-icons\">link</i></a>Example</h3>\n<code-example>\nconst arr = new FormArray([\n  new FormControl('Nancy', Validators.minLength(2)),\n  new FormControl('Drew'),\n]);\n\nconsole.log(arr.value);   // ['Nancy', 'Drew']\nconsole.log(arr.status);  // 'VALID'\n</code-example>\n<p>You can also include array-level validators as the second arg, or array-level async\nvalidators as the third arg. These come in handy when you want to perform validation\nthat considers the value of more than one child control.</p>\n<h3 id=\"adding-or-removing-controls\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/FormArray#adding-or-removing-controls\"><i class=\"material-icons\">link</i></a>Adding or removing controls</h3>\n<p>To change the controls in the array, use the <code>push</code>, <code>insert</code>, or <code>removeAt</code> methods\nin <code><a href=\"api/forms/FormArray\">FormArray</a></code> itself. These methods ensure the controls are properly tracked in the\nform's hierarchy. Do not modify the array of <code><a href=\"api/forms/AbstractControl\">AbstractControl</a></code>s used to instantiate\nthe <code><a href=\"api/forms/FormArray\">FormArray</a></code> directly, as that will result in strange and unexpected behavior such\nas broken change detection.</p>\n<ul>\n<li><strong>npm package</strong>: <code>@angular/forms</code></li>\n</ul>\n\n</section>\n\n\n  \n\n\n\n\n\n\n<section class=\"constructor\">\n  <a id=\"constructor\"></a>\n  <h2 id=\"constructor\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/FormArray#constructor\"><i class=\"material-icons\">link</i></a>Constructor</h2>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">constructor(controls: AbstractControl[], validator?: ValidatorFn|null, asyncValidator?: AsyncValidatorFn|null)</code-example>\n  \n</section>\n\n\n\n\n<section class=\"instance-members\">\n  <h2 id=\"members\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/FormArray#members\"><i class=\"material-icons\">link</i></a>Members</h2>\n  \n    <div class=\"instance-member\">\n  <a id=\"controls\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">controls: AbstractControl[]</code-example></div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"at\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">at(index: number): AbstractControl</code-example>\n  <p>Get the <a href=\"api/forms/AbstractControl\"><code><a href=\"api/forms/AbstractControl\">AbstractControl</a></code></a> at the given <code>index</code> in the array.</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"push\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">push(control: AbstractControl): void</code-example>\n  <p>Insert a new <a href=\"api/forms/AbstractControl\"><code><a href=\"api/forms/AbstractControl\">AbstractControl</a></code></a> at the end of the array.</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"insert\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">insert(index: number, control: AbstractControl): void</code-example>\n  <p>Insert a new <a href=\"api/forms/AbstractControl\"><code><a href=\"api/forms/AbstractControl\">AbstractControl</a></code></a> at the given <code>index</code> in the array.</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"removeAt\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">removeAt(index: number): void</code-example>\n  <p>Remove the control at the given <code>index</code> in the array.</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"setControl\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">setControl(index: number, control: AbstractControl): void</code-example>\n  <p>Replace an existing control.</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"length\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">get length(): number</code-example>\n  <p>Length of the control array.</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"setValue\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">setValue(value: any[], options: {onlySelf?: boolean, emitEvent?: boolean}): void</code-example>\n  <p>Sets the value of the <a href=\"api/forms/FormArray\"><code><a href=\"api/forms/FormArray\">FormArray</a></code></a>. It accepts an array that matches\nthe structure of the control.</p>\n<p>This method performs strict checks, so it will throw an error if you try\nto set the value of a control that doesn't exist or if you exclude the\nvalue of a control.</p>\n<h3 id=\"example-1\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/FormArray#example-1\"><i class=\"material-icons\">link</i></a>Example</h3>\n<code-example>\nconst arr = new FormArray([\n   new FormControl(),\n   new FormControl()\n]);\nconsole.log(arr.value);   // [null, null]\n\narr.setValue(['Nancy', 'Drew']);\nconsole.log(arr.value);   // ['Nancy', 'Drew']\n</code-example>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"patchValue\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">patchValue(value: any[], options: {onlySelf?: boolean, emitEvent?: boolean}): void</code-example>\n  <p>Patches the value of the <a href=\"api/forms/FormArray\"><code><a href=\"api/forms/FormArray\">FormArray</a></code></a>. It accepts an array that matches the\nstructure of the control, and will do its best to match the values to the correct\ncontrols in the group.</p>\n<p> It accepts both super-sets and sub-sets of the array without throwing an error.</p>\n<h3 id=\"example-2\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/FormArray#example-2\"><i class=\"material-icons\">link</i></a>Example</h3>\n<code-example>\nconst arr = new FormArray([\n   new FormControl(),\n   new FormControl()\n]);\nconsole.log(arr.value);   // [null, null]\n\narr.patchValue(['Nancy']);\nconsole.log(arr.value);   // ['Nancy', null]\n</code-example>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"reset\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">reset(value: any, options: {onlySelf?: boolean, emitEvent?: boolean}): void</code-example>\n  <p>Resets the <a href=\"api/forms/FormArray\"><code><a href=\"api/forms/FormArray\">FormArray</a></code></a>. This means by default:</p>\n<ul>\n<li>The array and all descendants are marked <code>pristine</code></li>\n<li>The array and all descendants are marked <code>untouched</code></li>\n<li>The value of all descendants will be null or null maps</li>\n</ul>\n<p>You can also reset to a specific form state by passing in an array of states\nthat matches the structure of the control. The state can be a standalone value\nor a form state object with both a value and a disabled status.</p>\n<h3 id=\"example-3\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/FormArray#example-3\"><i class=\"material-icons\">link</i></a>Example</h3>\n<code-example language=\"ts\">\nthis.arr.reset(['name', 'last name']);\n\nconsole.log(this.arr.value);  // ['name', 'last name']\n</code-example>\n<ul>\n<li>OR -</li>\n</ul>\n<code-example>\nthis.arr.reset([\n  {value: 'name', disabled: true},\n  'last'\n]);\n\nconsole.log(this.arr.value);  // ['name', 'last name']\nconsole.log(this.arr.get(0).status);  // 'DISABLED'\n</code-example>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"getRawValue\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">getRawValue(): any[]</code-example>\n  <p>The aggregate value of the array, including any disabled controls.</p>\n<p>If you'd like to include all values regardless of disabled status, use this method.\nOtherwise, the <code>value</code> property is the best way to get the value of the array.</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n</section>\n\n\n\n\n\n\n\n\n</section></article>"
}