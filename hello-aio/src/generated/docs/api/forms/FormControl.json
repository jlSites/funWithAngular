{
  "id": "api/forms/FormControl",
  "title": "FormControl",
  "contents": "<article>\n  <header class=\"api-header\">\n    <h1 class=\"no-toc\" id=\"formcontrol\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/FormControl#formcontrol\"><i class=\"material-icons\">link</i></a>FormControl</h1>\n    <label class=\"api-type-label class\">class</label>\n    \n    \n    \n    <span class=\"version\"></span>\n  </header>\n\n  \n  <!-- INFO BAR -->\n<section class=\"info-bar\">\n\n<table class=\"is-full-width\">\n<tbody>\n<tr>\n  <th>npm Package</th>\n  <td><a href=\"https://www.npmjs.com/package/@angular/forms\">@angular/forms</a></td>\n</tr>\n<tr>\n  <th>Module</th>\n  <td><code>import { FormControl } from <a href=\"api/forms\">@angular/forms</a>;</code></td>\n</tr>\n<tr>\n  <th>Source</th>\n  <td><a href=\"https://github.com/angular/angular/tree/4.3.0-rc.0/packages/forms/src/model.ts#L587-L776\">forms/src/model.ts</a></td>\n</tr>\n\n</tbody>\n</table>\n\n  \n<div class=\"what-it-does info-banner\">\n  <p>Tracks the value and validation status of an individual form control.</p>\n<p>It is one of the three fundamental building blocks of Angular forms, along with\n<a href=\"api/forms/FormGroup\"><code><a href=\"api/forms/FormGroup\">FormGroup</a></code></a> and <a href=\"api/forms/FormArray\"><code><a href=\"api/forms/FormArray\">FormArray</a></code></a>.</p>\n\n</div>\n\n  \n  \n  <section class=\"class-overview\">\n<h2 id=\"overview\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/FormControl#overview\"><i class=\"material-icons\">link</i></a>Overview</h2>\n<code-example language=\"ts\" hidecopy=\"true\">\nclass FormControl extends AbstractControl {\n  <a class=\"code-anchor\" href=\"api/forms/FormControl#setValue\">setValue(value: any, options: {...}): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/FormControl#patchValue\">patchValue(value: any, options: {...}): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/FormControl#reset\">reset(formState: any, options: {onlySelf?: boolean, emitEvent?: boolean}): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/FormControl#registerOnChange\">registerOnChange(fn: Function): void</a>\n  <a class=\"code-anchor\" href=\"api/forms/FormControl#registerOnDisabledChange\">registerOnDisabledChange(fn: (isDisabled: boolean) => void): void</a>\n}\n</code-example>\n</section>\n\n  \n<section class=\"how-to-use\">\n  <h2 id=\"how-to-use\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/FormControl#how-to-use\"><i class=\"material-icons\">link</i></a>How To Use</h2>\n  <p>When instantiating a <a href=\"api/forms/FormControl\"><code><a href=\"api/forms/FormControl\">FormControl</a></code></a>, you can pass in an initial value as the\nfirst argument. Example:</p>\n<code-example language=\"ts\">\nconst ctrl = new FormControl('some value');\nconsole.log(ctrl.value);     // 'some value'\n</code-example>\n<p>You can also initialize the control with a form state object on instantiation,\nwhich includes both the value and whether or not the control is disabled.\nYou can't use the value key without the disabled key; both are required\nto use this way of initialization.</p>\n<code-example language=\"ts\">\nconst ctrl = new FormControl({value: 'n/a', disabled: true});\nconsole.log(ctrl.value);     // 'n/a'\nconsole.log(ctrl.status);   // 'DISABLED'\n</code-example>\n<p>To include a sync validator (or an array of sync validators) with the control,\npass it in as the second argument. Async validators are also supported, but\nhave to be passed in separately as the third arg.</p>\n<code-example language=\"ts\">\nconst ctrl = new FormControl('', Validators.required);\nconsole.log(ctrl.value);     // ''\nconsole.log(ctrl.status);   // 'INVALID'\n</code-example>\n<p>See its superclass, <a href=\"api/forms/AbstractControl\"><code><a href=\"api/forms/AbstractControl\">AbstractControl</a></code></a>, for more properties and methods.</p>\n<ul>\n<li><strong>npm package</strong>: <code>@angular/forms</code></li>\n</ul>\n\n</section>\n\n\n  \n\n\n\n\n\n\n<section class=\"constructor\">\n  <a id=\"constructor\"></a>\n  <h2 id=\"constructor\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/FormControl#constructor\"><i class=\"material-icons\">link</i></a>Constructor</h2>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">constructor(formState: any, validator?: ValidatorFn|ValidatorFn[]|null, asyncValidator?: AsyncValidatorFn|AsyncValidatorFn[]|null)</code-example>\n  \n</section>\n\n\n\n\n<section class=\"instance-members\">\n  <h2 id=\"members\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/forms/FormControl#members\"><i class=\"material-icons\">link</i></a>Members</h2>\n  \n    <div class=\"instance-member\">\n  <a id=\"setValue\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">setValue(value: any, options: {\n    onlySelf?: boolean,\n    emitEvent?: boolean,\n    emitModelToViewChange?: boolean,\n    emitViewToModelChange?: boolean\n  }): void</code-example>\n  <p>Set the value of the form control to <code>value</code>.</p>\n<p>If <code>onlySelf</code> is <code>true</code>, this change will only affect the validation of this <code><a href=\"api/forms/FormControl\">FormControl</a></code>\nand not its parent component. This defaults to false.</p>\n<p>If <code>emitEvent</code> is <code>true</code>, this\nchange will cause a <code>valueChanges</code> event on the <code><a href=\"api/forms/FormControl\">FormControl</a></code> to be emitted. This defaults\nto true (as it falls through to <code>updateValueAndValidity</code>).</p>\n<p>If <code>emitModelToViewChange</code> is <code>true</code>, the view will be notified about the new value\nvia an <code>onChange</code> event. This is the default behavior if <code>emitModelToViewChange</code> is not\nspecified.</p>\n<p>If <code>emitViewToModelChange</code> is <code>true</code>, an ngModelChange event will be fired to update the\nmodel.  This is the default behavior if <code>emitViewToModelChange</code> is not specified.</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"patchValue\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">patchValue(value: any, options: {\n    onlySelf?: boolean,\n    emitEvent?: boolean,\n    emitModelToViewChange?: boolean,\n    emitViewToModelChange?: boolean\n  }): void</code-example>\n  <p>Patches the value of a control.</p>\n<p>This function is functionally the same as <a href=\"api/forms/FormControl#setValue\"><code><a href=\"api/forms/FormControl\">FormControl</a></code></a> at this level.\nIt exists for symmetry with <a href=\"api/forms/FormGroup#patchValue\"><code><a href=\"api/forms/FormGroup\">FormGroup</a></code></a> on <code>FormGroups</code> and <code>FormArrays</code>,\nwhere it does behave differently.</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"reset\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">reset(formState: any, options: {onlySelf?: boolean, emitEvent?: boolean}): void</code-example>\n  <p>Resets the form control. This means by default:</p>\n<ul>\n<li>it is marked as <code>pristine</code></li>\n<li>it is marked as <code>untouched</code></li>\n<li>value is set to null</li>\n</ul>\n<p>You can also reset to a specific form state by passing through a standalone\nvalue or a form state object that contains both a value and a disabled state\n(these are the only two properties that cannot be calculated).</p>\n<p>Ex:</p>\n<code-example language=\"ts\">\nthis.control.reset('Nancy');\n\nconsole.log(this.control.value);  // 'Nancy'\n</code-example>\n<p>OR</p>\n<code-example>\nthis.control.reset({value: 'Nancy', disabled: true});\n\nconsole.log(this.control.value);  // 'Nancy'\nconsole.log(this.control.status);  // 'DISABLED'\n</code-example>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"registerOnChange\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">registerOnChange(fn: Function): void</code-example>\n  <p>Register a listener for change events.</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"registerOnDisabledChange\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">registerOnDisabledChange(fn: (isDisabled: boolean) => void): void</code-example>\n  <p>Register a listener for disabled events.</p>\n\n  </div>\n\n    \n    <hr class=\"hr-margin\">\n  \n</section>\n\n\n\n\n\n\n\n\n</section></article>"
}