{
  "id": "api/common/AsyncPipe",
  "title": "AsyncPipe",
  "contents": "<article>\n  <header class=\"api-header\">\n    <h1 class=\"no-toc\" id=\"asyncpipe\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/AsyncPipe#asyncpipe\"><i class=\"material-icons\">link</i></a>AsyncPipe</h1>\n    <label class=\"api-type-label pipe\">pipe</label>\n    \n    \n    \n    <span class=\"version\"></span>\n  </header>\n\n  \n  <!-- INFO BAR -->\n<section class=\"info-bar\">\n\n<table class=\"is-full-width\">\n<tbody>\n<tr>\n  <th>npm Package</th>\n  <td><a href=\"https://www.npmjs.com/package/@angular/common\">@angular/common</a></td>\n</tr>\n<tr>\n  <th>Module</th>\n  <td><code>import { AsyncPipe } from <a href=\"api/common\">@angular/common</a>;</code></td>\n</tr>\n<tr>\n  <th>Source</th>\n  <td><a href=\"https://github.com/angular/angular/tree/4.3.0-rc.0/packages/common/src/pipes/async_pipe.ts#L43-L145\">common/src/pipes/async_pipe.ts</a></td>\n</tr>\n\n<tr>\n  <th>NgModule</th>\n  <td><a href=\"api/common/CommonModule\"><code><a href=\"api/common/CommonModule\">CommonModule</a></code></a></td>\n</tr>\n\n</tbody>\n</table>\n\n  \n<div class=\"what-it-does info-banner\">\n  <p>Unwraps a value from an asynchronous primitive.</p>\n\n</div>\n\n  \n  \n  \n  \n<section class=\"how-to-use\">\n  <h2 id=\"how-to-use\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/AsyncPipe#how-to-use\"><i class=\"material-icons\">link</i></a>How To Use</h2>\n  <p><code>observable_or_promise_expression | async</code></p>\n\n</section>\n\n\n  \n\n<section class=\"description\">\n  <h2 id=\"description\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/AsyncPipe#description\"><i class=\"material-icons\">link</i></a>Description</h2>\n  <p>The <code><a href=\"api/core/testing/async\">async</a></code> pipe subscribes to an <code>Observable</code> or <code>Promise</code> and returns the latest value it has\nemitted. When a new value is emitted, the <code><a href=\"api/core/testing/async\">async</a></code> pipe marks the component to be checked for\nchanges. When the component gets destroyed, the <code><a href=\"api/core/testing/async\">async</a></code> pipe unsubscribes automatically to avoid\npotential memory leaks.</p>\n<h2 id=\"examples\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/AsyncPipe#examples\"><i class=\"material-icons\">link</i></a>Examples</h2>\n<p>This example binds a <code>Promise</code> to the view. Clicking the <code><a href=\"api/router/Resolve\">Resolve</a></code> button resolves the\npromise.</p>\n<code-example>\n@Component({\n  selector: 'async-promise-pipe',\n  template: `&#x3C;div>\n    &#x3C;code>promise|async&#x3C;/code>: \n    &#x3C;button (click)=\"clicked()\">{{ arrived ? 'Reset' : 'Resolve' }}&#x3C;/button>\n    &#x3C;span>Wait for it... {{ greeting | async }}&#x3C;/span>\n  &#x3C;/div>`\n})\nexport class AsyncPromisePipeComponent {\n  greeting: Promise&#x3C;string>|null = null;\n  arrived: boolean = false;\n\n  private resolve: Function|null = null;\n\n  constructor() { this.reset(); }\n\n  reset() {\n    this.arrived = false;\n    this.greeting = new Promise&#x3C;string>((resolve, reject) => { this.resolve = resolve; });\n  }\n\n  clicked() {\n    if (this.arrived) {\n      this.reset();\n    } else {\n      this.resolve !('hi there!');\n      this.arrived = true;\n    }\n  }\n}\n\n</code-example>\n<p>It's also possible to use <code><a href=\"api/core/testing/async\">async</a></code> with Observables. The example below binds the <code>time</code> Observable\nto the view. The Observable continuously updates the view with the current time.</p>\n<code-example>\n@Component({\n  selector: 'async-observable-pipe',\n  template: '&#x3C;div>&#x3C;code>observable|async&#x3C;/code>: Time: {{ time | async }}&#x3C;/div>'\n})\nexport class AsyncObservablePipeComponent {\n  time = new Observable&#x3C;string>((observer: Subscriber&#x3C;string>) => {\n    setInterval(() => observer.next(new Date().toString()), 1000);\n  });\n}\n\n</code-example>\n\n</section>\n\n\n\n\n</section></article>"
}