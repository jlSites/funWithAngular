{
  "id": "api/common/http/HttpInterceptor",
  "title": "HttpInterceptor",
  "contents": "<article>\n  <header class=\"api-header\">\n    <h1 class=\"no-toc\" id=\"httpinterceptor\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/http/HttpInterceptor#httpinterceptor\"><i class=\"material-icons\">link</i></a>HttpInterceptor</h1>\n    <label class=\"api-type-label interface\">interface</label>\n    \n    \n    \n    <span class=\"version\"></span>\n  </header>\n\n  \n  <!-- INFO BAR -->\n<section class=\"info-bar\">\n\n<table class=\"is-full-width\">\n<tbody>\n<tr>\n  <th>npm Package</th>\n  <td><a href=\"https://www.npmjs.com/package/@angular/common\">@angular/common</a></td>\n</tr>\n<tr>\n  <th>Module</th>\n  <td><code>import { HttpInterceptor } from <a href=\"api/common/http\">@angular/common/http</a>;</code></td>\n</tr>\n<tr>\n  <th>Source</th>\n  <td><a href=\"https://github.com/angular/angular/tree/4.3.0-rc.0/packages/common/http/src/interceptor.ts#L15-L45\">common/http/src/interceptor.ts</a></td>\n</tr>\n\n</tbody>\n</table>\n\n  \n  \n  \n  <section class=\"interface-overview\">\n<h2 id=\"interface-overview\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/http/HttpInterceptor#interface-overview\"><i class=\"material-icons\">link</i></a>Interface Overview</h2>\n<code-example language=\"ts\" hidecopy=\"true\">\ninterface HttpInterceptor { \n  <a class=\"code-anchor\" href=\"api/common/http/HttpInterceptor#intercept\">intercept(req: HttpRequest&#x3C;any>, next: HttpHandler): Observable&#x3C;HttpEvent&#x3C;any>></a>\n}\n</code-example>\n</section>\n  \n\n  \n  \n<section class=\"description\">\n  <h2 id=\"description\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/http/HttpInterceptor#description\"><i class=\"material-icons\">link</i></a>Description</h2>\n  <p>Intercepts <code><a href=\"api/common/http/HttpRequest\">HttpRequest</a></code> and handles them.</p>\n<p>Most interceptors will transform the outgoing request before passing it to the\nnext interceptor in the chain, by calling <code>next.handle(transformedReq)</code>.</p>\n<p>In rare cases, interceptors may wish to completely handle a request themselves,\nand not delegate to the remainder of the chain. This behavior is allowed.</p>\n\n</section>\n\n  \n\n<section class=\"instance-members\">\n  <h2 id=\"members\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/http/HttpInterceptor#members\"><i class=\"material-icons\">link</i></a>Members</h2>\n  \n    <div class=\"instance-member\">\n  <a id=\"intercept\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">intercept(req: HttpRequest&#x3C;any>, next: HttpHandler): Observable&#x3C;HttpEvent&#x3C;any>></code-example>\n  <p>Intercept an outgoing <code><a href=\"api/common/http/HttpRequest\">HttpRequest</a></code> and optionally transform it or the\nresponse.</p>\n<p>Typically an interceptor will transform the outgoing request before returning\n<code>next.handle(transformedReq)</code>. An interceptor may choose to transform the\nresponse event stream as well, by applying additional Rx operators on the stream\nreturned by <code>next.handle()</code>.</p>\n<p>More rarely, an interceptor may choose to completely handle the request itself,\nand compose a new event stream instead of invoking <code>next.handle()</code>. This is\nacceptable behavior, but keep in mind further interceptors will be skipped entirely.</p>\n<p>It is also rare but valid for an interceptor to return multiple responses on the\nevent stream for a single request.</p>\n\n  </div>\n\n    \n    \n  \n</section>\n\n\n\n\n\n</section></article>"
}