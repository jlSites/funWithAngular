{
  "id": "api/common/NgComponentOutlet",
  "title": "NgComponentOutlet",
  "contents": "<article>\n  <header class=\"api-header\">\n    <h1 class=\"no-toc\" id=\"ngcomponentoutlet\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgComponentOutlet#ngcomponentoutlet\"><i class=\"material-icons\">link</i></a>NgComponentOutlet</h1>\n    <label class=\"api-type-label directive\">directive</label>\n    \n    \n    \n    <span class=\"version\"></span>\n  </header>\n\n  \n  <!-- INFO BAR -->\n<section class=\"info-bar\">\n\n<table class=\"is-full-width\">\n<tbody>\n<tr>\n  <th>npm Package</th>\n  <td><a href=\"https://www.npmjs.com/package/@angular/common\">@angular/common</a></td>\n</tr>\n<tr>\n  <th>Module</th>\n  <td><code>import { NgComponentOutlet } from <a href=\"api/common\">@angular/common</a>;</code></td>\n</tr>\n<tr>\n  <th>Source</th>\n  <td><a href=\"https://github.com/angular/angular/tree/4.3.0-rc.0/packages/common/src/directives/ng_component_outlet.ts#L10-L111\">common/src/directives/ng_component_outlet.ts</a></td>\n</tr>\n\n</tbody>\n</table>\n\n  \n  \n  \n  <section class=\"directive-overview\">\n  <h2 id=\"overview\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgComponentOutlet#overview\"><i class=\"material-icons\">link</i></a>Overview</h2>\n<code-example language=\"ts\" hidecopy=\"true\">\n<a href=\"api/common/NgComponentOutlet#annotations\">@Directive({selector: '[ngComponentOutlet]'})</a>\nclass NgComponentOutlet implements OnChanges, OnDestroy {\n  <a class=\"code-anchor\" href=\"api/common/NgComponentOutlet#ngComponentOutlet\">ngComponentOutlet: Type&#x3C;any></a>\n  <a class=\"code-anchor\" href=\"api/common/NgComponentOutlet#ngComponentOutletInjector\">ngComponentOutletInjector: Injector</a>\n  <a class=\"code-anchor\" href=\"api/common/NgComponentOutlet#ngComponentOutletContent\">ngComponentOutletContent: any[][]</a>\n  <a class=\"code-anchor\" href=\"api/common/NgComponentOutlet#ngComponentOutletNgModuleFactory\">ngComponentOutletNgModuleFactory: NgModuleFactory&#x3C;any></a>\n  <a class=\"code-anchor\" href=\"api/common/NgComponentOutlet#ngOnChanges\">ngOnChanges(changes: SimpleChanges)</a>\n  <a class=\"code-anchor\" href=\"api/common/NgComponentOutlet#ngOnDestroy\">ngOnDestroy()</a>\n}\n</code-example>\n</section>\n\n  \n\n  \n\n<section class=\"selectors\">\n  <h2 id=\"selectors\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgComponentOutlet#selectors\"><i class=\"material-icons\">link</i></a>Selectors</h2>\n  \n  <div class=\"selector\">\n    <code>[ngComponentOutlet]</code>\n  </div>\n  \n</section>\n\n\n  \n<section class=\"inputs\">\n  <h2 id=\"inputs\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgComponentOutlet#inputs\"><i class=\"material-icons\">link</i></a>Inputs</h2>\n  \n  <div class=\"input\">\n    <code>ngComponentOutlet</code> bound to <code>NgComponentOutlet.ngComponentOutlet</code>\n    \n  </div>\n  \n  <div class=\"input\">\n    <code>ngComponentOutletInjector</code> bound to <code>NgComponentOutlet.ngComponentOutletInjector</code>\n    \n  </div>\n  \n  <div class=\"input\">\n    <code>ngComponentOutletContent</code> bound to <code>NgComponentOutlet.ngComponentOutletContent</code>\n    \n  </div>\n  \n  <div class=\"input\">\n    <code>ngComponentOutletNgModuleFactory</code> bound to <code>NgComponentOutlet.ngComponentOutletNgModuleFactory</code>\n    \n  </div>\n  \n</section>\n\n  \n  \n\n\n\n<section class=\"description\">\n  <h2 id=\"description\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgComponentOutlet#description\"><i class=\"material-icons\">link</i></a>Description</h2>\n  <p>Instantiates a single <a href=\"api/core/Component\"><code><a href=\"api/core/Component\">Component</a></code></a> type and inserts its Host View into current View.\n<code><a href=\"api/common/NgComponentOutlet\">NgComponentOutlet</a></code> provides a declarative approach for dynamic component creation.</p>\n<p><code><a href=\"api/common/NgComponentOutlet\">NgComponentOutlet</a></code> requires a component type, if a falsy value is set the view will clear and\nany existing component will get destroyed.</p>\n<h3 id=\"fine-tune-control\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgComponentOutlet#fine-tune-control\"><i class=\"material-icons\">link</i></a>Fine tune control</h3>\n<p>You can control the component creation process by using the following optional attributes:</p>\n<ul>\n<li>\n<p><code>ngComponentOutletInjector</code>: Optional custom <a href=\"api/core/Injector\"><code><a href=\"api/core/Injector\">Injector</a></code></a> that will be used as parent for\nthe Component. Defaults to the injector of the current view container.</p>\n</li>\n<li>\n<p><code>ngComponentOutletContent</code>: Optional list of projectable nodes to insert into the content\nsection of the component, if exists.</p>\n</li>\n<li>\n<p><code>ngComponentOutletNgModuleFactory</code>: Optional module factory to allow dynamically loading other\nmodule, then load a component from that module.</p>\n</li>\n</ul>\n<h3 id=\"syntax\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgComponentOutlet#syntax\"><i class=\"material-icons\">link</i></a>Syntax</h3>\n<p>Simple</p>\n<code-example>\n&#x3C;ng-container *ngComponentOutlet=\"componentTypeExpression\">&#x3C;/ng-container>\n</code-example>\n<p>Customized injector/content</p>\n<code-example>\n&#x3C;ng-container *ngComponentOutlet=\"componentTypeExpression;\n                                  injector: injectorExpression;\n                                  content: contentNodesExpression;\">\n&#x3C;/ng-container>\n</code-example>\n<p>Customized ngModuleFactory</p>\n<code-example>\n&#x3C;ng-container *ngComponentOutlet=\"componentTypeExpression;\n                                  ngModuleFactory: moduleFactory;\">\n&#x3C;/ng-container>\n</code-example>\n<h2 id=\"example\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgComponentOutlet#example\"><i class=\"material-icons\">link</i></a>Example</h2>\n<code-example>\n@Component({selector: 'hello-world', template: 'Hello World!'})\nclass HelloWorld {\n}\n\n@Component({\n  selector: 'ng-component-outlet-simple-example',\n  template: `&#x3C;ng-container *ngComponentOutlet=\"HelloWorld\">&#x3C;/ng-container>`\n})\nclass NgTemplateOutletSimpleExample {\n  // This field is necessary to expose HelloWorld to the template.\n  HelloWorld = HelloWorld;\n}\n\n</code-example>\n<p>A more complete example with additional options:</p>\n<code-example>\n@Injectable()\nclass Greeter {\n  suffix = '!';\n}\n\n@Component({\n  selector: 'complete-component',\n  template: `Complete: &#x3C;ng-content>&#x3C;/ng-content> &#x3C;ng-content>&#x3C;/ng-content>{{ greeter.suffix }}`\n})\nclass CompleteComponent {\n  constructor(public greeter: Greeter) {}\n}\n\n@Component({\n  selector: 'ng-component-outlet-complete-example',\n  template: `\n    &#x3C;ng-container *ngComponentOutlet=\"CompleteComponent; \n                                      injector: myInjector; \n                                      content: myContent\">&#x3C;/ng-container>`\n})\nclass NgTemplateOutletCompleteExample {\n  // This field is necessary to expose CompleteComponent to the template.\n  CompleteComponent = CompleteComponent;\n  myInjector: Injector;\n\n  myContent = [[document.createTextNode('Ahoj')], [document.createTextNode('Svet')]];\n\n  constructor(injector: Injector) {\n    this.myInjector = ReflectiveInjector.resolveAndCreate([Greeter], injector);\n  }\n}\n\n</code-example>\n<p>A more complete example with ngModuleFactory:</p>\n<code-example>\n@Component({selector: 'other-module-component', template: `Other Module Component!`})\nclass OtherModuleComponent {\n}\n\n@Component({\n  selector: 'ng-component-outlet-other-module-example',\n  template: `\n    &#x3C;ng-container *ngComponentOutlet=\"OtherModuleComponent;\n                                      ngModuleFactory: myModule;\">&#x3C;/ng-container>`\n})\nclass NgTemplateOutletOtherModuleExample {\n  // This field is necessary to expose OtherModuleComponent to the template.\n  OtherModuleComponent = OtherModuleComponent;\n  myModule: NgModuleFactory&#x3C;any>;\n\n  constructor(compiler: Compiler) { this.myModule = compiler.compileModuleSync(OtherModule); }\n}\n\n</code-example>\n\n</section>\n\n\n\n\n\n<section class=\"constructor\">\n  <a id=\"constructor\"></a>\n  <h2 id=\"constructor\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgComponentOutlet#constructor\"><i class=\"material-icons\">link</i></a>Constructor</h2>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">constructor(_viewContainerRef: ViewContainerRef)</code-example>\n  \n</section>\n\n\n\n\n<section class=\"instance-members\">\n  <h2 id=\"members\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgComponentOutlet#members\"><i class=\"material-icons\">link</i></a>Members</h2>\n  \n    <div class=\"instance-member\">\n  <a id=\"ngComponentOutlet\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">ngComponentOutlet: Type&#x3C;any></code-example></div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"ngComponentOutletInjector\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">ngComponentOutletInjector: Injector</code-example></div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"ngComponentOutletContent\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">ngComponentOutletContent: any[][]</code-example></div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"ngComponentOutletNgModuleFactory\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">ngComponentOutletNgModuleFactory: NgModuleFactory&#x3C;any></code-example></div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"ngOnChanges\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">ngOnChanges(changes: SimpleChanges)</code-example></div>\n\n    \n    <hr class=\"hr-margin\">\n  \n    <div class=\"instance-member\">\n  <a id=\"ngOnDestroy\"></a>\n  <code-example hidecopy=\"true\" class=\"no-box api-heading\">ngOnDestroy()</code-example></div>\n\n    \n    \n  \n</section>\n\n\n\n<section class=\"annotations\">\n  <h2 id=\"annotations\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"api/common/NgComponentOutlet#annotations\"><i class=\"material-icons\">link</i></a>Annotations</h2>\n    <code-example hidecopy=\"true\" class=\"no-box api-heading\">@Directive({selector: '[ngComponentOutlet]'})</code-example>\n    \n  \n</section>\n\n\n\n\n\n\n</section></article>"
}