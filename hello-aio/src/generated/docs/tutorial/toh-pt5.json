{
  "id": "tutorial/toh-pt5",
  "title": "Routing",
  "contents": "<h1 id=\"routing\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#routing\"><i class=\"material-icons\">link</i></a>Routing</h1>\n\n<div class=\"content\">\n<p>There are new requirements for the Tour of Heroes app:</p>\n<ul>\n<li>Add a <em>Dashboard</em> view.</li>\n<li>Add the ability to navigate between the <em>Heroes</em> and <em>Dashboard</em> views.</li>\n<li>When users click a hero name in either view, navigate to a detail view of the selected hero.</li>\n<li>When users click a <em>deep link</em> in an email, open the detail view for a particular hero.</li>\n</ul>\n<p>When you’re done, users will be able to navigate the app like this:</p>\n<figure>\n  <img src=\"generated/images/guide/toh/nav-diagram.png\" alt=\"View navigations\" width=\"506\" height=\"433\">\n</figure>\n<p>To satisfy these requirements, you'll add Angular’s router to the app.</p>\n<div class=\"l-sub-section\">\n<p>For more information about the router, read the <a href=\"guide/router\">Routing and Navigation</a> page.</p>\n</div>\n<p>When you're done with this page, the app should look like this <live-example></live-example>.</p>\n<h2 id=\"where-you-left-off\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#where-you-left-off\"><i class=\"material-icons\">link</i></a>Where you left off</h2>\n<p>Before continuing with the Tour of Heroes, verify that you have the following structure.</p>\n<div class=\"filetree\">\n  <div class=\"file\">\n    angular-tour-of-heroes\n  </div>\n  <div class=\"children\">\n    <div class=\"file\">\n      src\n    </div>\n    <div class=\"children\">\n      <div class=\"file\">\n        app\n      </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          app.component.ts\n        </div>\n        <div class=\"file\">\n          app.module.ts\n        </div>\n        <div class=\"file\">\n          hero.service.ts\n        </div>\n        <div class=\"file\">\n          hero.ts\n        </div>\n        <div class=\"file\">\n          hero-detail.component.ts\n        </div>\n        <div class=\"file\">\n          mock-heroes.ts\n        </div>\n      </div>\n      <div class=\"file\">\n        main.ts\n      </div>\n      <div class=\"file\">\n        index.html\n      </div>\n      <div class=\"file\">\n        styles.css\n      </div>\n      <div class=\"file\">\n        systemjs.config.js\n      </div>\n      <div class=\"file\">\n        tsconfig.json\n      </div>\n    </div>\n    <div class=\"file\">\n      node_modules ...\n    </div>\n    <div class=\"file\">\n      package.json\n    </div>\n  </div>\n</div>\n<h2 id=\"keep-the-app-transpiling-and-running\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#keep-the-app-transpiling-and-running\"><i class=\"material-icons\">link</i></a>Keep the app transpiling and running</h2>\n<p>Enter the following command in the terminal window:</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  npm start\n\n</code-example>\n<p>This command runs the TypeScript compiler in \"watch mode\", recompiling automatically when the code changes.\nThe command simultaneously launches the app in a browser and refreshes the browser when the code changes.</p>\n<p>You can keep building the Tour of Heroes without pausing to recompile or refresh the browser.</p>\n<h2 id=\"action-plan\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#action-plan\"><i class=\"material-icons\">link</i></a>Action plan</h2>\n<p>Here's the plan:</p>\n<ul>\n<li>Turn <code>AppComponent</code> into an application shell that only handles navigation.</li>\n<li>Relocate the <em>Heroes</em> concerns within the current <code>AppComponent</code> to a separate <code>HeroesComponent</code>.</li>\n<li>Add routing.</li>\n<li>Create a new <code>DashboardComponent</code>.</li>\n<li>Tie the <em>Dashboard</em> into the navigation structure.</li>\n</ul>\n<div class=\"l-sub-section\">\n<p><em>Routing</em> is another name for <em>navigation</em>. The router is the mechanism for navigating from view to view.</p>\n</div>\n<h2 id=\"splitting-the-appcomponent\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#splitting-the-appcomponent\"><i class=\"material-icons\">link</i></a>Splitting the <em>AppComponent</em></h2>\n<p>The current app loads <code>AppComponent</code> and immediately displays the list of heroes.</p>\n<p>The revised app should present a shell with a choice of views (<em>Dashboard</em> and <em>Heroes</em>)\nand then default to one of them.</p>\n<p>The <code>AppComponent</code> should only handle navigation, so you'll\nmove the display of <em>Heroes</em> out of <code>AppComponent</code> and into its own <code>HeroesComponent</code>.</p>\n<h3 id=\"heroescomponent\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#heroescomponent\"><i class=\"material-icons\">link</i></a><em>HeroesComponent</em></h3>\n<p><code>AppComponent</code> is already dedicated to <em>Heroes</em>.\nInstead of moving the code out of <code>AppComponent</code>, rename it to <code>HeroesComponent</code>\nand create a separate <code>AppComponent</code> shell.</p>\n<p>Do the following:</p>\n<ul>\n<li>Rename the <code>app.component.ts</code> file to <code>heroes.component.ts</code>.</li>\n<li>Rename the <code>AppComponent</code> class as <code>HeroesComponent</code> (rename locally, <em>only</em> in this file).</li>\n<li>Rename the selector <code>my-app</code> as <code>my-heroes</code>.</li>\n</ul>\n<code-example path=\"toh-pt5/src/app/heroes.component.ts\" region=\"renaming\" title=\"src/app/heroes.component.ts (showing renamings only)\">\n@Component({\n  selector: 'my-heroes',\n})\nexport class HeroesComponent implements OnInit {\n}\n\n\n</code-example>\n<h3 id=\"create-appcomponent\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#create-appcomponent\"><i class=\"material-icons\">link</i></a>Create <em>AppComponent</em></h3>\n<p>The new <code>AppComponent</code> is the application shell.\nIt will have some navigation links at the top and a display area below.</p>\n<p>Perform these steps:</p>\n<ul>\n<li>\n<p>Create the file <code>src/app/app.component.ts</code>.</p>\n</li>\n<li>\n<p>Define an exported <code>AppComponent</code> class.</p>\n</li>\n<li>\n<p>Add an <code>@Component</code> decorator above the class with a <code>my-app</code> selector.</p>\n</li>\n<li>\n<p>Move the following from <code>HeroesComponent</code> to <code>AppComponent</code>:</p>\n<ul>\n<li><code>title</code> class property.</li>\n<li><code>@Component</code> template <code>&#x3C;h1></code> element, which contains a binding to  <code>title</code>.</li>\n</ul>\n</li>\n<li>\n<p>Add a <code>&#x3C;my-heroes></code> element to the app template just below the heading so you still see the heroes.</p>\n</li>\n<li>\n<p>Add <code>HeroesComponent</code> to the <code>declarations</code> array of <code>AppModule</code> so Angular recognizes the <code>&#x3C;my-heroes></code> tags.</p>\n</li>\n<li>\n<p>Add <code>HeroService</code> to the  <code>providers</code> array of <code>AppModule</code> because you'll need it in every other view.</p>\n</li>\n<li>\n<p>Remove <code>HeroService</code> from the <code>HeroesComponent</code> <code>providers</code> array since it was promoted.</p>\n</li>\n<li>\n<p>Add the supporting <code>import</code> statements for <code>AppComponent</code>.</p>\n</li>\n</ul>\n<p>The first draft looks like this:</p>\n<code-tabs>\n\n  <code-pane title=\"src/app/app.component.ts (v1)\" path=\"toh-pt5/src/app/app.component.1.ts\">\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'my-app',\n  template: `\n    &#x3C;h1>{{title}}&#x3C;/h1>\n    &#x3C;my-heroes>&#x3C;/my-heroes>\n  `\n})\nexport class AppComponent {\n  title = 'Tour of Heroes';\n}\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/app.module.ts (v1)\" path=\"toh-pt5/src/app/app.module.1.ts\">\nimport { NgModule }       from '@angular/core';\nimport { BrowserModule }  from '@angular/platform-browser';\nimport { FormsModule }    from '@angular/forms';\n\nimport { AppComponent }        from './app.component';\nimport { HeroDetailComponent } from './hero-detail.component';\nimport { HeroesComponent }     from './heroes.component';\nimport { HeroService }         from './hero.service';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    FormsModule\n  ],\n  declarations: [\n    AppComponent,\n    HeroDetailComponent,\n    HeroesComponent\n  ],\n  providers: [\n    HeroService\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule {\n}\n\n</code-pane>\n\n</code-tabs>\n<p>The app still runs and displays heroes.</p>\n<h2 id=\"add-routing\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#add-routing\"><i class=\"material-icons\">link</i></a>Add routing</h2>\n<p>Instead of displaying automatically, heroes should display after users click a button.\nIn other words, users should be able to navigate to the list of heroes.</p>\n<p>Use the Angular router to enable navigation.</p>\n<p>The Angular router is an external, optional Angular NgModule called <code><a href=\"api/router/RouterModule\">RouterModule</a></code>.\nThe router is a combination of multiple provided services (<code><a href=\"api/router/RouterModule\">RouterModule</a></code>),\nmultiple directives (<code>RouterOutlet, RouterLink, RouterLinkActive</code>),\nand a configuration (<code><a href=\"api/router/Routes\">Routes</a></code>). You'll configure the routes first.</p>\n<h3 id=\"base-href\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#base-href\"><i class=\"material-icons\">link</i></a><em>&#x3C;base href></em></h3>\n<p>Open <code>index.html</code> and ensure there is a <code>&#x3C;base href=\"...\"></code> element\n(or a script that dynamically sets this element)\nat the top of the <code>&#x3C;head></code> section.</p>\n<code-example path=\"toh-pt5/src/index.html\" region=\"base-href\" title=\"src/index.html (base-href)\">\n&#x3C;head>\n  &#x3C;base href=\"/\">\n\n</code-example>\n<div class=\"callout is-important\">\n<header>\n  base href is essential\n</header>\n<p>For more information, see the <a href=\"guide/router\">Set the base href</a>\nsection of the <a href=\"guide/router\">Routing and Navigation</a> page.</p>\n</div>\n<a id=\"configure-routes\"></a>\n<h3 id=\"configure-routes\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#configure-routes\"><i class=\"material-icons\">link</i></a>Configure routes</h3>\n<p>Create a configuration file for the app routes.</p>\n<p><em>Routes</em> tell the router which views to display when a user clicks a link or\npastes a URL into the browser address bar.</p>\n<p>Define the first route as a route to the heroes component.</p>\n<code-example path=\"toh-pt5/src/app/app.module.2.ts\" region=\"heroes\" title=\"src/app/app.module.ts (heroes route)\">\nimport { RouterModule }   from '@angular/router';\n\nRouterModule.forRoot([\n  {\n    path: 'heroes',\n    component: HeroesComponent\n  }\n])\n\n</code-example>\n<p>The <code><a href=\"api/router/Routes\">Routes</a></code> are an array of <em>route definitions</em>.</p>\n<p>This route definition has the following parts:</p>\n<ul>\n<li><em>Path</em>: The router matches this route's path to the URL in the browser address bar (<code>heroes</code>).</li>\n<li><em>Component</em>: The component that the router should create when navigating to this route (<code>HeroesComponent</code>).</li>\n</ul>\n<div class=\"l-sub-section\">\n<p>Read more about defining routes with <code><a href=\"api/router/Routes\">Routes</a></code> in the <a href=\"guide/router\">Routing &#x26; Navigation</a> page.</p>\n</div>\n<h3 id=\"make-the-router-available\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#make-the-router-available\"><i class=\"material-icons\">link</i></a>Make the router available</h3>\n<p>Import the <code><a href=\"api/router/RouterModule\">RouterModule</a></code> and add it to the <code>AppModule</code> imports array.</p>\n<code-example path=\"toh-pt5/src/app/app.module.2.ts\" title=\"src/app/app.module.ts (app routing)\">\nimport { NgModule }       from '@angular/core';\nimport { BrowserModule }  from '@angular/platform-browser';\nimport { FormsModule }    from '@angular/forms';\nimport { RouterModule }   from '@angular/router';\n\nimport { AppComponent }        from './app.component';\nimport { HeroDetailComponent } from './hero-detail.component';\nimport { HeroesComponent }     from './heroes.component';\nimport { HeroService }         from './hero.service';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    FormsModule,\n    RouterModule.forRoot([\n      {\n        path: 'heroes',\n        component: HeroesComponent\n      }\n    ])\n  ],\n  declarations: [\n    AppComponent,\n    HeroDetailComponent,\n    HeroesComponent\n  ],\n  providers: [\n    HeroService\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule {\n}\n\n</code-example>\n<div class=\"l-sub-section\">\n<p>The <code>forRoot()</code> method is called because a configured router is provided at the app's root.\nThe <code>forRoot()</code> method supplies the Router service providers and directives needed for routing, and\nperforms the initial navigation based on the current browser URL.</p>\n</div>\n<h3 id=\"router-outlet\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#router-outlet\"><i class=\"material-icons\">link</i></a>Router outlet</h3>\n<p>If you paste the path, <code>/heroes</code>, into the browser address bar at the end of the URL,\nthe router should match it to the <code>heroes</code> route and display the <code>HeroesComponent</code>.\nHowever, you have to tell the router where to display the component.\nTo do this, you can add a <code>&#x3C;router-outlet></code> element at the end of the template.\n<code><a href=\"api/router/RouterOutlet\">RouterOutlet</a></code> is one of the directives provided by the <code><a href=\"api/router/RouterModule\">RouterModule</a></code>.\nThe router displays each component immediately below the <code>&#x3C;router-outlet></code> as users navigate through the app.</p>\n<h3 id=\"router-links\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#router-links\"><i class=\"material-icons\">link</i></a>Router links</h3>\n<p>Users shouldn't have to paste a route URL into the address bar.\nInstead, add an anchor tag to the template that, when clicked, triggers navigation to the <code>HeroesComponent</code>.</p>\n<p>The revised template looks like this:</p>\n<code-example path=\"toh-pt5/src/app/app.component.1.ts\" region=\"template-v2\" title=\"src/app/app.component.ts (template-v2)\">\ntemplate: `\n   &#x3C;h1>{{title}}&#x3C;/h1>\n   &#x3C;a routerLink=\"/heroes\">Heroes&#x3C;/a>\n   &#x3C;router-outlet>&#x3C;/router-outlet>\n `\n\n</code-example>\n<p>Note the <code>routerLink</code> binding in the anchor tag.\nThe <code><a href=\"api/router/RouterLink\">RouterLink</a></code> directive (another of the <code><a href=\"api/router/RouterModule\">RouterModule</a></code> directives) is bound to a string\nthat tells the router where to navigate when the user clicks the link.</p>\n<p>Since the link is not dynamic, a routing instruction is defined with a one-time binding to the route path.\nLooking back at the route configuration, you can confirm that <code>'/heroes'</code> is the path of the route to the <code>HeroesComponent</code>.</p>\n<div class=\"l-sub-section\">\n<p>Read more about dynamic router links and the link parameters array\nin the <a href=\"guide/router#link-parameters-array\">Appendix: Link Parameters Array</a> section of the\n<a href=\"guide/router\">Routing &#x26; Navigation</a> page.</p>\n</div>\n<p>Refresh the browser. The browser displays the app title and heroes link, but not the heroes list.</p>\n<div class=\"l-sub-section\">\n<p>The browser's address bar shows <code>/</code>.\nThe route path to <code>HeroesComponent</code> is <code>/heroes</code>, not <code>/</code>.\nSoon you'll add a route that matches the path <code>/</code>.</p>\n</div>\n<p>Click the <em>Heroes</em> navigation link. The address bar updates to <code>/heroes</code>\nand the list of heroes displays.</p>\n<p><code>AppComponent</code> now looks like this:</p>\n<code-example path=\"toh-pt5/src/app/app.component.1.ts\" region=\"v2\" title=\"src/app/app.component.ts (v2)\">\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'my-app',\n  template: `\n     &#x3C;h1>{{title}}&#x3C;/h1>\n     &#x3C;a routerLink=\"/heroes\">Heroes&#x3C;/a>\n     &#x3C;router-outlet>&#x3C;/router-outlet>\n   `\n})\nexport class AppComponent {\n  title = 'Tour of Heroes';\n}\n\n\n</code-example>\n<p>The  <em>AppComponent</em> is now attached to a router and displays routed views.\nFor this reason, and to distinguish it from other kinds of components,\nthis component type is called a <em>router component</em>.</p>\n<h2 id=\"add-a-dashboard\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#add-a-dashboard\"><i class=\"material-icons\">link</i></a>Add a dashboard</h2>\n<p>Routing only makes sense when multiple views exist.\nTo add another view, create a placeholder <code>DashboardComponent</code>, which users can navigate to and from.</p>\n<code-example path=\"toh-pt5/src/app/dashboard.component.1.ts\" title=\"src/app/dashboard.component.ts (v1)\">\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'my-dashboard',\n  template: '&#x3C;h3>My Dashboard&#x3C;/h3>'\n})\nexport class DashboardComponent { }\n\n\n</code-example>\n<p>You'll make this component more useful later.</p>\n<h3 id=\"configure-the-dashboard-route\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#configure-the-dashboard-route\"><i class=\"material-icons\">link</i></a>Configure the dashboard route</h3>\n<p>To teach <code>app.module.ts</code> to navigate to the dashboard,\nimport the dashboard component and\nadd the following route definition to the <code><a href=\"api/router/Routes\">Routes</a></code> array of definitions.</p>\n<code-example path=\"toh-pt5/src/app/app.module.3.ts\" region=\"dashboard\" title=\"src/app/app.module.ts (Dashboard route)\">\n{\n  path: 'dashboard',\n  component: DashboardComponent\n},\n\n</code-example>\n<p>Also import and add <code>DashboardComponent</code> to the <code>AppModule</code>'s <code>declarations</code>.</p>\n<code-example path=\"toh-pt5/src/app/app.module.ts\" region=\"dashboard\" title=\"src/app/app.module.ts (dashboard)\">\ndeclarations: [\n  AppComponent,\n  DashboardComponent,\n  HeroDetailComponent,\n  HeroesComponent\n],\n\n</code-example>\n<h3 id=\"add-a-redirect-route\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#add-a-redirect-route\"><i class=\"material-icons\">link</i></a>Add a redirect route</h3>\n<p>Currently, the browser launches with <code>/</code> in the address bar.\nWhen the app starts, it should show the dashboard and\ndisplay a <code>/dashboard</code> URL in the browser address bar.</p>\n<p>To make this happen, use a redirect route. Add the following\nto the array of route definitions:</p>\n<code-example path=\"toh-pt5/src/app/app.module.3.ts\" region=\"redirect\" title=\"src/app/app.module.ts (redirect)\">\n{\n  path: '',\n  redirectTo: '/dashboard',\n  pathMatch: 'full'\n},\n\n</code-example>\n<div class=\"l-sub-section\">\n<p>Read more about <em>redirects</em> in the <a href=\"guide/router\">Redirecting routes</a> section\nof the <a href=\"guide/router\">Routing &#x26; Navigation</a> page.</p>\n</div>\n<h3 id=\"add-navigation-to-the-template\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#add-navigation-to-the-template\"><i class=\"material-icons\">link</i></a>Add navigation to the template</h3>\n<p>Add a dashboard navigation link to the template, just above the <em>Heroes</em> link.</p>\n<code-example path=\"toh-pt5/src/app/app.component.1.ts\" region=\"template-v3\" title=\"src/app/app.component.ts (template-v3)\">\ntemplate: `\n   &#x3C;h1>{{title}}&#x3C;/h1>\n   &#x3C;nav>\n     &#x3C;a routerLink=\"/dashboard\">Dashboard&#x3C;/a>\n     &#x3C;a routerLink=\"/heroes\">Heroes&#x3C;/a>\n   &#x3C;/nav>\n   &#x3C;router-outlet>&#x3C;/router-outlet>\n `\n\n</code-example>\n<div class=\"l-sub-section\">\n<p>The <code>&#x3C;nav></code> tags don't do anything yet, but they'll be useful later when you style the links.</p>\n</div>\n<p>In your browser, go to the application root (<code>/</code>) and reload.\nThe app displays the dashboard and you can navigate between the dashboard and the heroes.</p>\n<h2 id=\"add-heroes-to-the-dashboard\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#add-heroes-to-the-dashboard\"><i class=\"material-icons\">link</i></a>Add heroes to the dashboard</h2>\n<p>To make the dashboard more interesting, you'll display the top four heroes at a glance.</p>\n<p>Replace the <code>template</code> metadata with a <code>templateUrl</code> property that points to a new\ntemplate file.</p>\n<code-example path=\"toh-pt5/src/app/dashboard.component.ts\" region=\"metadata\" title=\"src/app/dashboard.component.ts (metadata)\">\n@Component({\n  selector: 'my-dashboard',\n  templateUrl: './dashboard.component.html',\n})\n\n</code-example>\n<p>Create that file with this content:</p>\n<code-example path=\"toh-pt5/src/app/dashboard.component.1.html\" title=\"src/app/dashboard.component.html\">\n&#x3C;h3>Top Heroes&#x3C;/h3>\n&#x3C;div class=\"grid grid-pad\">\n  &#x3C;div *ngFor=\"let hero of heroes\" class=\"col-1-4\">\n    &#x3C;div class=\"module hero\">\n      &#x3C;h4>{{hero.name}}&#x3C;/h4>\n    &#x3C;/div>\n  &#x3C;/div>\n&#x3C;/div>\n\n\n</code-example>\n<p><code>*ngFor</code> is used again to iterate over a list of heroes and display their names.\nThe extra <code>&#x3C;div></code> elements will help with styling later.</p>\n<h3 id=\"sharing-the-heroservice\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#sharing-the-heroservice\"><i class=\"material-icons\">link</i></a>Sharing the <em>HeroService</em></h3>\n<p>To populate the component's <code>heroes</code> array, you can re-use the <code>HeroService</code>.</p>\n<p>Earlier, you removed the <code>HeroService</code> from the <code>providers</code> array of <code>HeroesComponent</code>\nand added it to the <code>providers</code> array of <code>AppModule</code>.\nThat move created a singleton <code>HeroService</code> instance, available to all components of the app.\nAngular injects <code>HeroService</code> and you can use it in the <code>DashboardComponent</code>.</p>\n<h3 id=\"get-heroes\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#get-heroes\"><i class=\"material-icons\">link</i></a>Get heroes</h3>\n<p>In <code>dashboard.component.ts</code>, add the following <code>import</code> statements.</p>\n<code-example path=\"toh-pt5/src/app/dashboard.component.ts\" region=\"imports\" title=\"src/app/dashboard.component.ts (imports)\">\nimport { Component, OnInit } from '@angular/core';\n\nimport { Hero } from './hero';\nimport { HeroService } from './hero.service';\n\n</code-example>\n<p>Now create the <code>DashboardComponent</code> class like this:</p>\n<code-example path=\"toh-pt5/src/app/dashboard.component.ts\" region=\"class\" title=\"src/app/dashboard.component.ts (class)\">\nexport class DashboardComponent implements OnInit {\n\n  heroes: Hero[] = [];\n\n  constructor(private heroService: HeroService) { }\n\n  ngOnInit(): void {\n    this.heroService.getHeroes()\n      .then(heroes => this.heroes = heroes.slice(1, 5));\n  }\n}\n\n\n</code-example>\n<p>This kind of logic is also used in the <code>HeroesComponent</code>:</p>\n<ul>\n<li>Define a <code>heroes</code> array property.</li>\n<li>Inject the <code>HeroService</code> in the constructor and hold it in a private <code>heroService</code> field.</li>\n<li>Call the service to get heroes inside the Angular <code>ngOnInit()</code> lifecycle hook.</li>\n</ul>\n<p>In this dashboard you specify four heroes (2nd, 3rd, 4th, and 5th) with the <code>Array.slice</code> method.</p>\n<p>Refresh the browser to see four hero names in the new dashboard.</p>\n<h2 id=\"navigating-to-hero-details\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#navigating-to-hero-details\"><i class=\"material-icons\">link</i></a>Navigating to hero details</h2>\n<p>While the details of a selected hero displays at the bottom of the <code>HeroesComponent</code>,\nusers should be able to navigate to the <code>HeroDetailComponent</code> in the following additional ways:</p>\n<ul>\n<li>From the dashboard to a selected hero.</li>\n<li>From the heroes list to a selected hero.</li>\n<li>From a \"deep link\" URL pasted into the browser address bar.</li>\n</ul>\n<h3 id=\"routing-to-a-hero-detail\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#routing-to-a-hero-detail\"><i class=\"material-icons\">link</i></a>Routing to a hero detail</h3>\n<p>You can add a route to the <code>HeroDetailComponent</code> in <code>app.module.ts</code>, where the other routes are configured.</p>\n<p>The new route is unusual in that you must tell the <code>HeroDetailComponent</code> which hero to show.\nYou didn't have to tell the <code>HeroesComponent</code> or the <code>DashboardComponent</code> anything.</p>\n<p>Currently, the parent <code>HeroesComponent</code> sets the component's <code>hero</code> property to a\nhero object with a binding like this:</p>\n<code-example language=\"html\">\n  &#x3C;hero-detail [hero]=\"selectedHero\">&#x3C;/hero-detail>\n\n</code-example>\n<p>But this binding won't work in any of the routing scenarios.</p>\n<h3 id=\"parameterized-route\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#parameterized-route\"><i class=\"material-icons\">link</i></a>Parameterized route</h3>\n<p>You can add the hero's <code>id</code> to the URL. When routing to the hero whose <code>id</code> is 11,\nyou could expect to see a URL such as this:</p>\n<code-example format=\"nocode\">\n  /detail/11\n\n</code-example>\n<p>The <code>/detail/</code> part of the URL is constant. The trailing numeric <code>id</code> changes from hero to hero.\nYou need to represent the variable part of the route with a <em>parameter</em> (or <em>token</em>) that stands for the hero's <code>id</code>.</p>\n<h3 id=\"configure-a-route-with-a-parameter\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#configure-a-route-with-a-parameter\"><i class=\"material-icons\">link</i></a>Configure a route with a parameter</h3>\n<p>Use the following <em>route definition</em>.</p>\n<code-example path=\"toh-pt5/src/app/app.module.3.ts\" region=\"hero-detail\" title=\"src/app/app.module.ts (hero detail)\">\n{\n  path: 'detail/:id',\n  component: HeroDetailComponent\n},\n\n</code-example>\n<p>The colon (:) in the path indicates that <code>:id</code> is a placeholder for a specific hero <code>id</code>\nwhen navigating to the <code>HeroDetailComponent</code>.</p>\n<div class=\"l-sub-section\">\n<p>Be sure to import the hero detail component before creating this route.</p>\n</div>\n<p>You're finished with the app routes.</p>\n<p>You didn't add a <code>'Hero Detail'</code> link to the template because users\ndon't click a navigation <em>link</em> to view a particular hero;\nthey click a <em>hero name</em>, whether the name displays on the dashboard or in the heroes list.</p>\n<p>You don't need to add the hero clicks until the <code>HeroDetailComponent</code>\nis revised and ready to be navigated to.</p>\n<h2 id=\"revise-the-herodetailcomponent\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#revise-the-herodetailcomponent\"><i class=\"material-icons\">link</i></a>Revise the <em>HeroDetailComponent</em></h2>\n<p>Here's what the <code>HeroDetailComponent</code> looks like now:</p>\n<code-example path=\"toh-pt4/src/app/hero-detail.component.ts\" title=\"src/app/hero-detail.component.ts (current)\">\nimport { Component, Input } from '@angular/core';\nimport { Hero } from './hero';\n\n@Component({\n  selector: 'hero-detail',\n  template: `\n    &#x3C;div *ngIf=\"hero\">\n      &#x3C;h2>{{hero.name}} details!&#x3C;/h2>\n      &#x3C;div>\n        &#x3C;label>id: &#x3C;/label>{{hero.id}}\n      &#x3C;/div>\n      &#x3C;div>\n        &#x3C;label>name: &#x3C;/label>\n        &#x3C;input [(ngModel)]=\"hero.name\" placeholder=\"name\"/>\n      &#x3C;/div>\n    &#x3C;/div>\n  `\n})\nexport class HeroDetailComponent {\n  @Input() hero: Hero;\n}\n\n\n</code-example>\n<p>The template won't change. Hero names will display the same way.\nThe major changes are driven by how you get hero names.</p>\n<p>You'll no longer receive the hero in a parent component property binding.\nThe new <code>HeroDetailComponent</code> should take the <code>id</code> parameter from the <code>paramMap</code> Observable\nin the <code><a href=\"api/router/ActivatedRoute\">ActivatedRoute</a></code> service and use the <code>HeroService</code> to fetch the hero with that <code>id</code>.</p>\n<p>Add the following imports:</p>\n<code-example path=\"toh-pt5/src/app/hero-detail.component.1.ts\" region=\"added-imports\" title=\"src/app/hero-detail.component.ts\">\n// Keep the Input import for now, you'll remove it later:\nimport { Component, Input, OnInit } from '@angular/core';\nimport { ActivatedRoute, ParamMap } from '@angular/router';\nimport { Location }                 from '@angular/common';\n\nimport { HeroService } from './hero.service';\n\n</code-example>\n<p>Inject the <code><a href=\"api/router/ActivatedRoute\">ActivatedRoute</a></code>, <code>HeroService</code>, and <code><a href=\"api/common/Location\">Location</a></code> services\ninto the constructor, saving their values in private fields:</p>\n<code-example path=\"toh-pt5/src/app/hero-detail.component.ts\" region=\"ctor\" title=\"src/app/hero-detail.component.ts (constructor)\">\nconstructor(\n  private heroService: HeroService,\n  private route: ActivatedRoute,\n  private location: Location\n) {}\n\n</code-example>\n<p>Import the <code>switchMap</code> operator to use later with the route parameters <code>Observable</code>.</p>\n<code-example path=\"toh-pt5/src/app/hero-detail.component.ts\" region=\"rxjs-import\" title=\"src/app/hero-detail.component.ts (switchMap import)\">\nimport 'rxjs/add/operator/switchMap';\n\n</code-example>\n<p>Tell the class to implement the <code><a href=\"api/core/OnInit\">OnInit</a></code> interface.</p>\n<code-example path=\"toh-pt5/src/app/hero-detail.component.ts\" region=\"implement\" title=\"src/app/hero-detail.component.ts\">\nexport class HeroDetailComponent implements OnInit {\n\n</code-example>\n<p>Inside the <code>ngOnInit()</code> lifecycle hook, use the <code>paramMap</code> Observable to\nextract the <code>id</code> parameter value from the <code><a href=\"api/router/ActivatedRoute\">ActivatedRoute</a></code> service\nand use the <code>HeroService</code> to fetch the hero with that <code>id</code>.</p>\n<code-example path=\"toh-pt5/src/app/hero-detail.component.ts\" region=\"ngOnInit\" title=\"src/app/hero-detail.component.ts\">\nngOnInit(): void {\n  this.route.paramMap\n    .switchMap((params: ParamMap) => this.heroService.getHero(+params.get('id')))\n    .subscribe(hero => this.hero = hero);\n}\n\n</code-example>\n<p>The <code>switchMap</code> operator maps the <code>id</code> in the Observable route parameters\nto a new <code>Observable</code>, the result of the <code>HeroService.getHero()</code> method.</p>\n<p>If a user re-navigates to this component while a <code>getHero</code> request is still processing,\n<code>switchMap</code> cancels the old request and then calls <code>HeroService.getHero()</code> again.</p>\n<p>The hero <code>id</code> is a number. Route parameters are always strings.\nSo the route parameter value is converted to a number with the JavaScript (+) operator.</p>\n<div class=\"l-sub-section\">\n<h3 id=\"do-you-need-to-unsubscribe\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#do-you-need-to-unsubscribe\"><i class=\"material-icons\">link</i></a>Do you need to unsubscribe?</h3>\n<p>As described in the <a href=\"guide/router#activated-route\">ActivatedRoute: the one-stop-shop for route information</a>\nsection of the <a href=\"guide/router\">Routing &#x26; Navigation</a> page,\nthe <code><a href=\"api/router/Router\">Router</a></code> manages the observables it provides and localizes\nthe subscriptions. The subscriptions are cleaned up when the component is destroyed, protecting against\nmemory leaks, so you don't need to unsubscribe from the route <code>paramMap</code> <code>Observable</code>.</p>\n</div>\n<h3 id=\"add-heroservicegethero\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#add-heroservicegethero\"><i class=\"material-icons\">link</i></a>Add <em>HeroService.getHero()</em></h3>\n<p>In the previous code snippet, <code>HeroService</code> doesn't have a <code>getHero()</code> method. To fix this issue,\nopen <code>HeroService</code> and add a <code>getHero()</code> method that filters the heroes list from <code>getHeroes()</code> by <code>id</code>.</p>\n<code-example path=\"toh-pt5/src/app/hero.service.ts\" region=\"getHero\" title=\"src/app/hero.service.ts (getHero)\">\ngetHero(id: number): Promise&#x3C;Hero> {\n  return this.getHeroes()\n             .then(heroes => heroes.find(hero => hero.id === id));\n}\n\n</code-example>\n<h3 id=\"find-the-way-back\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#find-the-way-back\"><i class=\"material-icons\">link</i></a>Find the way back</h3>\n<p>Users have several ways to navigate <em>to</em> the <code>HeroDetailComponent</code>.</p>\n<p>To navigate somewhere else, users can click one of the two links in the <code>AppComponent</code> or click the browser's back button.\nNow add a third option, a <code>goBack()</code> method that navigates backward one step in the browser's history stack\nusing the <code><a href=\"api/common/Location\">Location</a></code> service you injected previously.</p>\n<code-example path=\"toh-pt5/src/app/hero-detail.component.ts\" region=\"goBack\" title=\"src/app/hero-detail.component.ts (goBack)\">\ngoBack(): void {\n  this.location.back();\n}\n\n</code-example>\n<div class=\"l-sub-section\">\n<p>Going back too far could take users out of the app.\nIn a real app, you can prevent this issue with the <em>CanDeactivate</em> guard.\nRead more on the <a href=\"api/router/CanDeactivate\">CanDeactivate</a> page.</p>\n</div>\n<p>You'll wire this method with an event binding to a <em>Back</em> button that you'll add to the component template.</p>\n<code-example path=\"toh-pt5/src/app/hero-detail.component.html\" region=\"back-button\">\n&#x3C;button (click)=\"goBack()\">Back&#x3C;/button>\n\n</code-example>\n<p>Migrate the template to its own file\ncalled <code>hero-detail.component.html</code>:</p>\n<code-example path=\"toh-pt5/src/app/hero-detail.component.html\" title=\"src/app/hero-detail.component.html\">\n&#x3C;div *ngIf=\"hero\">\n  &#x3C;h2>{{hero.name}} details!&#x3C;/h2>\n  &#x3C;div>\n    &#x3C;label>id: &#x3C;/label>{{hero.id}}&#x3C;/div>\n  &#x3C;div>\n    &#x3C;label>name: &#x3C;/label>\n    &#x3C;input [(ngModel)]=\"hero.name\" placeholder=\"name\" />\n  &#x3C;/div>\n  &#x3C;button (click)=\"goBack()\">Back&#x3C;/button>\n&#x3C;/div>\n\n\n</code-example>\n<p>Update the component metadata with a <code>templateUrl</code> pointing to the template file that you just created.</p>\n<code-example path=\"toh-pt5/src/app/hero-detail.component.ts\" region=\"metadata\" title=\"src/app/hero-detail.component.ts (metadata)\">\n@Component({\n  selector: 'hero-detail',\n  templateUrl: './hero-detail.component.html',\n})\n\n</code-example>\n<p>Refresh the browser and see the results.</p>\n<h2 id=\"select-a-dashboard-hero\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#select-a-dashboard-hero\"><i class=\"material-icons\">link</i></a>Select a dashboard hero</h2>\n<p>When a user selects a hero in the dashboard, the app should navigate to the <code>HeroDetailComponent</code> to view and edit the selected hero.</p>\n<p>Although the dashboard heroes are presented as button-like blocks, they should behave like anchor tags.\nWhen hovering over a hero block, the target URL should display in the browser status bar\nand the user should be able to copy the link or open the hero detail view in a new tab.</p>\n<p>To achieve this effect, reopen <code>dashboard.component.html</code> and replace the repeated <code>&#x3C;div *ngFor...></code> tags\nwith <code>&#x3C;a></code> tags. Change the opening <code>&#x3C;a></code> tag to the following:</p>\n<code-example path=\"toh-pt5/src/app/dashboard.component.html\" region=\"click\" title=\"src/app/dashboard.component.html (repeated <a> tag)\">\n&#x3C;a *ngFor=\"let hero of heroes\"  [routerLink]=\"['/detail', hero.id]\"  class=\"col-1-4\">\n\n</code-example>\n<p>Notice the <code>[routerLink]</code> binding.\nAs described in the <a href=\"tutorial/toh-pt5#router-links\">Router links</a> section of this page,\ntop-level navigation in the <code>AppComponent</code> template has router links set to fixed paths of the\ndestination routes, \"/dashboard\" and \"/heroes\".</p>\n<p>This time, you're binding to an expression containing a <em>link parameters array</em>.\nThe array has two elements: the <em>path</em> of\nthe destination route and a <em>route parameter</em> set to the value of the current hero's <code>id</code>.</p>\n<p>The two array items align with the <em>path</em> and <em>:id</em>\ntoken in the parameterized hero detail route definition that you added to\n<code>app.module.ts</code> earlier:</p>\n<code-example path=\"toh-pt5/src/app/app.module.3.ts\" region=\"hero-detail\" title=\"src/app/app.module.ts (hero detail)\">\n{\n  path: 'detail/:id',\n  component: HeroDetailComponent\n},\n\n</code-example>\n<p>Refresh the browser and select a hero from the dashboard; the app navigates to that hero’s details.</p>\n<h2 id=\"refactor-routes-to-a-routing-module\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#refactor-routes-to-a-routing-module\"><i class=\"material-icons\">link</i></a>Refactor routes to a <em>Routing Module</em></h2>\n<p>Almost 20 lines of <code>AppModule</code> are devoted to configuring four routes.\nMost applications have many more routes and they add guard services\nto protect against unwanted or unauthorized navigations.\n(Read more about guard services in the <a href=\"guide/router#guards\">Route Guards</a>\nsection of the <a href=\"guide/router\">Routing &#x26; Navigation</a> page.)\nRouting considerations could quickly dominate this module and obscure its primary purpose, which is to\nestablish key facts about the entire app for the Angular compiler.</p>\n<p>It's a good idea to refactor the routing configuration into its own class.\nThe current <code>RouterModule.forRoot()</code> produces an Angular <code><a href=\"api/core/ModuleWithProviders\">ModuleWithProviders</a></code>,\na class dedicated to routing should be a <em>routing module</em>.\nFor more information, see the <a href=\"guide/router#routing-module\">Milestone #2: The Routing Module</a>\nsection of the <a href=\"guide/router\">Routing &#x26; Navigation</a> page.</p>\n<p>By convention, a routing module name contains the word \"Routing\" and\naligns with the name of the module that declares the components navigated to.</p>\n<p>Create an <code>app-routing.module.ts</code> file as a sibling to <code>app.module.ts</code>.\nGive it the following contents, extracted from the <code>AppModule</code> class:</p>\n<code-example path=\"toh-pt5/src/app/app-routing.module.ts\" title=\"src/app/app-routing.module.ts\">\nimport { NgModule }             from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { DashboardComponent }   from './dashboard.component';\nimport { HeroesComponent }      from './heroes.component';\nimport { HeroDetailComponent }  from './hero-detail.component';\n\nconst routes: Routes = [\n  { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n  { path: 'dashboard',  component: DashboardComponent },\n  { path: 'detail/:id', component: HeroDetailComponent },\n  { path: 'heroes',     component: HeroesComponent }\n];\n\n@NgModule({\n  imports: [ RouterModule.forRoot(routes) ],\n  exports: [ RouterModule ]\n})\nexport class AppRoutingModule {}\n\n\n</code-example>\n<p>The following points are typical of routing modules:</p>\n<ul>\n<li>The Routing Module pulls the routes into a variable. The variable clarifies the\nrouting module pattern in case you export the module in the future.</li>\n<li>The Routing Module adds <code>RouterModule.forRoot(routes)</code> to <code>imports</code>.</li>\n<li>The Routing Module adds <code><a href=\"api/router/RouterModule\">RouterModule</a></code> to <code>exports</code> so that the\ncomponents in the companion module have access to Router declarables,\nsuch as <code><a href=\"api/router/RouterLink\">RouterLink</a></code> and <code><a href=\"api/router/RouterOutlet\">RouterOutlet</a></code>.</li>\n<li>There are no <code>declarations</code>.  Declarations are the responsibility of the companion module.</li>\n<li>If you have guard services, the Routing Module adds module <code>providers</code>. (There are none in this example.)</li>\n</ul>\n<h3 id=\"update-appmodule\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#update-appmodule\"><i class=\"material-icons\">link</i></a>Update <em>AppModule</em></h3>\n<p>Delete the routing configuration from <code>AppModule</code> and import the <code>AppRoutingModule</code>.\nUse an ES2015 <code>import</code> statement <em>and</em> add it to the <code>NgModule.imports</code> list.</p>\n<p>Here is the revised <code>AppModule</code>, compared to its pre-refactor state:</p>\n<code-tabs>\n  <code-pane path=\"toh-pt5/src/app/app.module.ts\" title=\"src/app/app.module.ts (after)\">\nimport { NgModule }       from '@angular/core';\nimport { BrowserModule }  from '@angular/platform-browser';\nimport { FormsModule }    from '@angular/forms';\n\nimport { AppComponent }         from './app.component';\nimport { DashboardComponent }   from './dashboard.component';\nimport { HeroDetailComponent }  from './hero-detail.component';\nimport { HeroesComponent }      from './heroes.component';\nimport { HeroService }          from './hero.service';\n\nimport { AppRoutingModule }     from './app-routing.module';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    FormsModule,\n    AppRoutingModule\n  ],\n  declarations: [\n    AppComponent,\n    DashboardComponent,\n    HeroDetailComponent,\n    HeroesComponent\n  ],\n  providers: [ HeroService ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-pane>\n  <code-pane path=\"toh-pt5/src/app/app.module.3.ts\" title=\"src/app/app.module.ts (before)\">\nimport { NgModule }       from '@angular/core';\nimport { BrowserModule }  from '@angular/platform-browser';\nimport { FormsModule }    from '@angular/forms';\nimport { RouterModule }   from '@angular/router';\n\nimport { AppComponent }        from './app.component';\nimport { HeroDetailComponent } from './hero-detail.component';\nimport { DashboardComponent }  from './dashboard.component';\nimport { HeroesComponent }     from './heroes.component';\nimport { HeroService }         from './hero.service';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    FormsModule,\n    RouterModule.forRoot([\n      {\n        path: '',\n        redirectTo: '/dashboard',\n        pathMatch: 'full'\n      },\n      {\n        path: 'dashboard',\n        component: DashboardComponent\n      },\n      {\n        path: 'detail/:id',\n        component: HeroDetailComponent\n      },\n      {\n        path: 'heroes',\n        component: HeroesComponent\n      }\n    ])\n  ],\n  declarations: [\n    AppComponent,\n    DashboardComponent,\n    HeroDetailComponent,\n    HeroesComponent\n  ],\n  providers: [\n    HeroService\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule {\n}\n\n</code-pane>\n</code-tabs>\n<p>The revised and simplified <code>AppModule</code> is focused on identifying the key pieces of the app.</p>\n<h2 id=\"select-a-hero-in-the-heroescomponent\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#select-a-hero-in-the-heroescomponent\"><i class=\"material-icons\">link</i></a>Select a hero in the <em>HeroesComponent</em></h2>\n<p>In the <code>HeroesComponent</code>,\nthe current template exhibits a \"master/detail\" style with the list of heroes\nat the top and details of the selected hero below.</p>\n<code-example path=\"toh-pt4/src/app/app.component.ts\" region=\"template\" title=\"src/app/heroes.component.ts (current template)\" linenums=\"false\">\ntemplate: `\n  &#x3C;h1>{{title}}&#x3C;/h1>\n  &#x3C;h2>My Heroes&#x3C;/h2>\n  &#x3C;ul class=\"heroes\">\n    &#x3C;li *ngFor=\"let hero of heroes\"\n      [class.selected]=\"hero === selectedHero\"\n      (click)=\"onSelect(hero)\">\n      &#x3C;span class=\"badge\">{{hero.id}}&#x3C;/span> {{hero.name}}\n    &#x3C;/li>\n  &#x3C;/ul>\n  &#x3C;hero-detail [hero]=\"selectedHero\">&#x3C;/hero-detail>\n`,\n\n</code-example>\n<p>Delete the <code>&#x3C;h1></code> at the top.</p>\n<p>Delete the last line of the template with the <code>&#x3C;hero-detail></code> tags.</p>\n<p>You'll no longer show the full <code>HeroDetailComponent</code> here.\nInstead, you'll display the hero detail on its own page and route to it as you did in the dashboard.</p>\n<p>However, when users select a hero from the list, they won't go to the detail page.\nInstead, they'll see a mini detail on <em>this</em> page and have to click a button to navigate to the <em>full detail</em> page.</p>\n<h3 id=\"add-the-mini-detail\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#add-the-mini-detail\"><i class=\"material-icons\">link</i></a>Add the <em>mini detail</em></h3>\n<p>Add the following HTML fragment at the bottom of the template where the <code>&#x3C;hero-detail></code> used to be:</p>\n<code-example path=\"toh-pt5/src/app/heroes.component.html\" region=\"mini-detail\" title=\"src/app/heroes.component.ts\">\n&#x3C;div *ngIf=\"selectedHero\">\n  &#x3C;h2>\n    {{selectedHero.name | uppercase}} is my hero\n  &#x3C;/h2>\n  &#x3C;button (click)=\"gotoDetail()\">View Details&#x3C;/button>\n&#x3C;/div>\n\n\n</code-example>\n<p>After clicking a hero, users should see something like this below the hero list:</p>\n<figure>\n  <img src=\"generated/images/guide/toh/mini-hero-detail.png\" alt=\"Mini Hero Detail\" width=\"210\" height=\"70\">\n</figure>\n<h3 id=\"format-with-the-uppercase-pipe\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#format-with-the-uppercase-pipe\"><i class=\"material-icons\">link</i></a>Format with the uppercase pipe</h3>\n<p>The hero's name is displayed in capital letters because of the <code>uppercase</code> pipe\nthat's included in the interpolation binding, right after the pipe operator ( | ).</p>\n<code-example path=\"toh-pt5/src/app/heroes.component.html\" region=\"pipe\">\n{{selectedHero.name | uppercase}} is my hero\n\n</code-example>\n<p>Pipes are a good way to format strings, currency amounts, dates and other display data.\nAngular ships with several pipes and you can write your own.</p>\n<div class=\"l-sub-section\">\n<p>Read more about pipes on the <a href=\"guide/pipes\">Pipes</a> page.</p>\n</div>\n<h3 id=\"move-content-out-of-the-component-file\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#move-content-out-of-the-component-file\"><i class=\"material-icons\">link</i></a>Move content out of the component file</h3>\n<p>You still have to update the component class to support navigation to the\n<code>HeroDetailComponent</code> when users click the <em>View Details</em> button.</p>\n<p>The component file is big.\nIt's difficult to find the component logic amidst the noise of HTML and CSS.</p>\n<p>Before making any more changes, migrate the template and styles to their own files.</p>\n<p>First, move the template contents from <code>heroes.component.ts</code>\ninto a new <code>heroes.component.html</code> file.\nDon't copy the backticks. As for <code>heroes.component.ts</code>, you'll\ncome back to it in a minute. Next, move the\nstyles contents into a new <code>heroes.component.css</code> file.</p>\n<p>The two new files should look like this:</p>\n<code-tabs>\n\n  <code-pane title=\"src/app/heroes.component.html\" path=\"toh-pt5/src/app/heroes.component.html\">\n&#x3C;h2>My Heroes&#x3C;/h2>\n&#x3C;ul class=\"heroes\">\n  &#x3C;li *ngFor=\"let hero of heroes\"\n    [class.selected]=\"hero === selectedHero\"\n    (click)=\"onSelect(hero)\">\n    &#x3C;span class=\"badge\">{{hero.id}}&#x3C;/span> {{hero.name}}\n  &#x3C;/li>\n&#x3C;/ul>\n&#x3C;div *ngIf=\"selectedHero\">\n  &#x3C;h2>\n    {{selectedHero.name | uppercase}} is my hero\n  &#x3C;/h2>\n  &#x3C;button (click)=\"gotoDetail()\">View Details&#x3C;/button>\n&#x3C;/div>\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/heroes.component.css\" path=\"toh-pt5/src/app/heroes.component.css\">\n.selected {\n  background-color: #CFD8DC !important;\n  color: white;\n}\n.heroes {\n  margin: 0 0 2em 0;\n  list-style-type: none;\n  padding: 0;\n  width: 15em;\n}\n.heroes li {\n  cursor: pointer;\n  position: relative;\n  left: 0;\n  background-color: #EEE;\n  margin: .5em;\n  padding: .3em 0;\n  height: 1.6em;\n  border-radius: 4px;\n}\n.heroes li:hover {\n  color: #607D8B;\n  background-color: #DDD;\n  left: .1em;\n}\n.heroes li.selected:hover {\n  background-color: #BBD8DC !important;\n  color: white;\n}\n.heroes .text {\n  position: relative;\n  top: -3px;\n}\n.heroes .badge {\n  display: inline-block;\n  font-size: small;\n  color: white;\n  padding: 0.8em 0.7em 0 0.7em;\n  background-color: #607D8B;\n  line-height: 1em;\n  position: relative;\n  left: -1px;\n  top: -4px;\n  height: 1.8em;\n  margin-right: .8em;\n  border-radius: 4px 0 0 4px;\n}\nbutton {\n  font-family: Arial;\n  background-color: #eee;\n  border: none;\n  padding: 5px 10px;\n  border-radius: 4px;\n  cursor: pointer;\n  cursor: hand;\n}\nbutton:hover {\n  background-color: #cfd8dc;\n}\n\n\n</code-pane>\n\n</code-tabs>\n<p>Now, back in the component metadata for <code>heroes.component.ts</code>,\ndelete <code>template</code> and <code>styles</code>, replacing them with\n<code>templateUrl</code> and <code>styleUrls</code> respectively.\nSet their properties to refer to the new files.</p>\n<code-example path=\"toh-pt5/src/app/heroes.component.ts\" region=\"metadata\" title=\"src/app/heroes.component.ts (revised metadata)\">\n@Component({\n  selector: 'my-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: [ './heroes.component.css' ]\n})\n\n</code-example>\n<div class=\"l-sub-section\">\n<p>The <code>styleUrls</code> property is an array of style file names (with paths).\nYou could list multiple style files from different locations if you needed them.</p>\n</div>\n<h3 id=\"update-the-heroescomponent-class\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#update-the-heroescomponent-class\"><i class=\"material-icons\">link</i></a>Update the <em>HeroesComponent</em> class</h3>\n<p>The <code>HeroesComponent</code> navigates to the <code>HeroesDetailComponent</code> in response to a button click.\nThe button's click event is bound to a <code>gotoDetail()</code> method that navigates <em>imperatively</em>\nby telling the router where to go.</p>\n<p>This approach requires the following changes to the component class:</p>\n<ol>\n<li>Import the <code><a href=\"api/router/Router\">Router</a></code> from the Angular router library.</li>\n<li>Inject the <code><a href=\"api/router/Router\">Router</a></code> in the constructor, along with the <code>HeroService</code>.</li>\n<li>Implement <code>gotoDetail()</code> by calling the router <code>navigate()</code> method.</li>\n</ol>\n<code-example path=\"toh-pt5/src/app/heroes.component.ts\" region=\"gotoDetail\" title=\"src/app/heroes.component.ts (gotoDetail)\">\ngotoDetail(): void {\n  this.router.navigate(['/detail', this.selectedHero.id]);\n}\n\n</code-example>\n<p>Note that you're passing a two-element <em>link parameters array</em>—a\npath and the route parameter—to\nthe router <code>navigate()</code> method, just as you did in the <code>[routerLink]</code> binding\nback in the <code>DashboardComponent</code>.\nHere's the revised <code>HeroesComponent</code> class:</p>\n<code-example path=\"toh-pt5/src/app/heroes.component.ts\" region=\"class\" title=\"src/app/heroes.component.ts (class)\">\nexport class HeroesComponent implements OnInit {\n  heroes: Hero[];\n  selectedHero: Hero;\n\n  constructor(\n    private router: Router,\n    private heroService: HeroService) { }\n\n  getHeroes(): void {\n    this.heroService.getHeroes().then(heroes => this.heroes = heroes);\n  }\n\n  ngOnInit(): void {\n    this.getHeroes();\n  }\n\n  onSelect(hero: Hero): void {\n    this.selectedHero = hero;\n  }\n\n  gotoDetail(): void {\n    this.router.navigate(['/detail', this.selectedHero.id]);\n  }\n}\n\n\n</code-example>\n<p>Refresh the browser and start clicking.\nUsers can navigate around the app, from the dashboard to hero details and back,\nfrom heroes list to the mini detail to the hero details and back to the heroes again.</p>\n<p>You've met all of the navigational requirements that propelled this page.</p>\n<h2 id=\"style-the-app\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#style-the-app\"><i class=\"material-icons\">link</i></a>Style the app</h2>\n<p>The app is functional but it needs styling.\nThe dashboard heroes should display in a row of rectangles.\nYou've received around 60 lines of CSS for this purpose, including some simple media queries for responsive design.</p>\n<p>As you now know, adding the CSS to the component <code>styles</code> metadata\nwould obscure the component logic.\nInstead, edit the CSS in a separate <code>*.css</code> file.</p>\n<p>Add a <code>dashboard.component.css</code> file to the <code>app</code> folder and reference\nthat file in the component metadata's <code>styleUrls</code> array property like this:</p>\n<code-example path=\"toh-pt5/src/app/dashboard.component.ts\" region=\"css\" title=\"src/app/dashboard.component.ts (styleUrls)\">\nstyleUrls: [ './dashboard.component.css' ]\n\n</code-example>\n<h3 id=\"add-stylish-hero-details\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#add-stylish-hero-details\"><i class=\"material-icons\">link</i></a>Add stylish hero details</h3>\n<p>You've also been provided with CSS styles specifically for the <code>HeroDetailComponent</code>.</p>\n<p>Add a <code>hero-detail.component.css</code> to the <code>app</code>\nfolder and refer to that file inside\nthe <code>styleUrls</code> array as you did for <code>DashboardComponent</code>.\nAlso, in <code>hero-detail.component.ts</code>, remove the <code>hero</code> property <code>@Input</code> decorator\nand its import.</p>\n<p>Here's the content for the component CSS files.</p>\n<code-tabs>\n\n  <code-pane title=\"src/app/hero-detail.component.css\" path=\"toh-pt5/src/app/hero-detail.component.css\">\nlabel {\n  display: inline-block;\n  width: 3em;\n  margin: .5em 0;\n  color: #607D8B;\n  font-weight: bold;\n}\ninput {\n  height: 2em;\n  font-size: 1em;\n  padding-left: .4em;\n}\nbutton {\n  margin-top: 20px;\n  font-family: Arial;\n  background-color: #eee;\n  border: none;\n  padding: 5px 10px;\n  border-radius: 4px;\n  cursor: pointer; cursor: hand;\n}\nbutton:hover {\n  background-color: #cfd8dc;\n}\nbutton:disabled {\n  background-color: #eee;\n  color: #ccc; \n  cursor: auto;\n}\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/dashboard.component.css\" path=\"toh-pt5/src/app/dashboard.component.css\">\n[class*='col-'] {\n  float: left;\n  padding-right: 20px;\n  padding-bottom: 20px;\n}\n[class*='col-']:last-of-type {\n  padding-right: 0;\n}\na {\n  text-decoration: none;\n}\n*, *:after, *:before {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\nh3 {\n  text-align: center; margin-bottom: 0;\n}\nh4 {\n  position: relative;\n}\n.grid {\n  margin: 0;\n}\n.col-1-4 {\n  width: 25%;\n}\n.module {\n  padding: 20px;\n  text-align: center;\n  color: #eee;\n  max-height: 120px;\n  min-width: 120px;\n  background-color: #607D8B;\n  border-radius: 2px;\n}\n.module:hover {\n  background-color: #EEE;\n  cursor: pointer;\n  color: #607d8b;\n}\n.grid-pad {\n  padding: 10px 0;\n}\n.grid-pad > [class*='col-']:last-of-type {\n  padding-right: 20px;\n}\n@media (max-width: 600px) {\n  .module {\n    font-size: 10px;\n    max-height: 75px; }\n}\n@media (max-width: 1024px) {\n  .grid {\n    margin: 0;\n  }\n  .module {\n    min-width: 60px;\n  }\n}\n\n\n</code-pane>\n\n</code-tabs>\n<h3 id=\"style-the-navigation-links\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#style-the-navigation-links\"><i class=\"material-icons\">link</i></a>Style the navigation links</h3>\n<p>The provided CSS makes the navigation links in the <code>AppComponent</code> look more like selectable buttons.\nYou'll surround those links in <code>&#x3C;nav></code> tags.</p>\n<p>Add an <code>app.component.css</code> file to the <code>app</code> folder with the following content.</p>\n<code-example path=\"toh-pt5/src/app/app.component.css\" title=\"src/app/app.component.css (navigation styles)\">\nh1 {\n  font-size: 1.2em;\n  color: #999;\n  margin-bottom: 0;\n}\nh2 {\n  font-size: 2em;\n  margin-top: 0;\n  padding-top: 0;\n}\nnav a {\n  padding: 5px 10px;\n  text-decoration: none;\n  margin-top: 10px;\n  display: inline-block;\n  background-color: #eee;\n  border-radius: 4px;\n}\nnav a:visited, a:link {\n  color: #607D8B;\n}\nnav a:hover {\n  color: #039be5;\n  background-color: #CFD8DC;\n}\nnav a.active {\n  color: #039be5;\n}\n\n\n</code-example>\n<div class=\"l-sub-section\">\n<p><strong>The <em>routerLinkActive</em> directive</strong></p>\n<p>The Angular router provides a <code>routerLinkActive</code> directive you can use to\nadd a class to the HTML navigation element whose route matches the active route.\nAll you have to do is define the style for it.</p>\n</div>\n<code-example path=\"toh-pt5/src/app/app.component.ts\" region=\"template\" title=\"src/app/app.component.ts (active router links)\">\ntemplate: `\n  &#x3C;h1>{{title}}&#x3C;/h1>\n  &#x3C;nav>\n    &#x3C;a routerLink=\"/dashboard\" routerLinkActive=\"active\">Dashboard&#x3C;/a>\n    &#x3C;a routerLink=\"/heroes\" routerLinkActive=\"active\">Heroes&#x3C;/a>\n  &#x3C;/nav>\n  &#x3C;router-outlet>&#x3C;/router-outlet>\n`,\n\n</code-example>\n<p>Add a <code>styleUrls</code> property that refers to this CSS file as follows:</p>\n<code-example path=\"toh-pt5/src/app/app.component.ts\" region=\"styleUrls\" title=\"src/app/app.component.ts\">\nstyleUrls: ['./app.component.css'],\n\n</code-example>\n<h3 id=\"global-application-styles\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#global-application-styles\"><i class=\"material-icons\">link</i></a>Global application styles</h3>\n<p>When you add styles to a component, you keep everything a component needs—HTML,\nthe CSS, the code—together in one convenient place.\nIt's easy to package it all up and re-use the component somewhere else.</p>\n<p>You can also create styles at the <em>application level</em> outside of any component.</p>\n<p>The designers provided some basic styles to apply to elements across the entire app.\nThese correspond to the full set of master styles that you installed earlier during <a href=\"guide/setup\">setup</a>.\nHere's an excerpt:</p>\n<code-example path=\"toh-pt5/src/styles.1.css\" title=\"src/styles.css (excerpt)\">\n/* Master Styles */\nh1 {\n  color: #369;\n  font-family: Arial, Helvetica, sans-serif;\n  font-size: 250%;\n}\nh2, h3 {\n  color: #444;\n  font-family: Arial, Helvetica, sans-serif;\n  font-weight: lighter;\n}\nbody {\n  margin: 2em;\n}\nbody, input[text], button {\n  color: #888;\n  font-family: Cambria, Georgia;\n}\n/* everywhere else */\n* {\n  font-family: Arial, Helvetica, sans-serif;\n}\n\n\n</code-example>\n<p>Create the file <code>styles.css</code>.\nEnsure that the file contains the <a href=\"https://raw.githubusercontent.com/angular/angular/master/aio/tools/examples/shared/boilerplate/src/styles.css\">master styles provided here</a>.\nAlso edit <code>index.html</code> to refer to this stylesheet.</p>\n<code-example path=\"toh-pt5/src/index.html\" region=\"css\" title=\"src/index.html (link ref)\">\n&#x3C;link rel=\"stylesheet\" href=\"styles.css\">\n\n</code-example>\n<p>Look at the app now. The dashboard, heroes, and navigation links are styled.</p>\n<figure>\n  <img src=\"generated/images/guide/toh/heroes-dashboard-1.png\" alt=\"View navigations\" width=\"558\" height=\"232\">\n</figure>\n<h2 id=\"application-structure-and-code\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#application-structure-and-code\"><i class=\"material-icons\">link</i></a>Application structure and code</h2>\n<p>Review the sample source code in the <live-example></live-example> for this page.\nVerify that you have the following structure:</p>\n<div class=\"filetree\">\n  <div class=\"file\">\n    angular-tour-of-heroes\n  </div>\n  <div class=\"children\">\n    <div class=\"file\">\n      src\n    </div>\n    <div class=\"children\">\n      <div class=\"file\">\n        app\n      </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          app.component.css\n        </div>\n        <div class=\"file\">\n          app.component.ts\n        </div>\n        <div class=\"file\">\n          app.module.ts\n        </div>\n        <div class=\"file\">\n          app-routing.module.ts\n        </div>\n        <div class=\"file\">\n          dashboard.component.css\n        </div>\n        <div class=\"file\">\n          dashboard.component.html\n        </div>\n        <div class=\"file\">\n          dashboard.component.ts\n        </div>\n        <div class=\"file\">\n          hero.service.ts\n        </div>\n        <div class=\"file\">\n          hero.ts\n        </div>\n        <div class=\"file\">\n          hero-detail.component.css\n        </div>\n        <div class=\"file\">\n          hero-detail.component.html\n        </div>\n        <div class=\"file\">\n          hero-detail.component.ts\n        </div>\n        <div class=\"file\">\n          heroes.component.css\n        </div>\n        <div class=\"file\">\n          heroes.component.html\n        </div>\n        <div class=\"file\">\n          heroes.component.ts\n        </div>\n        <div class=\"file\">\n          mock-heroes.ts\n        </div>\n      </div>\n      <div class=\"file\">\n        main.ts\n      </div>\n      <div class=\"file\">\n        index.html\n      </div>\n      <div class=\"file\">\n        styles.css\n      </div>\n      <div class=\"file\">\n        systemjs.config.js\n      </div>\n      <div class=\"file\">\n        tsconfig.json\n      </div>\n    </div>\n    <div class=\"file\">\n      node_modules ...\n    </div>\n    <div class=\"file\">\n      package.json\n    </div>\n  </div>\n</div>\n<h2 id=\"the-road-youve-travelled\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#the-road-youve-travelled\"><i class=\"material-icons\">link</i></a>The road you’ve travelled</h2>\n<p>Here's what you achieved in this page:</p>\n<ul>\n<li>You added the Angular router to navigate among different components.</li>\n<li>You learned how to create router links to represent navigation menu items.</li>\n<li>You used router link parameters to navigate to the details of the user-selected hero.</li>\n<li>You shared the <code>HeroService</code> among multiple components.</li>\n<li>You moved HTML and CSS out of the component file and into their own files.</li>\n<li>You added the <code>uppercase</code> pipe to format data.</li>\n</ul>\n<p>Your app should look like this <live-example></live-example>.</p>\n<h3 id=\"the-road-ahead\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt5#the-road-ahead\"><i class=\"material-icons\">link</i></a>The road ahead</h3>\n<p>You have much of the foundation you need to build an app.\nYou're still missing a key piece: remote data access.</p>\n<p>In the <a href=\"tutorial/toh-pt6\" title=\"Http\">next tutorial page</a>\nyou’ll replace the mock data with data retrieved from a server using http.</p>\n\n</div>"
}