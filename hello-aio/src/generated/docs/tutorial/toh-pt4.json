{
  "id": "tutorial/toh-pt4",
  "title": "Services",
  "contents": "<h1 id=\"services\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#services\"><i class=\"material-icons\">link</i></a>Services</h1>\n\n<div class=\"content\">\n<p>As the Tour of Heroes app evolves, you'll add more components that need access to hero data.</p>\n<p>Instead of copying and pasting the same code over and over,\nyou'll create a single reusable data service and\ninject it into the components that need it.\nUsing a separate service keeps components lean and focused on supporting the view,\nand makes it easy to unit-test components with a mock service.</p>\n<p>Because data services are invariably asynchronous,\nyou'll finish the page with a <em>Promise</em>-based version of the data service.</p>\n<p>When you're done with this page, the app should look like this <live-example></live-example>.</p>\n<h2 id=\"where-you-left-off\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#where-you-left-off\"><i class=\"material-icons\">link</i></a>Where you left off</h2>\n<p>Before continuing with the Tour of Heroes, verify that you have the following structure.\nIf not, go back to the previous pages.</p>\n<div class=\"filetree\">\n  <div class=\"file\">\n    angular-tour-of-heroes\n  </div>\n  <div class=\"children\">\n    <div class=\"file\">\n      src\n    </div>\n    <div class=\"children\">\n      <div class=\"file\">\n        app\n      </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          app.component.ts\n        </div>\n        <div class=\"file\">\n          app.module.ts\n        </div>\n        <div class=\"file\">\n          hero.ts\n        </div>\n        <div class=\"file\">\n          hero-detail.component.ts\n        </div>\n      </div>\n      <div class=\"file\">\n        main.ts\n      </div>\n      <div class=\"file\">\n        index.html\n      </div>\n      <div class=\"file\">\n        styles.css\n      </div>\n      <div class=\"file\">\n        systemjs.config.js\n      </div>\n      <div class=\"file\">\n        tsconfig.json\n      </div>\n    </div>\n    <div class=\"file\">\n      node_modules ...\n    </div>\n    <div class=\"file\">\n      package.json\n    </div>\n  </div>\n</div>\n<h2 id=\"keep-the-app-transpiling-and-running\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#keep-the-app-transpiling-and-running\"><i class=\"material-icons\">link</i></a>Keep the app transpiling and running</h2>\n<p>Enter the following command in the terminal window:</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  npm start\n\n</code-example>\n<p>This command runs the TypeScript compiler in \"watch mode\", recompiling automatically when the code changes.\nThe command simultaneously launches the app in a browser and refreshes the browser when the code changes.</p>\n<p>You can keep building the Tour of Heroes without pausing to recompile or refresh the browser.</p>\n<h2 id=\"creating-a-hero-service\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#creating-a-hero-service\"><i class=\"material-icons\">link</i></a>Creating a hero service</h2>\n<p>The stakeholders want to show the heroes in various ways on different pages.\nUsers can already select a hero from a list.\nSoon you'll add a dashboard with the top performing heroes and create a separate view for editing hero details.\nAll three views need hero data.</p>\n<p>At the moment, the <code>AppComponent</code> defines mock heroes for display.\nHowever, defining heroes is not the component's job,\nand you can't easily share the list of heroes with other components and views.\nIn this page, you'll move the hero data acquisition business to a single service that provides the data and\nshare that service with all components that need the data.</p>\n<h3 id=\"create-the-heroservice\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#create-the-heroservice\"><i class=\"material-icons\">link</i></a>Create the HeroService</h3>\n<p>Create a file in the <code>app</code> folder called <code>hero.service.ts</code>.</p>\n<div class=\"l-sub-section\">\n<p>The naming convention for service files is the service name in lowercase followed by <code>.service</code>.\nFor a multi-word service name, use lower <a href=\"guide/glossary\">dash-case</a>.\nFor example, the filename for <code>SpecialSuperHeroService</code> is <code>special-super-hero.service.ts</code>.</p>\n</div>\n<p>Name the class <code>HeroService</code> and export it for others to import.</p>\n<code-example path=\"toh-pt4/src/app/hero.service.1.ts\" region=\"empty-class\" title=\"src/app/hero.service.ts (starting point)\" linenums=\"false\">\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class HeroService {\n}\n\n\n</code-example>\n<h3 id=\"injectable-services\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#injectable-services\"><i class=\"material-icons\">link</i></a>Injectable services</h3>\n<p>Notice that you imported the Angular <code><a href=\"api/core/Injectable\">Injectable</a></code> function and applied that function as an <code>@Injectable()</code> decorator.</p>\n<div class=\"callout is-helpful\">\n<p>Don't forget the parentheses. Omitting them leads to an error that's difficult to diagnose.</p>\n</div>\n<p>The <code>@Injectable()</code> decorator tells TypeScript to emit metadata about the service.\nThe metadata specifies that Angular may need to inject other dependencies into this service.</p>\n<p>Although the <code>HeroService</code> doesn't have any dependencies at the moment,\napplying the <code>@Injectable()</code> decorator ​from the start ensures\nconsistency and future-proofing.</p>\n<h3 id=\"getting-hero-data\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#getting-hero-data\"><i class=\"material-icons\">link</i></a>Getting hero data</h3>\n<p>Add a <code>getHeroes()</code> method stub.</p>\n<code-example path=\"toh-pt4/src/app/hero.service.1.ts\" region=\"getHeroes-stub\" title=\"src/app/hero.service.ts (getHeroes stub)\" linenums=\"false\">\n@Injectable()\nexport class HeroService {\n  getHeroes(): void {} // stub\n}\n\n\n</code-example>\n<p>The <code>HeroService</code> could get <code>Hero</code> data from anywhere—a\nweb service, local storage, or a mock data source.\nRemoving data access from the component means\nyou can change your mind about the implementation anytime,\nwithout touching the components that need hero data.</p>\n<h3 id=\"move-the-mock-hero-data\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#move-the-mock-hero-data\"><i class=\"material-icons\">link</i></a>Move the mock hero data</h3>\n<p>Cut the <code>HEROES</code> array from <code>app.component.ts</code> and paste it to a new file in the <code>app</code> folder named <code>mock-heroes.ts</code>.\nAdditionally, copy the <code>import {Hero} ...</code> statement because the heroes array uses the <code>Hero</code> class.</p>\n<code-example path=\"toh-pt4/src/app/mock-heroes.ts\" title=\"src/app/mock-heroes.ts\">\nimport { Hero } from './hero';\n\nexport const HEROES: Hero[] = [\n  { id: 11, name: 'Mr. Nice' },\n  { id: 12, name: 'Narco' },\n  { id: 13, name: 'Bombasto' },\n  { id: 14, name: 'Celeritas' },\n  { id: 15, name: 'Magneta' },\n  { id: 16, name: 'RubberMan' },\n  { id: 17, name: 'Dynama' },\n  { id: 18, name: 'Dr IQ' },\n  { id: 19, name: 'Magma' },\n  { id: 20, name: 'Tornado' }\n];\n\n\n</code-example>\n<p>The <code>HEROES</code> constant is exported so it can be imported elsewhere, such as the <code>HeroService</code>.</p>\n<p>In <code>app.component.ts</code>, where you cut the <code>HEROES</code> array,\nadd an uninitialized <code>heroes</code> property:</p>\n<code-example path=\"toh-pt4/src/app/app.component.1.ts\" region=\"heroes-prop\" title=\"src/app/app.component.ts (heroes property)\" linenums=\"false\">\nheroes: Hero[];\n\n</code-example>\n<h3 id=\"return-mocked-hero-data\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#return-mocked-hero-data\"><i class=\"material-icons\">link</i></a>Return mocked hero data</h3>\n<p>Back in the <code>HeroService</code>, import the mock <code>HEROES</code> and return it from the <code>getHeroes()</code> method.\nThe <code>HeroService</code> looks like this:</p>\n<code-example path=\"toh-pt4/src/app/hero.service.1.ts\" region=\"full\" title=\"src/app/hero.service.ts\" linenums=\"false\">\nimport { Injectable } from '@angular/core';\n\nimport { Hero } from './hero';\nimport { HEROES } from './mock-heroes';\n\n@Injectable()\nexport class HeroService {\n  getHeroes(): Hero[] {\n    return HEROES;\n  }\n}\n\n\n</code-example>\n<h3 id=\"import-the-hero-service\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#import-the-hero-service\"><i class=\"material-icons\">link</i></a>Import the hero service</h3>\n<p>You're ready to use the <code>HeroService</code> in other components, starting with <code>AppComponent</code>.</p>\n<p>Import the <code>HeroService</code> so that you can reference it in the code.</p>\n<code-example path=\"toh-pt4/src/app/app.component.ts\" linenums=\"false\" title=\"src/app/app.component.ts (hero-service-import)\" region=\"hero-service-import\">\nimport { HeroService } from './hero.service';\n\n</code-example>\n<h3 id=\"dont-use-new-with-the-heroservice\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#dont-use-new-with-the-heroservice\"><i class=\"material-icons\">link</i></a>Don't use <em>new</em> with the <em>HeroService</em></h3>\n<p>How should the <code>AppComponent</code> acquire a runtime concrete <code>HeroService</code> instance?</p>\n<p>You could create a new instance of the <code>HeroService</code> with <code>new</code> like this:</p>\n<code-example path=\"toh-pt4/src/app/app.component.1.ts\" region=\"new-service\" title=\"src/app/app.component.ts\" linenums=\"false\">\nheroService = new HeroService(); // don't do this\n\n</code-example>\n<p>However, this option isn't ideal for the following reasons:</p>\n<ul>\n<li>The component has to know how to create a <code>HeroService</code>.\nIf you change the <code>HeroService</code> constructor,\nyou must find and update every place you created the service.\nPatching code in multiple places is error prone and adds to the test burden.</li>\n<li>You create a service each time you use <code>new</code>.\nWhat if the service caches heroes and shares that cache with others?\nYou couldn't do that.</li>\n<li>With the <code>AppComponent</code> locked into a specific implementation of the <code>HeroService</code>,\nswitching implementations for different scenarios, such as operating offline or using\ndifferent mocked versions for testing, would be difficult.</li>\n</ul>\n<h3 id=\"inject-the-heroservice\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#inject-the-heroservice\"><i class=\"material-icons\">link</i></a>Inject the <em>HeroService</em></h3>\n<p>Instead of using the <em>new</em> line, you'll add two lines.</p>\n<ul>\n<li>Add a constructor that also defines a private property.</li>\n<li>Add to the component's <code>providers</code> metadata.</li>\n</ul>\n<p>Add the constructor:</p>\n<code-example path=\"toh-pt4/src/app/app.component.1.ts\" region=\"ctor\" title=\"src/app/app.component.ts (constructor)\">\nconstructor(private heroService: HeroService) { }\n\n</code-example>\n<p>The constructor itself does nothing. The parameter simultaneously\ndefines a private <code>heroService</code> property and identifies it as a <code>HeroService</code> injection site.</p>\n<p>Now Angular knows to supply an instance of the <code>HeroService</code> when it creates an <code>AppComponent</code>.</p>\n<div class=\"l-sub-section\">\n<p>Read more about dependency injection in the <a href=\"guide/dependency-injection\">Dependency Injection</a> page.</p>\n</div>\n<p>The <em>injector</em> doesn't know yet how to create a <code>HeroService</code>.\nIf you ran the code now, Angular would fail with this error:</p>\n<code-example format=\"nocode\">\n  EXCEPTION: No provider for HeroService! (AppComponent -> HeroService)\n</code-example>\n<p>To teach the injector how to make a <code>HeroService</code>,\nadd the following <code>providers</code> array property to the bottom of the component metadata\nin the <code>@Component</code> call.</p>\n<code-example path=\"toh-pt4/src/app/app.component.1.ts\" linenums=\"false\" title=\"src/app/app.component.ts (providers)\" region=\"providers\">\nproviders: [HeroService]\n\n</code-example>\n<p>The <code>providers</code> array  tells Angular to create a fresh instance of the <code>HeroService</code> when it creates an <code>AppComponent</code>.\nThe <code>AppComponent</code>, as well as its child components, can use that service to get hero data.</p>\n<a id=\"child-component\"></a>\n<h3 id=\"getheroes-in-the-appcomponent\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#getheroes-in-the-appcomponent\"><i class=\"material-icons\">link</i></a><em>getHeroes()</em> in the <em>AppComponent</em></h3>\n<p>The service is in a <code>heroService</code> private variable.</p>\n<p>You could call the service and get the data in one line.</p>\n<code-example path=\"toh-pt4/src/app/app.component.1.ts\" region=\"get-heroes\" title=\"src/app/app.component.ts\" linenums=\"false\">\nthis.heroes = this.heroService.getHeroes();\n\n</code-example>\n<p>You don't really need a dedicated method to wrap one line.  Write it anyway:</p>\n<code-example path=\"toh-pt4/src/app/app.component.1.ts\" linenums=\"false\" title=\"src/app/app.component.ts (getHeroes)\" region=\"getHeroes\">\ngetHeroes(): void {\n  this.heroes = this.heroService.getHeroes();\n}\n\n</code-example>\n<a id=\"oninit\"></a>\n<h3 id=\"the-ngoninit-lifecycle-hook\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#the-ngoninit-lifecycle-hook\"><i class=\"material-icons\">link</i></a>The <em>ngOnInit</em> lifecycle hook</h3>\n<p><code>AppComponent</code> should fetch and display hero data with no issues.</p>\n<p> You might be tempted to call the <code>getHeroes()</code> method in a constructor, but\na constructor should not contain complex logic,\nespecially a constructor that calls a server, such as a data access method.\nThe constructor is for simple initializations, like wiring constructor parameters to properties.</p>\n<p>To have Angular call <code>getHeroes()</code>, you can implement the Angular <em>ngOnInit lifecycle hook</em>.\nAngular offers interfaces for tapping into critical moments in the component lifecycle:\nat creation, after each change, and at its eventual destruction.</p>\n<p>Each interface has a single method. When the component implements that method, Angular calls it at the appropriate time.</p>\n<div class=\"l-sub-section\">\n<p>Read more about lifecycle hooks in the <a href=\"guide/lifecycle-hooks\">Lifecycle Hooks</a> page.</p>\n</div>\n<p>Here's the essential outline for the <code><a href=\"api/core/OnInit\">OnInit</a></code> interface (don't copy this into your code):</p>\n<code-example path=\"toh-pt4/src/app/app.component.1.ts\" region=\"on-init\" title=\"src/app/app.component.ts\" linenums=\"false\">\nimport { OnInit } from '@angular/core';\n\nexport class AppComponent implements OnInit {\n  ngOnInit(): void {\n  }\n}\n\n\n</code-example>\n<p>Add the implementation for the <code><a href=\"api/core/OnInit\">OnInit</a></code> interface to your export statement:</p>\n<code-example format=\"nocode\">\n  export class AppComponent implements OnInit {}\n</code-example>\n<p>Write an <code>ngOnInit</code> method with the initialization logic inside. Angular will call it\nat the right time. In this case, initialize by calling <code>getHeroes()</code>.</p>\n<code-example path=\"toh-pt4/src/app/app.component.1.ts\" linenums=\"false\" title=\"src/app/app.component.ts (ng-on-init)\" region=\"ng-on-init\">\nngOnInit(): void {\n  this.getHeroes();\n}\n\n</code-example>\n<p>The app should run as expected, showing a list of heroes and a hero detail view\nwhen you click on a hero name.\n<a id=\"async\"></a></p>\n<h2 id=\"async-services-and-promises\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#async-services-and-promises\"><i class=\"material-icons\">link</i></a>Async services and Promises</h2>\n<p>The <code>HeroService</code> returns a list of mock heroes immediately;\nits <code>getHeroes()</code> signature is synchronous.</p>\n<code-example path=\"toh-pt4/src/app/app.component.1.ts\" region=\"get-heroes\" title=\"src/app/app.component.ts\" linenums=\"false\">\nthis.heroes = this.heroService.getHeroes();\n\n</code-example>\n<p>Eventually, the hero data will come from a remote server.\nWhen using a remote server, users don't have to wait for the server to respond;\nadditionally, you aren't able to block the UI during the wait.</p>\n<p>To coordinate the view with the response,\nyou can use <em>Promises</em>, which is an asynchronous\ntechnique that changes the signature of the <code>getHeroes()</code> method.</p>\n<h3 id=\"the-hero-service-makes-a-promise\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#the-hero-service-makes-a-promise\"><i class=\"material-icons\">link</i></a>The hero service makes a Promise</h3>\n<p>A <em>Promise</em> essentially promises to call back when the results are ready.\nYou ask an asynchronous service to do some work and give it a callback function.\nThe service does that work and eventually calls the function with the results or an error.</p>\n<div class=\"l-sub-section\">\n<p>This is a simplified explanation. Read more about ES2015 Promises in the\n<a href=\"http://exploringjs.com/es6/ch_promises.html\">Promises for asynchronous programming</a> page of\n<a href=\"http://exploringjs.com/es6.html\">Exploring ES6</a>.</p>\n</div>\n<p>Update the <code>HeroService</code> with this Promise-returning <code>getHeroes()</code> method:</p>\n<code-example path=\"toh-pt4/src/app/hero.service.ts\" region=\"get-heroes\" title=\"src/app/hero.service.ts (excerpt)\" linenums=\"false\">\ngetHeroes(): Promise&#x3C;Hero[]> {\n  return Promise.resolve(HEROES);\n}\n\n</code-example>\n<p>You're still mocking the data. You're simulating the behavior of an ultra-fast, zero-latency server,\nby returning an <em>immediately resolved Promise</em> with the mock heroes as the result.</p>\n<h3 id=\"act-on-the-promise\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#act-on-the-promise\"><i class=\"material-icons\">link</i></a>Act on the Promise</h3>\n<p>As a result of the change to <code>HeroService</code>, <code>this.heroes</code> is now set to a <code>Promise</code> rather than an array of heroes.</p>\n<code-example path=\"toh-pt4/src/app/app.component.1.ts\" region=\"getHeroes\" title=\"src/app/app.component.ts (getHeroes - old)\" linenums=\"false\">\ngetHeroes(): void {\n  this.heroes = this.heroService.getHeroes();\n}\n\n</code-example>\n<p>You have to change the implementation to <em>act on the <code>Promise</code> when it resolves</em>.\nWhen the <code>Promise</code> resolves successfully, you'll have heroes to display.</p>\n<p>Pass the callback function as an argument to the Promise's <code>then()</code> method:</p>\n<code-example path=\"toh-pt4/src/app/app.component.ts\" region=\"get-heroes\" title=\"src/app/app.component.ts (getHeroes - revised)\" linenums=\"false\">\ngetHeroes(): void {\n  this.heroService.getHeroes().then(heroes => this.heroes = heroes);\n}\n\n</code-example>\n<div class=\"l-sub-section\">\n<p>As described in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">Arrow functions</a>,\nthe ES2015 arrow function\nin the callback is more succinct than the equivalent function expression and gracefully handles <code>this</code>.</p>\n</div>\n<p>The callback sets the component's <code>heroes</code> property to the array of heroes returned by the service.</p>\n<p>The app is still running, showing a list of heroes, and\nresponding to a name selection with a detail view.</p>\n<div class=\"l-sub-section\">\n<p>At the end of this page, <a href=\"tutorial/toh-pt4#slow\">Appendix: take it slow</a> describes what the app might be like with a poor connection.</p>\n</div>\n<h2 id=\"review-the-app-structure\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#review-the-app-structure\"><i class=\"material-icons\">link</i></a>Review the app structure</h2>\n<p>Verify that you have the following structure after all of your refactoring:</p>\n<div class=\"filetree\">\n  <div class=\"file\">\n    angular-tour-of-heroes\n  </div>\n  <div class=\"children\">\n    <div class=\"file\">\n      src\n    </div>\n    <div class=\"children\">\n      <div class=\"file\">\n        app\n      </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          app.component.ts\n        </div>\n        <div class=\"file\">\n          app.module.ts\n        </div>\n        <div class=\"file\">\n          hero.ts\n        </div>\n        <div class=\"file\">\n          hero-detail.component.ts\n        </div>\n        <div class=\"file\">\n          hero.service.ts\n        </div>\n        <div class=\"file\">\n          mock-heroes.ts\n        </div>\n      </div>\n      <div class=\"file\">\n        main.ts\n      </div>\n      <div class=\"file\">\n        index.html\n      </div>\n      <div class=\"file\">\n        styles.css\n      </div>\n      <div class=\"file\">\n        systemjs.config.js\n      </div>\n      <div class=\"file\">\n        tsconfig.json\n      </div>\n    </div>\n    <div class=\"file\">\n      node_modules ...\n    </div>\n    <div class=\"file\">\n      package.json\n    </div>\n  </div>\n</div>\n<p>Here are the code files discussed in this page.</p>\n<code-tabs>\n\n  <code-pane title=\"src/app/hero.service.ts\" path=\"toh-pt4/src/app/hero.service.ts\">\nimport { Injectable } from '@angular/core';\n\nimport { Hero } from './hero';\nimport { HEROES } from './mock-heroes';\n\n@Injectable()\nexport class HeroService {\n  getHeroes(): Promise&#x3C;Hero[]> {\n    return Promise.resolve(HEROES);\n  }\n}\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/app.component.ts\" path=\"toh-pt4/src/app/app.component.ts\">\nimport { Component, OnInit } from '@angular/core';\n\nimport { Hero } from './hero';\nimport { HeroService } from './hero.service';\n\n@Component({\n  selector: 'my-app',\n  template: `\n    &#x3C;h1>{{title}}&#x3C;/h1>\n    &#x3C;h2>My Heroes&#x3C;/h2>\n    &#x3C;ul class=\"heroes\">\n      &#x3C;li *ngFor=\"let hero of heroes\"\n        [class.selected]=\"hero === selectedHero\"\n        (click)=\"onSelect(hero)\">\n        &#x3C;span class=\"badge\">{{hero.id}}&#x3C;/span> {{hero.name}}\n      &#x3C;/li>\n    &#x3C;/ul>\n    &#x3C;hero-detail [hero]=\"selectedHero\">&#x3C;/hero-detail>\n  `,\n  styles: [`\n    .selected {\n      background-color: #CFD8DC !important;\n      color: white;\n    }\n    .heroes {\n      margin: 0 0 2em 0;\n      list-style-type: none;\n      padding: 0;\n      width: 15em;\n    }\n    .heroes li {\n      cursor: pointer;\n      position: relative;\n      left: 0;\n      background-color: #EEE;\n      margin: .5em;\n      padding: .3em 0;\n      height: 1.6em;\n      border-radius: 4px;\n    }\n    .heroes li.selected:hover {\n      background-color: #BBD8DC !important;\n      color: white;\n    }\n    .heroes li:hover {\n      color: #607D8B;\n      background-color: #DDD;\n      left: .1em;\n    }\n    .heroes .text {\n      position: relative;\n      top: -3px;\n    }\n    .heroes .badge {\n      display: inline-block;\n      font-size: small;\n      color: white;\n      padding: 0.8em 0.7em 0 0.7em;\n      background-color: #607D8B;\n      line-height: 1em;\n      position: relative;\n      left: -1px;\n      top: -4px;\n      height: 1.8em;\n      margin-right: .8em;\n      border-radius: 4px 0 0 4px;\n    }\n  `],\n  providers: [HeroService]\n})\nexport class AppComponent implements OnInit {\n  title = 'Tour of Heroes';\n  heroes: Hero[];\n  selectedHero: Hero;\n\n  constructor(private heroService: HeroService) { }\n\n  getHeroes(): void {\n    this.heroService.getHeroes().then(heroes => this.heroes = heroes);\n  }\n\n  ngOnInit(): void {\n    this.getHeroes();\n  }\n\n  onSelect(hero: Hero): void {\n    this.selectedHero = hero;\n  }\n}\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/mock-heroes.ts\" path=\"toh-pt4/src/app/mock-heroes.ts\">\nimport { Hero } from './hero';\n\nexport const HEROES: Hero[] = [\n  { id: 11, name: 'Mr. Nice' },\n  { id: 12, name: 'Narco' },\n  { id: 13, name: 'Bombasto' },\n  { id: 14, name: 'Celeritas' },\n  { id: 15, name: 'Magneta' },\n  { id: 16, name: 'RubberMan' },\n  { id: 17, name: 'Dynama' },\n  { id: 18, name: 'Dr IQ' },\n  { id: 19, name: 'Magma' },\n  { id: 20, name: 'Tornado' }\n];\n\n\n</code-pane>\n\n</code-tabs>\n<h2 id=\"the-road-youve-travelled\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#the-road-youve-travelled\"><i class=\"material-icons\">link</i></a>The road you've travelled</h2>\n<p>Here's what you achieved in this page:</p>\n<ul>\n<li>You created a service class that can be shared by many components.</li>\n<li>You used the <code>ngOnInit</code> lifecycle hook to get the hero data when the <code>AppComponent</code> activates.</li>\n<li>You defined the <code>HeroService</code> as a provider for the <code>AppComponent</code>.</li>\n<li>You created mock hero data and imported them into the service.</li>\n<li>You designed the service to return a Promise and the component to get the data from the Promise.</li>\n</ul>\n<p>Your app should look like this <live-example></live-example>.</p>\n<h2 id=\"the-road-ahead\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#the-road-ahead\"><i class=\"material-icons\">link</i></a>The road ahead</h2>\n<p>The Tour of Heroes has become more reusable using shared components and services.\nThe next goal is to create a dashboard, add menu links that route between the views, and format data in a template.\nAs the app evolves, you'll discover how to design it to make it easier to grow and maintain.</p>\n<p>Read about the Angular component router and navigation among the views in the <a href=\"tutorial/toh-pt5\" title=\"Routing and Navigation\">next tutorial</a> page.</p>\n<a id=\"slow\"></a>\n<h2 id=\"appendix-take-it-slow\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt4#appendix-take-it-slow\"><i class=\"material-icons\">link</i></a>Appendix: Take it slow</h2>\n<p>To simulate a slow connection,\nimport the <code>Hero</code> symbol and add the following <code>getHeroesSlowly()</code> method to the <code>HeroService</code>.</p>\n<code-example path=\"toh-pt4/src/app/hero.service.ts\" region=\"get-heroes-slowly\" title=\"app/hero.service.ts (getHeroesSlowly)\" linenums=\"false\">\ngetHeroesSlowly(): Promise&#x3C;Hero[]> {\n  return new Promise(resolve => {\n    // Simulate server latency with 2 second delay\n    setTimeout(() => resolve(this.getHeroes()), 2000);\n  });\n}\n\n</code-example>\n<p>Like <code>getHeroes()</code>, it also returns a <code>Promise</code>.\nBut this Promise waits two seconds before resolving the Promise with mock heroes.</p>\n<p>Back in the <code>AppComponent</code>, replace <code>getHeroes()</code> with <code>getHeroesSlowly()</code>\nand see how the app behaves.</p>\n\n</div>"
}