{
  "id": "tutorial/toh-pt2",
  "title": "Master/Detail",
  "contents": "<h1 id=\"masterdetail\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#masterdetail\"><i class=\"material-icons\">link</i></a>Master/Detail</h1>\n\n<div class=\"content\">\n<p>In this page, you'll expand the Tour of Heroes app to display a list of heroes, and\nallow users to select a hero and display the hero's details.</p>\n<p>When you're done with this page, the app should look like this <live-example></live-example>.</p>\n<h2 id=\"where-you-left-off\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#where-you-left-off\"><i class=\"material-icons\">link</i></a>Where you left off</h2>\n<p>Before you continue with this page of the Tour of Heroes,\nverify that you have the following structure after <a href=\"tutorial/toh-pt1\">The Hero Editor</a> page.\nIf your structure doesn't match, go back to that page to figure out what you missed.</p>\n<div class=\"filetree\">\n  <div class=\"file\">\n    angular-tour-of-heroes\n  </div>\n  <div class=\"children\">\n    <div class=\"file\">\n      src\n    </div>\n    <div class=\"children\">\n      <div class=\"file\">\n        app\n      </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          app.component.ts\n        </div>\n        <div class=\"file\">\n          app.module.ts\n        </div>\n      </div>\n      <div class=\"file\">\n        main.ts\n      </div>\n      <div class=\"file\">\n        index.html\n      </div>\n      <div class=\"file\">\n        styles.css\n      </div>\n      <div class=\"file\">\n        systemjs.config.js\n      </div>\n      <div class=\"file\">\n        tsconfig.json\n      </div>\n    </div>\n    <div class=\"file\">\n      node_modules ...\n    </div>\n    <div class=\"file\">\n      package.json\n    </div>\n  </div>\n</div>\n<h2 id=\"keep-the-app-transpiling-and-running\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#keep-the-app-transpiling-and-running\"><i class=\"material-icons\">link</i></a>Keep the app transpiling and running</h2>\n<p>Enter the following command in the terminal window:</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  npm start\n\n</code-example>\n<p>This command runs the TypeScript compiler in \"watch mode\", recompiling automatically when the code changes.\nThe command simultaneously launches the app in a browser and refreshes the browser when the code changes.</p>\n<p>You can keep building the Tour of Heroes without pausing to recompile or refresh the browser.</p>\n<h2 id=\"displaying-heroes\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#displaying-heroes\"><i class=\"material-icons\">link</i></a>Displaying heroes</h2>\n<p>To display a list of heroes, you'll add heroes to the view's template.</p>\n<h3 id=\"create-heroes\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#create-heroes\"><i class=\"material-icons\">link</i></a>Create heroes</h3>\n<p>Create an array of ten heroes.</p>\n<code-example path=\"toh-pt2/src/app/app.component.ts\" region=\"hero-array\" title=\"src/app/app.component.ts (hero array)\">\nconst HEROES: Hero[] = [\n  { id: 11, name: 'Mr. Nice' },\n  { id: 12, name: 'Narco' },\n  { id: 13, name: 'Bombasto' },\n  { id: 14, name: 'Celeritas' },\n  { id: 15, name: 'Magneta' },\n  { id: 16, name: 'RubberMan' },\n  { id: 17, name: 'Dynama' },\n  { id: 18, name: 'Dr IQ' },\n  { id: 19, name: 'Magma' },\n  { id: 20, name: 'Tornado' }\n];\n\n</code-example>\n<p>The <code>HEROES</code> array is of type <code>Hero</code>, the class defined in the previous page.\nEventually this app will fetch the list of heroes from a web service, but for now\nyou can display mock heroes.</p>\n<h3 id=\"expose-heroes\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#expose-heroes\"><i class=\"material-icons\">link</i></a>Expose heroes</h3>\n<p>Create a public property in <code>AppComponent</code> that exposes the heroes for binding.</p>\n<code-example path=\"toh-pt2/src/app/app.component.1.html\" region=\"hero-array-1\" title=\"app.component.ts (hero array property)\">\nheroes = HEROES;\n\n</code-example>\n<p>The <code>heroes</code> type isn't defined because TypeScript infers it from the <code>HEROES</code> array.</p>\n<div class=\"l-sub-section\">\n<p>The hero data is separated from the class implementation\nbecause ultimately the hero names will come from a data service.</p>\n</div>\n<h3 id=\"display-hero-names-in-a-template\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#display-hero-names-in-a-template\"><i class=\"material-icons\">link</i></a>Display hero names in a template</h3>\n<p>To display the hero names in an unordered list,\ninsert the following chunk of HTML below the title and above the hero details.</p>\n<code-example path=\"toh-pt2/src/app/app.component.1.html\" region=\"heroes-template-1\" title=\"app.component.ts (heroes template)\" linenums=\"false\">\n&#x3C;h2>My Heroes&#x3C;/h2>\n&#x3C;ul class=\"heroes\">\n  &#x3C;li>\n    &#x3C;!-- each hero goes here -->\n  &#x3C;/li>\n&#x3C;/ul>\n\n</code-example>\n<p>Now you can fill the template with hero names.</p>\n<h3 id=\"list-heroes-with-ngfor\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#list-heroes-with-ngfor\"><i class=\"material-icons\">link</i></a>List heroes with ngFor</h3>\n<p>The goal is to bind the array of heroes in the component to the template, iterate over them,\nand display them individually.</p>\n<p>Modify the <code>&#x3C;li></code> tag by adding the built-in directive <code>*ngFor</code>.</p>\n<code-example path=\"toh-pt2/src/app/app.component.1.html\" region=\"heroes-ngfor-1\" title=\"app.component.ts (ngFor)\">\n&#x3C;li *ngFor=\"let hero of heroes\">\n\n</code-example>\n<div class=\"l-sub-section\">\n<p>The (<code>*</code>) prefix to <code>ngFor</code> is a critical part of this syntax.\nIt indicates that the <code>&#x3C;li></code> element and its children\nconstitute a master template.</p>\n<p>The <code>ngFor</code> directive iterates over the component's <code>heroes</code> array\nand renders an instance of this template for each hero in that array.</p>\n<p>The <code>let hero</code> part of the expression identifies <code>hero</code> as the  template input variable,\nwhich holds the current hero item for each iteration.\nYou can reference this variable within the template to access the current hero's properties.</p>\n<p>Read more about <code>ngFor</code> and template input variables in the\n<a href=\"guide/displaying-data#ngFor\">Showing an array property with *ngFor</a> section of the\n<a href=\"guide/displaying-data\">Displaying Data</a> page and the\n<a href=\"guide/template-syntax#ngFor\">ngFor</a> section of the\n<a href=\"guide/template-syntax\">Template Syntax</a> page.</p>\n</div>\n<p>Within the <code>&#x3C;li></code> tags, add content\nthat uses the <code>hero</code> template variable to display the hero's properties.</p>\n<code-example path=\"toh-pt2/src/app/app.component.1.html\" region=\"ng-for\" title=\"app.component.ts (ngFor template)\" linenums=\"false\">\n&#x3C;li *ngFor=\"let hero of heroes\">\n  &#x3C;span class=\"badge\">{{hero.id}}&#x3C;/span> {{hero.name}}\n&#x3C;/li>\n\n</code-example>\n<p>When the browser refreshes, a list of heroes appears.</p>\n<h3 id=\"style-the-heroes\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#style-the-heroes\"><i class=\"material-icons\">link</i></a>Style the heroes</h3>\n<p>Users should get a visual cue of which hero they are hovering over and which hero is selected.</p>\n<p>To add styles to your component, set the <code>styles</code> property on the <code>@Component</code> decorator\nto the following CSS classes:</p>\n<code-example path=\"toh-pt2/src/app/app.component.ts\" region=\"styles\" title=\"src/app/app.component.ts (styles)\" linenums=\"false\">\nstyles: [`\n  .selected {\n    background-color: #CFD8DC !important;\n    color: white;\n  }\n  .heroes {\n    margin: 0 0 2em 0;\n    list-style-type: none;\n    padding: 0;\n    width: 15em;\n  }\n  .heroes li {\n    cursor: pointer;\n    position: relative;\n    left: 0;\n    background-color: #EEE;\n    margin: .5em;\n    padding: .3em 0;\n    height: 1.6em;\n    border-radius: 4px;\n  }\n  .heroes li.selected:hover {\n    background-color: #BBD8DC !important;\n    color: white;\n  }\n  .heroes li:hover {\n    color: #607D8B;\n    background-color: #DDD;\n    left: .1em;\n  }\n  .heroes .text {\n    position: relative;\n    top: -3px;\n  }\n  .heroes .badge {\n    display: inline-block;\n    font-size: small;\n    color: white;\n    padding: 0.8em 0.7em 0 0.7em;\n    background-color: #607D8B;\n    line-height: 1em;\n    position: relative;\n    left: -1px;\n    top: -4px;\n    height: 1.8em;\n    margin-right: .8em;\n    border-radius: 4px 0 0 4px;\n  }\n`]\n\n</code-example>\n<p>Remember to use the backtick notation for multi-line strings.</p>\n<p>Adding these styles makes the file much longer. In a later page you'll move the styles to a separate file.</p>\n<p>When you assign styles to a component, they are scoped to that specific component.\nThese styles apply only to the <code>AppComponent</code> and don't affect the outer HTML.</p>\n<p>The template for displaying heroes should look like this:</p>\n<code-example path=\"toh-pt2/src/app/app.component.1.html\" region=\"heroes-styled\" title=\"src/app/app.component.ts (styled heroes)\" linenums=\"false\">\n&#x3C;h2>My Heroes&#x3C;/h2>\n&#x3C;ul class=\"heroes\">\n  &#x3C;li *ngFor=\"let hero of heroes\">\n    &#x3C;span class=\"badge\">{{hero.id}}&#x3C;/span> {{hero.name}}\n  &#x3C;/li>\n&#x3C;/ul>\n\n</code-example>\n<h2 id=\"selecting-a-hero\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#selecting-a-hero\"><i class=\"material-icons\">link</i></a>Selecting a hero</h2>\n<p>The app now displays a list of heroes as well as a single hero in the details view. But\nthe list and the details view are not connected.\nWhen users select a hero from the list, the selected hero should appear in the details view.\nThis UI pattern is known as \"master/detail.\"\nIn this case, the <em>master</em> is the heroes list and the <em>detail</em> is the selected hero.</p>\n<p>Next you'll connect the master to the detail through a <code>selectedHero</code> component property,\nwhich is bound to a click event.</p>\n<h3 id=\"handle-click-events\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#handle-click-events\"><i class=\"material-icons\">link</i></a>Handle click events</h3>\n<p>Add a click event binding to the <code>&#x3C;li></code> like this:</p>\n<code-example path=\"toh-pt2/src/app/app.component.1.html\" region=\"selectedHero-click\" title=\"app.component.ts (template excerpt)\" linenums=\"false\">\n&#x3C;li *ngFor=\"let hero of heroes\" (click)=\"onSelect(hero)\">\n  ...\n&#x3C;/li>\n\n</code-example>\n<p>The parentheses identify the <code>&#x3C;li></code> element's  <code>click</code> event as the target.\nThe <code>onSelect(hero)</code> expression calls the  <code>AppComponent</code> method, <code>onSelect()</code>,\npassing the template input variable <code>hero</code>, as an argument.\nThat's the same <code>hero</code> variable you defined previously in the <code>ngFor</code> directive.</p>\n<div class=\"l-sub-section\">\n<p>Learn more about event binding at the\n<a href=\"guide/user-input\">User Input</a> page and the\n<a href=\"guide/template-syntax#event-binding\">Event binding</a> section of the\n<a href=\"guide/template-syntax\">Template Syntax</a> page.</p>\n</div>\n<h3 id=\"add-a-click-handler-to-expose-the-selected-hero\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#add-a-click-handler-to-expose-the-selected-hero\"><i class=\"material-icons\">link</i></a>Add a click handler to expose the selected hero</h3>\n<p>You no longer need the <code>hero</code> property because you're no longer displaying a single hero; you're displaying a list of heroes.\nBut the user will be able to select one of the heroes by clicking on it.\nSo replace the <code>hero</code> property with this simple <code>selectedHero</code> property:</p>\n<code-example path=\"toh-pt2/src/app/app.component.ts\" region=\"selected-hero\" title=\"src/app/app.component.ts (selectedHero)\">\nselectedHero: Hero;\n\n</code-example>\n<p>The hero names should all be unselected before the user picks a hero, so\nyou won't initialize the <code>selectedHero</code> as you did with <code>hero</code>.</p>\n<p>Add an <code>onSelect()</code> method that sets the <code>selectedHero</code> property to the <code>hero</code> that the user clicks.</p>\n<code-example path=\"toh-pt2/src/app/app.component.ts\" region=\"on-select\" title=\"src/app/app.component.ts (onSelect)\" linenums=\"false\">\nonSelect(hero: Hero): void {\n  this.selectedHero = hero;\n}\n\n</code-example>\n<p>The template still refers to the old <code>hero</code> property.\nBind to the new <code>selectedHero</code> property instead as follows:</p>\n<code-example path=\"toh-pt2/src/app/app.component.1.html\" region=\"selectedHero-details\" title=\"app.component.ts (template excerpt)\" linenums=\"false\">\n&#x3C;h2>{{selectedHero.name}} details!&#x3C;/h2>\n&#x3C;div>&#x3C;label>id: &#x3C;/label>{{selectedHero.id}}&#x3C;/div>\n&#x3C;div>\n    &#x3C;label>name: &#x3C;/label>\n    &#x3C;input [(ngModel)]=\"selectedHero.name\" placeholder=\"name\"/>\n&#x3C;/div>\n\n</code-example>\n<h3 id=\"hide-the-empty-detail-with-ngif\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#hide-the-empty-detail-with-ngif\"><i class=\"material-icons\">link</i></a>Hide the empty detail with ngIf</h3>\n<p>When the app loads, <code>selectedHero</code> is undefined.\nThe selected hero is initialized when the user clicks a hero's name.\nAngular can't display properties of the undefined <code>selectedHero</code> and throws the following error,\nvisible in the browser's console:</p>\n<code-example format=\"nocode\">\n  EXCEPTION: TypeError: Cannot read property 'name' of undefined in [null]\n\n</code-example>\n<p>Although <code>selectedHero.name</code> is displayed in the template,\nyou must keep the hero detail out of the DOM until there is a selected hero.</p>\n<p>Wrap the HTML hero detail content of the template with a <code>&#x3C;div></code>.\nThen add the <code>ngIf</code> built-in directive and set it to the <code>selectedHero</code> property of the component.</p>\n<code-example path=\"toh-pt2/src/app/app.component.1.html\" region=\"ng-if\" title=\"src/app/app.component.ts (ngIf)\" linenums=\"false\">\n&#x3C;div *ngIf=\"selectedHero\">\n  &#x3C;h2>{{selectedHero.name}} details!&#x3C;/h2>\n  &#x3C;div>&#x3C;label>id: &#x3C;/label>{{selectedHero.id}}&#x3C;/div>\n  &#x3C;div>\n    &#x3C;label>name: &#x3C;/label>\n    &#x3C;input [(ngModel)]=\"selectedHero.name\" placeholder=\"name\"/>\n  &#x3C;/div>\n&#x3C;/div>\n\n</code-example>\n<div class=\"alert is-critical\">\n<p>Don't forget the asterisk (<code>*</code>) in front of <code>ngIf</code>.</p>\n</div>\n<p>The app no longer fails and the list of names displays again in the browser.</p>\n<p>When there is no selected hero, the <code>ngIf</code> directive removes the hero detail HTML from the DOM.\nThere are no hero detail elements or bindings to worry about.</p>\n<p>When the user picks a hero, <code>selectedHero</code> becomes defined and\n<code>ngIf</code> puts the hero detail content into the DOM and evaluates the nested bindings.</p>\n<div class=\"l-sub-section\">\n<p>Read more about <code>ngIf</code> and <code>ngFor</code> in the\n<a href=\"guide/structural-directives\">Structural Directives</a> page and the\n<a href=\"guide/template-syntax#directives\">Built-in directives</a> section of the\n<a href=\"guide/template-syntax\">Template Syntax</a> page.</p>\n</div>\n<h3 id=\"style-the-selected-hero\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#style-the-selected-hero\"><i class=\"material-icons\">link</i></a>Style the selected hero</h3>\n<p>While the selected hero details appear below the list, it's difficult to identify the selected hero within the list itself.</p>\n<p>In the <code>styles</code> metadata that you added above, there is a custom CSS class named <code>selected</code>.\nTo make the selected hero more visible, you'll apply this <code>selected</code> class to the <code>&#x3C;li></code> when the user clicks on a hero name.\nFor example, when the user clicks \"Magneta\", it should render with a distinctive but subtle background color\nlike this:</p>\n<figure>\n  <img src=\"generated/images/guide/toh/heroes-list-selected.png\" alt=\"Selected hero\" width=\"165\" height=\"129\">\n</figure>\n<p>In the template, add the following <code>[class.selected]</code> binding to  the <code>&#x3C;li></code>:</p>\n<code-example path=\"toh-pt2/src/app/app.component.1.html\" region=\"class-selected-1\" title=\"app.component.ts (setting the CSS class)\" linenums=\"false\">\n[class.selected]=\"hero === selectedHero\"\n\n</code-example>\n<p>When the expression (<code>hero === selectedHero</code>) is <code>true</code>, Angular adds the <code>selected</code> CSS class.\nWhen the expression is <code>false</code>, Angular removes the <code>selected</code> class.</p>\n<div class=\"l-sub-section\">\n<p>Read more about the <code>[class]</code> binding in the <a href=\"guide/template-syntax#ngClass\" title=\"Template syntax: NgClass\">Template Syntax</a> guide.</p>\n</div>\n<p>The final version of the <code>&#x3C;li></code> looks like this:</p>\n<code-example path=\"toh-pt2/src/app/app.component.1.html\" region=\"class-selected-2\" title=\"app.component.ts (styling each hero)\" linenums=\"false\">\n&#x3C;li *ngFor=\"let hero of heroes\"\n  [class.selected]=\"hero === selectedHero\"\n  (click)=\"onSelect(hero)\">\n  &#x3C;span class=\"badge\">{{hero.id}}&#x3C;/span> {{hero.name}}\n&#x3C;/li>\n\n</code-example>\n<p>After clicking \"Magneta\", the list should look like this:</p>\n<figure>\n  <img src=\"generated/images/guide/toh/heroes-list-1.png\" alt=\"Output of heroes list app\" width=\"220\" height=\"540\">\n</figure>\n<p>Here's the complete <code>app.component.ts</code> as of now:</p>\n<code-example path=\"toh-pt2/src/app/app.component.ts\" title=\"src/app/app.component.ts\">\nimport { Component } from '@angular/core';\n\nexport class Hero {\n  id: number;\n  name: string;\n}\n\nconst HEROES: Hero[] = [\n  { id: 11, name: 'Mr. Nice' },\n  { id: 12, name: 'Narco' },\n  { id: 13, name: 'Bombasto' },\n  { id: 14, name: 'Celeritas' },\n  { id: 15, name: 'Magneta' },\n  { id: 16, name: 'RubberMan' },\n  { id: 17, name: 'Dynama' },\n  { id: 18, name: 'Dr IQ' },\n  { id: 19, name: 'Magma' },\n  { id: 20, name: 'Tornado' }\n];\n\n@Component({\n  selector: 'my-app',\n  template: `\n    &#x3C;h1>{{title}}&#x3C;/h1>\n    &#x3C;h2>My Heroes&#x3C;/h2>\n    &#x3C;ul class=\"heroes\">\n      &#x3C;li *ngFor=\"let hero of heroes\"\n        [class.selected]=\"hero === selectedHero\"\n        (click)=\"onSelect(hero)\">\n        &#x3C;span class=\"badge\">{{hero.id}}&#x3C;/span> {{hero.name}}\n      &#x3C;/li>\n    &#x3C;/ul>\n    &#x3C;div *ngIf=\"selectedHero\">\n      &#x3C;h2>{{selectedHero.name}} details!&#x3C;/h2>\n      &#x3C;div>&#x3C;label>id: &#x3C;/label>{{selectedHero.id}}&#x3C;/div>\n      &#x3C;div>\n        &#x3C;label>name: &#x3C;/label>\n        &#x3C;input [(ngModel)]=\"selectedHero.name\" placeholder=\"name\"/>\n      &#x3C;/div>\n    &#x3C;/div>\n  `,\n  styles: [`\n    .selected {\n      background-color: #CFD8DC !important;\n      color: white;\n    }\n    .heroes {\n      margin: 0 0 2em 0;\n      list-style-type: none;\n      padding: 0;\n      width: 15em;\n    }\n    .heroes li {\n      cursor: pointer;\n      position: relative;\n      left: 0;\n      background-color: #EEE;\n      margin: .5em;\n      padding: .3em 0;\n      height: 1.6em;\n      border-radius: 4px;\n    }\n    .heroes li.selected:hover {\n      background-color: #BBD8DC !important;\n      color: white;\n    }\n    .heroes li:hover {\n      color: #607D8B;\n      background-color: #DDD;\n      left: .1em;\n    }\n    .heroes .text {\n      position: relative;\n      top: -3px;\n    }\n    .heroes .badge {\n      display: inline-block;\n      font-size: small;\n      color: white;\n      padding: 0.8em 0.7em 0 0.7em;\n      background-color: #607D8B;\n      line-height: 1em;\n      position: relative;\n      left: -1px;\n      top: -4px;\n      height: 1.8em;\n      margin-right: .8em;\n      border-radius: 4px 0 0 4px;\n    }\n  `]\n})\nexport class AppComponent {\n  title = 'Tour of Heroes';\n  heroes = HEROES;\n  selectedHero: Hero;\n\n  onSelect(hero: Hero): void {\n    this.selectedHero = hero;\n  }\n}\n\n\n</code-example>\n<h2 id=\"the-road-youve-travelled\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#the-road-youve-travelled\"><i class=\"material-icons\">link</i></a>The road you've travelled</h2>\n<p>Here's what you achieved in this page:</p>\n<ul>\n<li>The Tour of Heroes app displays a list of selectable heroes.</li>\n<li>You added the ability to select a hero and show the hero's details.</li>\n<li>You learned how to use the built-in directives <code>ngIf</code> and <code>ngFor</code> in a component's template.</li>\n</ul>\n<p>Your app should look like this <live-example></live-example>.</p>\n<h2 id=\"the-road-ahead\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt2#the-road-ahead\"><i class=\"material-icons\">link</i></a>The road ahead</h2>\n<p>You've expanded the Tour of Heroes app, but it's far from complete.\nAn app shouldn't be one monolithic component.\nIn the <a href=\"tutorial/toh-pt3\" title=\"Multiple Components\">next page</a>, you'll split the app into subcomponents and make them work together.</p>\n\n</div>"
}