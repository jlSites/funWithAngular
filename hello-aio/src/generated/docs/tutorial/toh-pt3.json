{
  "id": "tutorial/toh-pt3",
  "title": "Multiple Components",
  "contents": "<h1 id=\"multiple-components\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#multiple-components\"><i class=\"material-icons\">link</i></a>Multiple Components</h1>\n\n<div class=\"content\">\n<p>The <code>AppComponent</code> is doing <em>everything</em> at the moment.\nIn the beginning, it showed details of a single hero.\nThen it became a master/detail form with both a list of heroes and the hero detail.\nSoon there will be new requirements and capabilities.\nYou can't keep piling features on top of features in one component; that's not maintainable.</p>\n<p>You'll need to break it up into sub-components, each focused on a specific task or workflow.\nEventually, the <code>AppComponent</code> could become a simple shell that hosts those sub-components.</p>\n<p>In this page, you'll take the first step in that direction by carving out the hero details into a separate, reusable component.\nWhen you're done, the app should look like this <live-example></live-example>.</p>\n<h2 id=\"where-you-left-off\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#where-you-left-off\"><i class=\"material-icons\">link</i></a>Where you left off</h2>\n<p>Before getting started on this page, verify that you have the following structure from earlier in the Tour of Heroes.\nIf not, go back to the previous pages.</p>\n<div class=\"filetree\">\n  <div class=\"file\">\n    angular-tour-of-heroes\n  </div>\n  <div class=\"children\">\n    <div class=\"file\">\n      src\n    </div>\n    <div class=\"children\">\n      <div class=\"file\">\n        app\n      </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          app.component.ts\n        </div>\n        <div class=\"file\">\n          app.module.ts\n        </div>\n      </div>\n      <div class=\"file\">\n        main.ts\n      </div>\n      <div class=\"file\">\n        index.html\n      </div>\n      <div class=\"file\">\n        styles.css\n      </div>\n      <div class=\"file\">\n        systemjs.config.js\n      </div>\n      <div class=\"file\">\n        tsconfig.json\n      </div>\n    </div>\n    <div class=\"file\">\n      node_modules ...\n    </div>\n    <div class=\"file\">\n      package.json\n    </div>\n  </div>\n</div>\n<p>Keep the app transpiling and running while you build the Tour of Heroes\nby entering the <code>npm start</code> command in a terminal window\n<a href=\"tutorial/toh-pt1#keep-transpiling\" title=\"Keep the app running\">as you did before</a>.</p>\n<h2 id=\"make-a-hero-detail-component\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#make-a-hero-detail-component\"><i class=\"material-icons\">link</i></a>Make a hero detail component</h2>\n<p>Add a file named <code>hero-detail.component.ts</code> to the <code>app/</code> folder.\nThis file will hold the new <code>HeroDetailComponent</code>.</p>\n<p>The file and component names follow the standard described in the Angular\n<a href=\"guide/styleguide#naming\">style guide</a>.</p>\n<ul>\n<li>\n<p>The component <em>class</em> name should be written in <em>upper camel case</em> and end in the word \"Component\".\nThe hero detail component class is <code>HeroDetailComponent</code>.</p>\n</li>\n<li>\n<p>The component <em>file</em> name should be spelled in <a href=\"guide/glossary#dash-case\"><em>lower dash case</em></a>,\neach word separated by dashes, and end in <code>.component.ts</code>.\nThe <code>HeroDetailComponent</code> class goes in the <code>hero-detail.component.ts</code> file.</p>\n</li>\n</ul>\n<p>Start writing the <code>HeroDetailComponent</code> as follows:</p>\n<code-example path=\"toh-pt3/app/hero-detail.component.1.ts\" region=\"v1\" title=\"app/hero-detail.component.ts (initial version)\" linenums=\"false\">\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'hero-detail',\n})\nexport class HeroDetailComponent {\n}\n\n</code-example>\n<a id=\"selector\"></a>\n<p>To define a component, you always import the <code><a href=\"api/core/Component\">Component</a></code> symbol.</p>\n<p>The <code>@Component</code> decorator provides the Angular metadata for the component.\nThe CSS selector name, <code>hero-detail</code>, will match the element tag\nthat identifies this component within a parent component's template.\n<a href=\"tutorial/toh-pt3#add-hero-detail\" title=\"Add the HeroDetailComponent to the AppComponent\">Near the end of this tutorial page</a>,\nyou'll add a <code>&#x3C;hero-detail></code> element to the <code>AppComponent</code> template.</p>\n<p>Always <code>export</code> the component class because you'll always <code>import</code> it elsewhere.</p>\n<h3 id=\"hero-detail-template\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#hero-detail-template\"><i class=\"material-icons\">link</i></a>Hero detail template</h3>\n<p>To move the hero detail view to the <code>HeroDetailComponent</code>,\ncut the hero detail <em>content</em> from the bottom of the <code>AppComponent</code> template\nand paste it into a new <code>template</code> property in the <code>@Component</code> metadata.</p>\n<p>The <code>HeroDetailComponent</code> has a <em>hero</em>, not a <em>selected hero</em>.\nReplace the word, \"selectedHero\", with the word, \"hero\", everywhere in the template.\nWhen you're done, the new template should look like this:</p>\n<code-example path=\"toh-pt3/src/app/hero-detail.component.ts\" region=\"template\" title=\"src/app/hero-detail.component.ts (template)\" linenums=\"false\">\n@Component({\n  selector: 'hero-detail',\n  template: `\n    &#x3C;div *ngIf=\"hero\">\n      &#x3C;h2>{{hero.name}} details!&#x3C;/h2>\n      &#x3C;div>&#x3C;label>id: &#x3C;/label>{{hero.id}}&#x3C;/div>\n      &#x3C;div>\n        &#x3C;label>name: &#x3C;/label>\n        &#x3C;input [(ngModel)]=\"hero.name\" placeholder=\"name\"/>\n      &#x3C;/div>\n    &#x3C;/div>\n  `\n})\n\n</code-example>\n<h3 id=\"add-the-hero-property\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#add-the-hero-property\"><i class=\"material-icons\">link</i></a>Add the <em>hero</em> property</h3>\n<p>The <code>HeroDetailComponent</code> template binds to the component's <code>hero</code> property.\nAdd that property to the <code>HeroDetailComponent</code> class like this:</p>\n<code-example path=\"toh-pt3/app/hero-detail.component.1.ts\" region=\"hero\" title=\"src/app/hero-detail.component.ts (hero property)\">\nhero: Hero;\n\n</code-example>\n<p>The <code>hero</code> property is typed as an instance of <code>Hero</code>.\nThe <code>Hero</code> class is still in the <code>app.component.ts</code> file.\nNow there are two components that need to reference the <code>Hero</code> class.\nThe Angular <a href=\"guide/styleguide#rule-of-one\" title=\"Style guide: rule of one\">style guide</a> recommends one class per file anyway.</p>\n<p>Move the <code>Hero</code> class from <code>app.component.ts</code> to its own <code>hero.ts</code> file.</p>\n<code-example path=\"toh-pt3/src/app/hero.ts\" title=\"src/app/hero.ts\" linenums=\"false\">\nexport class Hero {\n  id: number;\n  name: string;\n}\n\n</code-example>\n<p>Now that the <code>Hero</code> class is in its own file, the <code>AppComponent</code> and the <code>HeroDetailComponent</code> have to import it.\nAdd the following <code>import</code> statement near the top of <em>both</em> the <code>app.component.ts</code> and the <code>hero-detail.component.ts</code> files.</p>\n<code-example path=\"toh-pt3/app/hero-detail.component.1.ts\" region=\"hero-import\" title=\"src/app/hero-detail.component.ts\">\nimport { Hero } from './hero';\n\n</code-example>\n<h3 id=\"the-hero-property-is-an-input-property\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#the-hero-property-is-an-input-property\"><i class=\"material-icons\">link</i></a>The <em>hero</em> property is an <em>input</em> property</h3>\n<p><a href=\"tutorial/toh-pt3#add-hero-detail\" title=\"Add the HeroDetailComponent to the AppComponent\">Later in this page</a>,\nthe parent <code>AppComponent</code> will tell the child <code>HeroDetailComponent</code> which hero to display\nby binding its <code>selectedHero</code> to the <code>hero</code> property of the <code>HeroDetailComponent</code>.\nThe binding will look like this:</p>\n<code-example path=\"toh-pt3/app/app.component.1.html\" region=\"hero-detail-binding\" title=\"src/app/app.component.html\" linenums=\"false\">\n&#x3C;hero-detail [hero]=\"selectedHero\">&#x3C;/hero-detail>\n\n</code-example>\n<p>Putting square brackets around the <code>hero</code> property, to the left of the equal sign (=),\nmakes it the <em>target</em> of a property binding expression.\nYou must declare a <em>target</em> binding property to be an <em>input</em> property.\nOtherwise, Angular rejects the binding and throws an error.</p>\n<p>First, amend the <code>@angular/core</code> import statement to include the <code><a href=\"api/core/Input\">Input</a></code> symbol.</p>\n<code-example path=\"toh-pt3/src/app/hero-detail.component.ts\" region=\"import-input\" title=\"src/app/hero-detail.component.ts (excerpt)\" linenums=\"false\">\nimport { Component, Input } from '@angular/core';\n\n</code-example>\n<p>Then declare that <code>hero</code> is an <em>input</em> property by\npreceding it with the <code>@Input</code> decorator that you imported earlier.</p>\n<code-example path=\"toh-pt3/src/app/hero-detail.component.ts\" region=\"hero\" title=\"src/app/hero-detail.component.ts (excerpt)\" linenums=\"false\">\n@Input() hero: Hero;\n\n</code-example>\n<div class=\"l-sub-section\">\n<p>Read more about <em>input</em> properties in the\n<a href=\"guide/attribute-directives#why-input\">Attribute Directives</a> page.</p>\n</div>\n<p>That's it. The <code>hero</code> property is the only thing in the <code>HeroDetailComponent</code> class.</p>\n<code-example path=\"toh-pt3/src/app/hero-detail.component.ts\" region=\"class\" title=\"src/src/app/hero-detail.component.ts\" linenums=\"false\">\nexport class HeroDetailComponent {\n  @Input() hero: Hero;\n}\n\n</code-example>\n<p>All it does is receive a hero object through its <code>hero</code> input property and then bind to that property with its template.</p>\n<p>Here's the complete <code>HeroDetailComponent</code>.</p>\n<code-example path=\"toh-pt3/src/app/hero-detail.component.ts\" title=\"src/app/hero-detail.component.ts\">\nimport { Component, Input } from '@angular/core';\n\nimport { Hero } from './hero';\n@Component({\n  selector: 'hero-detail',\n  template: `\n    &#x3C;div *ngIf=\"hero\">\n      &#x3C;h2>{{hero.name}} details!&#x3C;/h2>\n      &#x3C;div>&#x3C;label>id: &#x3C;/label>{{hero.id}}&#x3C;/div>\n      &#x3C;div>\n        &#x3C;label>name: &#x3C;/label>\n        &#x3C;input [(ngModel)]=\"hero.name\" placeholder=\"name\"/>\n      &#x3C;/div>\n    &#x3C;/div>\n  `\n})\nexport class HeroDetailComponent {\n  @Input() hero: Hero;\n}\n\n\n\n</code-example>\n<h2 id=\"declare-herodetailcomponent-in-the-appmodule\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#declare-herodetailcomponent-in-the-appmodule\"><i class=\"material-icons\">link</i></a>Declare <em>HeroDetailComponent</em> in the <em>AppModule</em></h2>\n<p>Every component must be declared in one—and only one—NgModule.</p>\n<p>Open <code>app.module.ts</code> in your editor and import the <code>HeroDetailComponent</code> so you can refer to it.</p>\n<code-example path=\"toh-pt3/src/app/app.module.ts\" region=\"hero-detail-import\" title=\"src/app/app.module.ts\">\nimport { HeroDetailComponent } from './hero-detail.component';\n\n</code-example>\n<p>Add <code>HeroDetailComponent</code> to the module's <code>declarations</code> array.</p>\n<code-example path=\"toh-pt3/src/app/app.module.ts\" region=\"declarations\" title=\"src/app/app.module.ts\" linenums=\"false\">\ndeclarations: [\n  AppComponent,\n  HeroDetailComponent\n],\n\n</code-example>\n<p>In general, the <code>declarations</code> array contains a list of application components, pipes, and directives that belong to the module.\nA component must be declared in a module before other components can reference it.\nThis module declares only the two application components, <code>AppComponent</code> and <code>HeroDetailComponent</code>.</p>\n<div class=\"l-sub-section\">\n<p>Read more about NgModules in the <a href=\"guide/ngmodule\" title=\"NgModules\">NgModules</a> guide.</p>\n</div>\n<a id=\"add-hero-detail\"></a>\n<h2 id=\"add-the-herodetailcomponent-to-the-appcomponent\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#add-the-herodetailcomponent-to-the-appcomponent\"><i class=\"material-icons\">link</i></a>Add the <em>HeroDetailComponent</em> to the <em>AppComponent</em></h2>\n<p>The <code>AppComponent</code> is still a master/detail view.\nIt used to display the hero details on its own, before you cut out that portion of the template.\nNow it will delegate to the <code>HeroDetailComponent</code>.</p>\n<p>Recall that <code>hero-detail</code> is the CSS <a href=\"tutorial/toh-pt3#selector\" title=\"HeroDetailComponent selector\"><code>selector</code></a>\nin the <code>HeroDetailComponent</code> metadata.\nThat's the tag name of the element that represents the <code>HeroDetailComponent</code>.</p>\n<p>Add a <code>&#x3C;hero-detail></code> element near the bottom of the <code>AppComponent</code> template,\nwhere the hero detail view used to be.</p>\n<p>Coordinate the master <code>AppComponent</code> with the <code>HeroDetailComponent</code>\nby binding the <code>selectedHero</code> property of the <code>AppComponent</code>\nto the <code>hero</code> property of the <code>HeroDetailComponent</code>.</p>\n<code-example path=\"toh-pt3/app/app.component.1.html\" region=\"hero-detail-binding\" title=\"app.component.ts (excerpt)\" linenums=\"false\">\n&#x3C;hero-detail [hero]=\"selectedHero\">&#x3C;/hero-detail>\n\n</code-example>\n<p>Now every time the <code>selectedHero</code> changes, the <code>HeroDetailComponent</code> gets a new hero to display.</p>\n<p>The revised <code>AppComponent</code> template should look like this:</p>\n<code-example path=\"toh-pt3/src/app/app.component.ts\" region=\"hero-detail-template\" title=\"app.component.ts (excerpt)\" linenums=\"false\">\ntemplate: `\n  &#x3C;h1>{{title}}&#x3C;/h1>\n  &#x3C;h2>My Heroes&#x3C;/h2>\n  &#x3C;ul class=\"heroes\">\n    &#x3C;li *ngFor=\"let hero of heroes\"\n      [class.selected]=\"hero === selectedHero\"\n      (click)=\"onSelect(hero)\">\n      &#x3C;span class=\"badge\">{{hero.id}}&#x3C;/span> {{hero.name}}\n    &#x3C;/li>\n  &#x3C;/ul>\n  &#x3C;hero-detail [hero]=\"selectedHero\">&#x3C;/hero-detail>\n`,\n\n</code-example>\n<h2 id=\"what-changed\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#what-changed\"><i class=\"material-icons\">link</i></a>What changed?</h2>\n<p>As <a href=\"tutorial/toh-pt2\">before</a>, whenever a user clicks on a hero name,\nthe hero detail appears below the hero list.\nBut now the <code>HeroDetailView</code> is presenting those details.</p>\n<p>Refactoring the original <code>AppComponent</code> into two components yields benefits, both now and in the future:</p>\n<ol>\n<li>\n<p>You simplified the <code>AppComponent</code> by reducing its responsibilities.</p>\n</li>\n<li>\n<p>You can evolve the <code>HeroDetailComponent</code> into a rich hero editor\nwithout touching the parent <code>AppComponent</code>.</p>\n</li>\n<li>\n<p>You can evolve the <code>AppComponent</code> without touching the hero detail view.</p>\n</li>\n<li>\n<p>You can re-use the <code>HeroDetailComponent</code> in the template of some future parent component.</p>\n</li>\n</ol>\n<h3 id=\"review-the-app-structure\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#review-the-app-structure\"><i class=\"material-icons\">link</i></a>Review the app structure</h3>\n<p>Verify that you have the following structure:</p>\n<div class=\"filetree\">\n  <div class=\"file\">\n    angular-tour-of-heroes\n  </div>\n  <div class=\"children\">\n    <div class=\"file\">\n      src\n    </div>\n    <div class=\"children\">\n      <div class=\"file\">\n        app\n      </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          app.component.ts\n        </div>\n        <div class=\"file\">\n          app.module.ts\n        </div>\n        <div class=\"file\">\n          hero.ts\n        </div>\n        <div class=\"file\">\n          hero-detail.component.ts\n        </div>\n      </div>\n      <div class=\"file\">\n        main.ts\n      </div>\n      <div class=\"file\">\n        index.html\n      </div>\n      <div class=\"file\">\n        styles.css\n      </div>\n      <div class=\"file\">\n        systemjs.config.js\n      </div>\n      <div class=\"file\">\n        tsconfig.json\n      </div>\n    </div>\n    <div class=\"file\">\n      node_modules ...\n    </div>\n    <div class=\"file\">\n      package.json\n    </div>\n  </div>\n</div>\n<p>Here are the code files discussed in this page.</p>\n<code-tabs>\n\n  <code-pane title=\"src/app/hero-detail.component.ts\" path=\"toh-pt3/src/app/hero-detail.component.ts\">\nimport { Component, Input } from '@angular/core';\n\nimport { Hero } from './hero';\n@Component({\n  selector: 'hero-detail',\n  template: `\n    &#x3C;div *ngIf=\"hero\">\n      &#x3C;h2>{{hero.name}} details!&#x3C;/h2>\n      &#x3C;div>&#x3C;label>id: &#x3C;/label>{{hero.id}}&#x3C;/div>\n      &#x3C;div>\n        &#x3C;label>name: &#x3C;/label>\n        &#x3C;input [(ngModel)]=\"hero.name\" placeholder=\"name\"/>\n      &#x3C;/div>\n    &#x3C;/div>\n  `\n})\nexport class HeroDetailComponent {\n  @Input() hero: Hero;\n}\n\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/app.component.ts\" path=\"toh-pt3/src/app/app.component.ts\">\nimport { Component } from '@angular/core';\n\nimport { Hero } from './hero';\n\nconst HEROES: Hero[] = [\n  { id: 11, name: 'Mr. Nice' },\n  { id: 12, name: 'Narco' },\n  { id: 13, name: 'Bombasto' },\n  { id: 14, name: 'Celeritas' },\n  { id: 15, name: 'Magneta' },\n  { id: 16, name: 'RubberMan' },\n  { id: 17, name: 'Dynama' },\n  { id: 18, name: 'Dr IQ' },\n  { id: 19, name: 'Magma' },\n  { id: 20, name: 'Tornado' }\n];\n\n@Component({\n  selector: 'my-app',\n  template: `\n    &#x3C;h1>{{title}}&#x3C;/h1>\n    &#x3C;h2>My Heroes&#x3C;/h2>\n    &#x3C;ul class=\"heroes\">\n      &#x3C;li *ngFor=\"let hero of heroes\"\n        [class.selected]=\"hero === selectedHero\"\n        (click)=\"onSelect(hero)\">\n        &#x3C;span class=\"badge\">{{hero.id}}&#x3C;/span> {{hero.name}}\n      &#x3C;/li>\n    &#x3C;/ul>\n    &#x3C;hero-detail [hero]=\"selectedHero\">&#x3C;/hero-detail>\n  `,\n  styles: [`\n    .selected {\n      background-color: #CFD8DC !important;\n      color: white;\n    }\n    .heroes {\n      margin: 0 0 2em 0;\n      list-style-type: none;\n      padding: 0;\n      width: 15em;\n    }\n    .heroes li {\n      cursor: pointer;\n      position: relative;\n      left: 0;\n      background-color: #EEE;\n      margin: .5em;\n      padding: .3em 0;\n      height: 1.6em;\n      border-radius: 4px;\n    }\n    .heroes li.selected:hover {\n      background-color: #BBD8DC !important;\n      color: white;\n    }\n    .heroes li:hover {\n      color: #607D8B;\n      background-color: #DDD;\n      left: .1em;\n    }\n    .heroes .text {\n      position: relative;\n      top: -3px;\n    }\n    .heroes .badge {\n      display: inline-block;\n      font-size: small;\n      color: white;\n      padding: 0.8em 0.7em 0 0.7em;\n      background-color: #607D8B;\n      line-height: 1em;\n      position: relative;\n      left: -1px;\n      top: -4px;\n      height: 1.8em;\n      margin-right: .8em;\n      border-radius: 4px 0 0 4px;\n    }\n  `]\n})\nexport class AppComponent {\n  title = 'Tour of Heroes';\n  heroes = HEROES;\n  selectedHero: Hero;\n\n  onSelect(hero: Hero): void {\n    this.selectedHero = hero;\n  }\n}\n\n\n</code-pane>\n\n  <code-pane title=\"src/app/hero.ts\" path=\"toh-pt3/src/app/hero.ts\">\nexport class Hero {\n  id: number;\n  name: string;\n}\n\n</code-pane>\n\n  <code-pane title=\"src/app/app.module.ts\" path=\"toh-pt3/src/app/app.module.ts\">\nimport { NgModule }      from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule }   from '@angular/forms';\n\nimport { AppComponent }        from './app.component';\nimport { HeroDetailComponent } from './hero-detail.component';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    FormsModule\n  ],\n  declarations: [\n    AppComponent,\n    HeroDetailComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-pane>\n\n</code-tabs>\n<h2 id=\"the-road-youve-travelled\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#the-road-youve-travelled\"><i class=\"material-icons\">link</i></a>The road you’ve travelled</h2>\n<p>Here's what you achieved in this page:</p>\n<ul>\n<li>You created a reusable component.</li>\n<li>You learned how to make a component accept input.</li>\n<li>You learned to declare the required application directives in an NgModule. You\nlisted the directives in the <code>@NgModule</code> decorator's <code>declarations</code> array.</li>\n<li>You learned to bind a parent component to a child component.</li>\n</ul>\n<p>Your app should look like this <live-example></live-example>.</p>\n<h2 id=\"the-road-ahead\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt3#the-road-ahead\"><i class=\"material-icons\">link</i></a>The road ahead</h2>\n<p>The Tour of Heroes app is more reusable with shared components,\nbut its (mock) data is still hard coded within the <code>AppComponent</code>.\nThat's not sustainable.\nData access should be refactored to a separate service\nand shared among the components that need data.</p>\n<p>You’ll learn to create services in the <a href=\"tutorial/toh-pt4\" title=\"Services\">next tutorial</a> page.</p>\n\n</div>"
}