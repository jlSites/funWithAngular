{
  "id": "tutorial/toh-pt1",
  "title": "The Hero Editor",
  "contents": "<h1 id=\"the-hero-editor\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#the-hero-editor\"><i class=\"material-icons\">link</i></a>The Hero Editor</h1>\n\n<div class=\"content\">\n<h2 id=\"setup-to-develop-locally\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#setup-to-develop-locally\"><i class=\"material-icons\">link</i></a>Setup to develop locally</h2>\n<p>Follow the <a href=\"guide/setup\">setup</a> instructions for creating a new project\nnamed <code>angular-tour-of-heroes</code>.</p>\n<p>The file structure should look like this:</p>\n<div class=\"filetree\">\n  <div class=\"file\">\n    angular-tour-of-heroes\n  </div>\n  <div class=\"children\">\n    <div class=\"file\">\n      src\n    </div>\n    <div class=\"children\">\n      <div class=\"file\">\n        app\n      </div>\n      <div class=\"children\">\n        <div class=\"file\">\n          app.component.ts\n        </div>\n        <div class=\"file\">\n          app.module.ts\n        </div>\n      </div>\n      <div class=\"file\">\n        main.ts\n      </div>\n      <div class=\"file\">\n        index.html\n      </div>\n      <div class=\"file\">\n        styles.css\n      </div>\n      <div class=\"file\">\n        systemjs.config.js\n      </div>\n      <div class=\"file\">\n        tsconfig.json\n      </div>\n    </div>\n    <div class=\"file\">\n      node_modules ...\n    </div>\n    <div class=\"file\">\n      package.json\n    </div>\n  </div>\n</div>\n<p>When you're done with this page, the app should look like this <live-example></live-example>.</p>\n<a id=\"keep-transpiling\"></a>\n<h2 id=\"keep-the-app-transpiling-and-running\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#keep-the-app-transpiling-and-running\"><i class=\"material-icons\">link</i></a>Keep the app transpiling and running</h2>\n<p>Enter the following command in the terminal window:</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  npm start\n\n</code-example>\n<p>This command runs the TypeScript compiler in \"watch mode\", recompiling automatically when the code changes.\nThe command simultaneously launches the app in a browser and refreshes the browser when the code changes.</p>\n<p>You can keep building the Tour of Heroes without pausing to recompile or refresh the browser.</p>\n<h2 id=\"show-the-hero\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#show-the-hero\"><i class=\"material-icons\">link</i></a>Show the hero</h2>\n<p>Add two properties to the <code>AppComponent</code>: a <code>title</code> property for the app name and a <code>hero</code> property\nfor a hero named \"Windstorm.\"</p>\n<code-example path=\"toh-pt1/app/app.component.1.ts\" region=\"app-component-1\" title=\"app.component.ts (AppComponent class)\" linenums=\"false\">\nexport class AppComponent {\n  title = 'Tour of Heroes';\n  hero = 'Windstorm';\n}\n\n</code-example>\n<p>Now update the template in the <code>@Component</code> decorator with data bindings to these new properties.</p>\n<code-example path=\"toh-pt1/app/app.component.1.ts\" region=\"show-hero\" title=\"app.component.ts (@Component)\" linenums=\"false\">\ntemplate: `&#x3C;h1>{{title}}&#x3C;/h1>&#x3C;h2>{{hero}} details!&#x3C;/h2>`\n\n</code-example>\n<p>The browser refreshes and displays the title and hero name.</p>\n<p>The double curly braces are Angular's <em>interpolation binding</em> syntax.\nThese interpolation bindings present the component's <code>title</code> and <code>hero</code> property values,\nas strings, inside the HTML header tags.</p>\n<div class=\"l-sub-section\">\n<p>Read more about interpolation in the <a href=\"guide/displaying-data\">Displaying Data</a> page.</p>\n</div>\n<h3 id=\"hero-object\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#hero-object\"><i class=\"material-icons\">link</i></a>Hero object</h3>\n<p>The hero needs more properties.\nConvert the <code>hero</code> from a literal string to a class.</p>\n<p>Create a <code>Hero</code> class with <code>id</code> and <code>name</code> properties.\nAdd these properties near the top of the <code>app.component.ts</code> file, just below the import statement.</p>\n<code-example path=\"toh-pt1/src/app/app.component.ts\" region=\"hero-class-1\" title=\"src/app/app.component.ts (Hero class)\" linenums=\"false\">\nexport class Hero {\n  id: number;\n  name: string;\n}\n\n</code-example>\n<p>In the <code>AppComponent</code> class, refactor the component's <code>hero</code> property to be of type <code>Hero</code>,\nthen initialize it with an <code>id</code> of <code>1</code> and the name <code>Windstorm</code>.</p>\n<code-example path=\"toh-pt1/src/app/app.component.ts\" region=\"hero-property-1\" title=\"src/app/app.component.ts (hero property)\" linenums=\"false\">\nhero: Hero = {\n  id: 1,\n  name: 'Windstorm'\n};\n\n</code-example>\n<p>Because you changed the hero from a string to an object,\nupdate the binding in the template to refer to the hero's <code>name</code> property.</p>\n<code-example path=\"toh-pt1/app/app.component.1.ts\" region=\"show-hero-2\" title=\"src/app/app.component.ts\">\ntemplate: `&#x3C;h1>{{title}}&#x3C;/h1>&#x3C;h2>{{hero.name}} details!&#x3C;/h2>`\n\n</code-example>\n<p>The browser refreshes and continues to display the hero's name.</p>\n<h3 id=\"adding-html-with-multi-line-template-strings\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#adding-html-with-multi-line-template-strings\"><i class=\"material-icons\">link</i></a>Adding HTML with multi-line template strings</h3>\n<p>To show all of the hero's properties,\nadd a <code>&#x3C;div></code> for the hero's <code>id</code> property and another <code>&#x3C;div></code> for the hero's <code>name</code>.\nTo keep the template readable, place each <code>&#x3C;div></code> on its own line.</p>\n<p>The backticks around the component template let you put the <code>&#x3C;h1></code>, <code>&#x3C;h2></code>, and <code>&#x3C;div></code> elements on their own lines,\nthanks to the <i>template literals</i> feature in ES2015 and TypeScript. For more information, see\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\" target=\"_blank\" title=\"template literal\">Template literals</a>.</p>\n<code-example path=\"toh-pt1/app/app.component.1.ts\" region=\"multi-line-strings\" title=\"app.component.ts (AppComponent&#x27;s template)\" linenums=\"false\">\ntemplate: `\n  &#x3C;h1>{{title}}&#x3C;/h1>\n  &#x3C;h2>{{hero.name}} details!&#x3C;/h2>\n  &#x3C;div>&#x3C;label>id: &#x3C;/label>{{hero.id}}&#x3C;/div>\n  &#x3C;div>&#x3C;label>name: &#x3C;/label>{{hero.name}}&#x3C;/div>\n  `\n\n</code-example>\n<h2 id=\"edit-the-hero-name\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#edit-the-hero-name\"><i class=\"material-icons\">link</i></a>Edit the hero name</h2>\n<p>Users should be able to edit the hero name in an <code>&#x3C;input></code> textbox.\nThe textbox should both <em>display</em> the hero's <code>name</code> property\nand <em>update</em> that property as the user types.</p>\n<p>You need a two-way binding between the <code>&#x3C;input></code> form element and the <code>hero.name</code> property.</p>\n<h3 id=\"two-way-binding\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#two-way-binding\"><i class=\"material-icons\">link</i></a>Two-way binding</h3>\n<p>Refactor the hero name in the template so it looks like this:</p>\n<code-example path=\"toh-pt1/app/app.component.1.ts\" region=\"name-input\" title=\"src/app/app.component.ts\" linenums=\"false\">\n&#x3C;div>\n  &#x3C;label>name: &#x3C;/label>\n  &#x3C;input [(ngModel)]=\"hero.name\" placeholder=\"name\">\n&#x3C;/div>\n\n</code-example>\n<p><code>[(ngModel)]</code> is the Angular syntax to bind the <code>hero.name</code> property\nto the textbox.\nData flows <em>in both directions:</em> from the property to the textbox,\nand from the textbox back to the property.</p>\n<p>Unfortunately, immediately after this change, the application breaks.\nIf you looked in the browser console, you'd see Angular complaining that\n\"<code>ngModel</code> ... isn't a known property of <code>input</code>.\"</p>\n<p>Although <code><a href=\"api/forms/NgModel\">NgModel</a></code> is a valid Angular directive, it isn't available by default.\nIt belongs to the optional <code><a href=\"api/forms/FormsModule\">FormsModule</a></code>.\nYou must opt-in to using that module.</p>\n<h3 id=\"import-the-formsmodule\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#import-the-formsmodule\"><i class=\"material-icons\">link</i></a>Import the <em>FormsModule</em></h3>\n<p>Open the <code>app.module.ts</code> file and import the <code><a href=\"api/forms/FormsModule\">FormsModule</a></code> symbol from the <code>@angular/forms</code> library.\nThen add the <code><a href=\"api/forms/FormsModule\">FormsModule</a></code> to the <code>@NgModule</code> metadata's <code>imports</code> array, which contains the list\nof external modules that the app uses.</p>\n<p>The updated <code>AppModule</code> looks like this:</p>\n<code-example path=\"toh-pt1/src/app/app.module.ts\" title=\"app.module.ts (FormsModule import)\">\nimport { NgModule }      from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule }   from '@angular/forms'; // &#x3C;-- NgModel lives here\n\nimport { AppComponent }  from './app.component';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    FormsModule // &#x3C;-- import the FormsModule before binding with [(ngModel)]\n  ],\n  declarations: [\n    AppComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-example>\n<div class=\"l-sub-section\">\n<p>Read more about <code><a href=\"api/forms/FormsModule\">FormsModule</a></code> and <code>ngModel</code> in the\n<a href=\"guide/forms#ngModel\">Two-way data binding with ngModel</a> section of the\n<a href=\"guide/forms\">Forms</a> guide and the\n<a href=\"guide/template-syntax#ngModel\">Two-way binding with NgModel</a> section of the\n<a href=\"guide/template-syntax\">Template Syntax</a> guide.</p>\n</div>\n<p>When the browser refreshes, the app should work again.\nYou can edit the hero's name and see the changes reflected immediately in the <code>&#x3C;h2></code> above the textbox.</p>\n<h2 id=\"the-road-youve-travelled\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#the-road-youve-travelled\"><i class=\"material-icons\">link</i></a>The road you've travelled</h2>\n<p>Take stock of what you've built.</p>\n<ul>\n<li>The Tour of Heroes app uses the double curly braces of interpolation (a type of one-way data binding)\nto display the app title and properties of a <code>Hero</code> object.</li>\n<li>You wrote a multi-line template using ES2015's template literals to make the template readable.</li>\n<li>You added a two-way data binding to the <code>&#x3C;input></code> element\nusing the built-in <code>ngModel</code> directive. This binding both displays the hero's name and allows users to change it.</li>\n<li>The <code>ngModel</code> directive propagates changes to every other binding of the <code>hero.name</code>.</li>\n</ul>\n<p>Your app should look like this <live-example></live-example>.</p>\n<p>Here's the complete <code>app.component.ts</code> as it stands now:</p>\n<code-example path=\"toh-pt1/src/app/app.component.ts\" title=\"src/app/app.component.ts\">\nimport { Component } from '@angular/core';\n\nexport class Hero {\n  id: number;\n  name: string;\n}\n\n@Component({\n  selector: 'my-app',\n  template: `\n    &#x3C;h1>{{title}}&#x3C;/h1>\n    &#x3C;h2>{{hero.name}} details!&#x3C;/h2>\n    &#x3C;div>&#x3C;label>id: &#x3C;/label>{{hero.id}}&#x3C;/div>\n    &#x3C;div>\n      &#x3C;label>name: &#x3C;/label>\n      &#x3C;input [(ngModel)]=\"hero.name\" placeholder=\"name\">\n    &#x3C;/div>\n    `\n})\nexport class AppComponent {\n  title = 'Tour of Heroes';\n  hero: Hero = {\n    id: 1,\n    name: 'Windstorm'\n  };\n}\n\n\n</code-example>\n<h2 id=\"the-road-ahead\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt1#the-road-ahead\"><i class=\"material-icons\">link</i></a>The road ahead</h2>\n<p>In the <a href=\"tutorial/toh-pt2\" title=\"Master/Detail\">next tutorial page</a>, you'll build on the Tour of Heroes app to display a list of heroes.\nYou'll also allow the user to select heroes and display their details.\nYou'll learn more about how to retrieve lists and bind them to the template.</p>\n\n</div>"
}