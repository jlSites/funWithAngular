{
  "id": "tutorial/toh-pt6",
  "title": "HTTP",
  "contents": "\n<div class=\"content\">\n<h1 id=\"http\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#http\"><i class=\"material-icons\">link</i></a>HTTP</h1>\n<p>In this page, you'll make the following improvements.</p>\n<ul>\n<li>Get the hero data from a server.</li>\n<li>Let users add, edit, and delete hero names.</li>\n<li>Save the changes to the server.</li>\n</ul>\n<p>You'll teach the app to make corresponding HTTP calls to a remote server's web API.</p>\n<p>When you're done with this page, the app should look like this <live-example></live-example>.</p>\n<h2 id=\"where-you-left-off\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#where-you-left-off\"><i class=\"material-icons\">link</i></a>Where you left off</h2>\n<p>In the <a href=\"tutorial/toh-pt5\">previous page</a>, you learned to navigate between the dashboard and the fixed heroes list,\nediting a selected hero along the way.\nThat's the starting point for this page.</p>\n<h2 id=\"keep-the-app-transpiling-and-running\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#keep-the-app-transpiling-and-running\"><i class=\"material-icons\">link</i></a>Keep the app transpiling and running</h2>\n<p>Enter the following command in the terminal window:</p>\n<code-example language=\"sh\" class=\"code-shell\">\n  npm start\n</code-example>\n<p>This command runs the TypeScript compiler in \"watch mode\", recompiling automatically when the code changes.\nThe command simultaneously launches the app in a browser and refreshes the browser when the code changes.</p>\n<p>You can keep building the Tour of Heroes without pausing to recompile or refresh the browser.</p>\n<h2 id=\"providing-http-services\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#providing-http-services\"><i class=\"material-icons\">link</i></a>Providing HTTP Services</h2>\n<p>The <code><a href=\"api/http/HttpModule\">HttpModule</a></code> is not a core NgModule.\n<code><a href=\"api/http/HttpModule\">HttpModule</a></code> is Angular's optional approach to web access. It exists as a separate add-on module called <code>@angular/http</code>\nand is shipped in a separate script file as part of the Angular npm package.</p>\n<p>You're ready to import from <code>@angular/http</code> because <code>systemjs.config</code> configured <em>SystemJS</em> to load that library when you need it.</p>\n<h2 id=\"register-for-http-services\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#register-for-http-services\"><i class=\"material-icons\">link</i></a>Register for HTTP services</h2>\n<p>The app will depend on the Angular <code>http</code> service, which itself depends on other supporting services.\nThe <code><a href=\"api/http/HttpModule\">HttpModule</a></code> from the <code>@angular/http</code> library holds providers for a complete set of HTTP services.</p>\n<p>To allow access to these services from anywhere in the app,\nadd <code><a href=\"api/http/HttpModule\">HttpModule</a></code> to the <code>imports</code> list of the <code>AppModule</code>.</p>\n<code-example path=\"toh-pt6/src/app/app.module.ts\" region=\"v1\" title=\"src/app/app.module.ts (v1)\">\nimport { NgModule }      from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule }   from '@angular/forms';\nimport { HttpModule }    from '@angular/http';\n\nimport { AppRoutingModule } from './app-routing.module';\n\nimport { AppComponent }         from './app.component';\nimport { DashboardComponent }   from './dashboard.component';\nimport { HeroesComponent }      from './heroes.component';\nimport { HeroDetailComponent }  from './hero-detail.component';\nimport { HeroService }          from './hero.service';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpModule,\n    AppRoutingModule\n  ],\n  declarations: [\n    AppComponent,\n    DashboardComponent,\n    HeroDetailComponent,\n    HeroesComponent,\n  ],\n  providers: [ HeroService ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-example>\n<p>Notice that you also supply <code><a href=\"api/http/HttpModule\">HttpModule</a></code> as part of the <em>imports</em> array in root NgModule <code>AppModule</code>.</p>\n<h2 id=\"simulate-the-web-api\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#simulate-the-web-api\"><i class=\"material-icons\">link</i></a>Simulate the web API</h2>\n<p>We recommend registering app-wide services in the root\n<code>AppModule</code> <em>providers</em>.</p>\n<p>Until you have a web server that can handle requests for hero data,\nthe HTTP client will fetch and save data from\na mock service, the <em>in-memory web API</em>.</p>\n<p>Update <code>src/app/app.module.ts</code> with this version, which uses the mock service:</p>\n<code-example path=\"toh-pt6/src/app/app.module.ts\" region=\"v2\" title=\"src/app/app.module.ts (v2)\">\nimport { NgModule }      from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule }   from '@angular/forms';\nimport { HttpModule }    from '@angular/http';\n\nimport { AppRoutingModule } from './app-routing.module';\n\n// Imports for loading &#x26; configuring the in-memory web api\nimport { InMemoryWebApiModule } from 'angular-in-memory-web-api';\nimport { InMemoryDataService }  from './in-memory-data.service';\n\nimport { AppComponent }         from './app.component';\nimport { DashboardComponent }   from './dashboard.component';\nimport { HeroesComponent }      from './heroes.component';\nimport { HeroDetailComponent }  from './hero-detail.component';\nimport { HeroService }          from './hero.service';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpModule,\n    InMemoryWebApiModule.forRoot(InMemoryDataService),\n    AppRoutingModule\n  ],\n  declarations: [\n    AppComponent,\n    DashboardComponent,\n    HeroDetailComponent,\n    HeroesComponent,\n  ],\n  providers: [ HeroService ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-example>\n<p>Rather than require a real API server, this example simulates communication with the remote server by adding the\n<a href=\"https://github.com/angular/in-memory-web-api\" title=\"In-memory Web API\">InMemoryWebApiModule</a>\nto the module <code>imports</code>, effectively  replacing the <code><a href=\"api/http/Http\">Http</a></code> client's XHR backend service with an in-memory alternative.</p>\n<code-example path=\"toh-pt6/src/app/app.module.ts\" region=\"in-mem-web-api\">\nInMemoryWebApiModule.forRoot(InMemoryDataService),\n\n</code-example>\n<p>The <code>forRoot()</code> configuration method takes an <code>InMemoryDataService</code> class\nthat primes the in-memory database.\nAdd the file <code>in-memory-data.service.ts</code> in <code>app</code> with the following content:</p>\n<code-example path=\"toh-pt6/src/app/in-memory-data.service.ts\" region=\"init\" title=\"src/app/in-memory-data.service.ts\" linenums=\"false\">\nimport { InMemoryDbService } from 'angular-in-memory-web-api';\nexport class InMemoryDataService implements InMemoryDbService {\n  createDb() {\n    const heroes = [\n      { id: 0,  name: 'Zero' },\n      { id: 11, name: 'Mr. Nice' },\n      { id: 12, name: 'Narco' },\n      { id: 13, name: 'Bombasto' },\n      { id: 14, name: 'Celeritas' },\n      { id: 15, name: 'Magneta' },\n      { id: 16, name: 'RubberMan' },\n      { id: 17, name: 'Dynama' },\n      { id: 18, name: 'Dr IQ' },\n      { id: 19, name: 'Magma' },\n      { id: 20, name: 'Tornado' }\n    ];\n    return {heroes};\n  }\n}\n\n\n</code-example>\n<p>This file replaces <code>mock-heroes.ts</code>, which is now safe to delete.\nAdded hero \"Zero\" to confirm that the data service can handle a hero with <code>id==0</code>.</p>\n<div class=\"alert is-helpful\">\n<p>  The in-memory web API is only useful in the early stages of development and for demonstrations such as this Tour of Heroes.\nDon't worry about the details of this backend substitution; you can\nskip it when you have a real web API server.</p>\n<p>  Read more about the in-memory web API in the\n<a href=\"guide/http#in-mem-web-api\">Appendix: Tour of Heroes in-memory web api</a>\nsection of the <a href=\"guide/http#in-mem-web-api\">HTTP Client</a> page.</p>\n</div>\n<h2 id=\"heroes-and-http\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#heroes-and-http\"><i class=\"material-icons\">link</i></a>Heroes and HTTP</h2>\n<p>In the current <code>HeroService</code> implementation, a Promise resolved with mock heroes is returned.</p>\n<code-example path=\"toh-pt4/src/app/hero.service.ts\" region=\"get-heroes\" title=\"src/app/hero.service.ts (old getHeroes)\">\ngetHeroes(): Promise&#x3C;Hero[]> {\n  return Promise.resolve(HEROES);\n}\n\n</code-example>\n<p>This was implemented in anticipation of ultimately\nfetching heroes with an HTTP client, which must be an asynchronous operation.</p>\n<p>Now convert <code>getHeroes()</code> to use HTTP.</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"getHeroes\" title=\"src/app/hero.service.ts (updated getHeroes and new class members)\">\nprivate heroesUrl = 'api/heroes';  // URL to web api\n\nconstructor(private http: Http) { }\n\ngetHeroes(): Promise&#x3C;Hero[]> {\n  return this.http.get(this.heroesUrl)\n             .toPromise()\n             .then(response => response.json().data as Hero[])\n             .catch(this.handleError);\n}\n\nprivate handleError(error: any): Promise&#x3C;any> {\n  console.error('An error occurred', error); // for demo purposes only\n  return Promise.reject(error.message || error);\n}\n\n</code-example>\n<p>Update the import statements as follows:</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"imports\" title=\"src/app/hero.service.ts (updated imports)\">\nimport { Injectable }    from '@angular/core';\nimport { Headers, Http } from '@angular/http';\n\nimport 'rxjs/add/operator/toPromise';\n\nimport { Hero } from './hero';\n\n</code-example>\n<p>Refresh the browser. The hero data should successfully load from the\nmock server.</p>\n<a id=\"http-promise\"></a>\n<h3 id=\"http-promise\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#http-promise\"><i class=\"material-icons\">link</i></a>HTTP Promise</h3>\n<p>The Angular <code>http.get</code> returns an RxJS <code>Observable</code>.\n<em>Observables</em> are a powerful way to manage asynchronous data flows.\nYou'll read about <a href=\"tutorial/toh-pt6#observables\">Observables</a> later in this page.</p>\n<p>For now, you've converted the <code>Observable</code> to a <code>Promise</code> using the <code>toPromise</code> operator.</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"to-promise\">\n.toPromise()\n\n</code-example>\n<p>The Angular <code>Observable</code> doesn't have a <code>toPromise</code> operator out of the box.</p>\n<p>There are many operators like <code>toPromise</code> that extend <code>Observable</code> with useful capabilities.\nTo use those capabilities, you have to add the operators themselves.\nThat's as easy as importing them from the RxJS library like this:</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"rxjs\">\nimport 'rxjs/add/operator/toPromise';\n\n</code-example>\n<div class=\"l-sub-section\">\n<p>  You'll add more operators, and learn why you must do so, <a href=\"tutorial/toh-pt6#rxjs-imports\">later in this tutorial</a>.</p>\n</div>\n<h3 id=\"extracting-the-data-in-the-then-callback\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#extracting-the-data-in-the-then-callback\"><i class=\"material-icons\">link</i></a>Extracting the data in the <em>then</em> callback</h3>\n<p>In the <em>Promise</em>'s <code>then()</code> callback, you call the <code>json</code> method of the HTTP <code><a href=\"api/http/Response\">Response</a></code> to extract the\ndata within the response.</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"to-data\">\n.then(response => response.json().data as Hero[])\n\n</code-example>\n<p>The response JSON has a single <code>data</code> property, which\nholds the array of heroes that the caller wants.\nSo you grab that array and return it as the resolved Promise value.</p>\n<div class=\"alert is-important\">\n<p>  Note the shape of the data that the server returns.\nThis particular in-memory web API example returns an object with a <code>data</code> property.\nYour API might return something else. Adjust the code to match your web API.</p>\n</div>\n<p>The caller is unaware that you fetched the heroes from the (mock) server.\nIt receives a Promise of <em>heroes</em> just as it did before.</p>\n<h3 id=\"error-handling\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#error-handling\"><i class=\"material-icons\">link</i></a>Error Handling</h3>\n<p>At the end of <code>getHeroes()</code>, you <code>catch</code> server failures and pass them to an error handler.</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"catch\">\n.catch(this.handleError);\n\n</code-example>\n<p>This is a critical step.\nYou must anticipate HTTP failures, as they happen frequently for reasons beyond your control.</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"handleError\">\nprivate handleError(error: any): Promise&#x3C;any> {\n  console.error('An error occurred', error); // for demo purposes only\n  return Promise.reject(error.message || error);\n}\n\n</code-example>\n<p>This demo service logs the error to the console; in real life,\nyou would handle the error in code. For a demo, this works.</p>\n<p>The code also includes an error to\nthe caller in a rejected promise, so that the caller can display a proper error message to the user.</p>\n<h3 id=\"get-hero-by-id\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#get-hero-by-id\"><i class=\"material-icons\">link</i></a>Get hero by id</h3>\n<p>When the <code>HeroDetailComponent</code> asks the <code>HeroService</code> to fetch a hero,\nthe <code>HeroService</code> currently fetches all heroes and\nfilters for the one with the matching <code>id</code>.\nThat's fine for a simulation, but it's wasteful to ask a real server for all heroes when you only want one.\nMost web APIs support a <em>get-by-id</em> request in the form <code>api/hero/:id</code> (such as <code>api/hero/11</code>).</p>\n<p>Update the <code>HeroService.getHero()</code> method to make a <em>get-by-id</em> request:</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"getHero\" title=\"src/app/hero.service.ts\">\ngetHero(id: number): Promise&#x3C;Hero> {\n  const url = `${this.heroesUrl}/${id}`;\n  return this.http.get(url)\n    .toPromise()\n    .then(response => response.json().data as Hero)\n    .catch(this.handleError);\n}\n\n</code-example>\n<p>This request is almost the same as <code>getHeroes()</code>.\nThe hero id in the URL identifies which hero the server should update.</p>\n<p>Also, the <code>data</code> in the response is a single hero object rather than an array.</p>\n<h3 id=\"unchanged-getheroes-api\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#unchanged-getheroes-api\"><i class=\"material-icons\">link</i></a>Unchanged <em>getHeroes</em> API</h3>\n<p>Although you made significant internal changes to <code>getHeroes()</code> and <code>getHero()</code>,\nthe public signatures didn't change.\nYou still return a Promise from both methods.\nYou won't have to update any of the components that call them.</p>\n<p>Now it's time to add the ability to create and delete heroes.</p>\n<h2 id=\"updating-hero-details\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#updating-hero-details\"><i class=\"material-icons\">link</i></a>Updating hero details</h2>\n<p>Try editing a hero's name in the hero detail view.\nAs you type, the hero name is updated in the view heading.\nBut if you click the Back button, the changes are lost.</p>\n<p>Updates weren't lost before. What changed?\nWhen the app used a list of mock heroes, updates were applied directly to the\nhero objects within the single, app-wide, shared list. Now that you're fetching data\nfrom a server, if you want changes to persist, you must write them back to\nthe server.</p>\n<h3 id=\"add-the-ability-to-save-hero-details\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#add-the-ability-to-save-hero-details\"><i class=\"material-icons\">link</i></a>Add the ability to save hero details</h3>\n<p>At the end of the hero detail template, add a save button with a <code>click</code> event\nbinding that invokes a new component method named <code>save()</code>.</p>\n<code-example path=\"toh-pt6/src/app/hero-detail.component.html\" region=\"save\" title=\"src/app/hero-detail.component.html (save)\">\n&#x3C;button (click)=\"save()\">Save&#x3C;/button>\n\n</code-example>\n<p>Add the following <code>save()</code> method, which persists hero name changes using the hero service\n<code>update()</code> method and then navigates back to the previous view.</p>\n<code-example path=\"toh-pt6/src/app/hero-detail.component.ts\" region=\"save\" title=\"src/app/hero-detail.component.ts (save)\">\nsave(): void {\n  this.heroService.update(this.hero)\n    .then(() => this.goBack());\n}\n\n</code-example>\n<h3 id=\"add-a-hero-service-update-method\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#add-a-hero-service-update-method\"><i class=\"material-icons\">link</i></a>Add a hero service <em>update()</em> method</h3>\n<p>The overall structure of the <code>update()</code> method is similar to that of\n<code>getHeroes()</code>, but it uses an HTTP <code>put()</code> to persist server-side changes.</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"update\" title=\"src/app/hero.service.ts (update)\">\nprivate headers = new Headers({'Content-Type': 'application/json'});\n\nupdate(hero: Hero): Promise&#x3C;Hero> {\n  const url = `${this.heroesUrl}/${hero.id}`;\n  return this.http\n    .put(url, JSON.stringify(hero), {headers: this.headers})\n    .toPromise()\n    .then(() => hero)\n    .catch(this.handleError);\n}\n\n</code-example>\n<p>To identify which hero the server should update, the hero <code>id</code> is encoded in\nthe URL. The <code>put()</code> body is the JSON string encoding of the hero, obtained by\ncalling <code>JSON.stringify</code>. The body content type\n(<code>application/json</code>) is identified in the request header.</p>\n<p>Refresh the browser, change a hero name, save your change,\nand click the browser Back button. Changes should now persist.</p>\n<h2 id=\"add-the-ability-to-add-heroes\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#add-the-ability-to-add-heroes\"><i class=\"material-icons\">link</i></a>Add the ability to add heroes</h2>\n<p>To add a hero, the app needs the hero's name. You can use an <code>input</code>\nelement paired with an add button.</p>\n<p>Insert the following into the heroes component HTML, just after\nthe heading:</p>\n<code-example path=\"toh-pt6/src/app/heroes.component.html\" region=\"add\" title=\"src/app/heroes.component.html (add)\">\n&#x3C;div>\n  &#x3C;label>Hero name:&#x3C;/label> &#x3C;input #heroName />\n  &#x3C;button (click)=\"add(heroName.value); heroName.value=''\">\n    Add\n  &#x3C;/button>\n&#x3C;/div>\n\n</code-example>\n<p>In response to a click event, call the component's click handler and then\nclear the input field so that it's ready for another name.</p>\n<code-example path=\"toh-pt6/src/app/heroes.component.ts\" region=\"add\" title=\"src/app/heroes.component.ts (add)\">\nadd(name: string): void {\n  name = name.trim();\n  if (!name) { return; }\n  this.heroService.create(name)\n    .then(hero => {\n      this.heroes.push(hero);\n      this.selectedHero = null;\n    });\n}\n\n</code-example>\n<p>When the given name is non-blank, the handler delegates creation of the\nnamed hero to the hero service, and then adds the new hero to the array.</p>\n<p>Implement the <code>create()</code> method in the <code>HeroService</code> class.</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"create\" title=\"src/app/hero.service.ts (create)\">\ncreate(name: string): Promise&#x3C;Hero> {\n  return this.http\n    .post(this.heroesUrl, JSON.stringify({name: name}), {headers: this.headers})\n    .toPromise()\n    .then(res => res.json().data as Hero)\n    .catch(this.handleError);\n}\n\n</code-example>\n<p>Refresh the browser and create some heroes.</p>\n<h2 id=\"add-the-ability-to-delete-a-hero\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#add-the-ability-to-delete-a-hero\"><i class=\"material-icons\">link</i></a>Add the ability to delete a hero</h2>\n<p>Each hero in the heroes view should have a delete button.</p>\n<p>Add the following button element to the heroes component HTML, after the hero\nname in the repeated <code>&#x3C;li></code> element.</p>\n<code-example path=\"toh-pt6/src/app/heroes.component.html\" region=\"delete\">\n&#x3C;button class=\"delete\"\n  (click)=\"delete(hero); $event.stopPropagation()\">x&#x3C;/button>\n\n</code-example>\n<p>The <code>&#x3C;li></code> element should now look like this:</p>\n<code-example path=\"toh-pt6/src/app/heroes.component.html\" region=\"li-element\" title=\"src/app/heroes.component.html (li-element)\">\n&#x3C;li *ngFor=\"let hero of heroes\" (click)=\"onSelect(hero)\"\n    [class.selected]=\"hero === selectedHero\">\n  &#x3C;span class=\"badge\">{{hero.id}}&#x3C;/span>\n  &#x3C;span>{{hero.name}}&#x3C;/span>\n  &#x3C;button class=\"delete\"\n    (click)=\"delete(hero); $event.stopPropagation()\">x&#x3C;/button>\n&#x3C;/li>\n\n</code-example>\n<p>In addition to calling the component's <code>delete()</code> method, the delete button's\nclick handler code stops the propagation of the click event—you\ndon't want the <code>&#x3C;li></code> click handler to be triggered because doing so would\nselect the hero that the user will delete.</p>\n<p>The logic of the <code>delete()</code> handler is a bit trickier:</p>\n<code-example path=\"toh-pt6/src/app/heroes.component.ts\" region=\"delete\" title=\"src/app/heroes.component.ts (delete)\">\ndelete(hero: Hero): void {\n  this.heroService\n      .delete(hero.id)\n      .then(() => {\n        this.heroes = this.heroes.filter(h => h !== hero);\n        if (this.selectedHero === hero) { this.selectedHero = null; }\n      });\n}\n\n</code-example>\n<p>Of course you delegate hero deletion to the hero service, but the component\nis still responsible for updating the display: it removes the deleted hero\nfrom the array and resets the selected hero, if necessary.</p>\n<p>To place the delete button at the far right of the hero entry,\nadd this CSS:</p>\n<code-example path=\"toh-pt6/src/app/heroes.component.css\" region=\"additions\" title=\"src/app/heroes.component.css (additions)\">\nbutton.delete {\n  float:right;\n  margin-top: 2px;\n  margin-right: .8em;\n  background-color: gray !important;\n  color:white;\n}\n\n\n</code-example>\n<h3 id=\"hero-service-delete-method\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#hero-service-delete-method\"><i class=\"material-icons\">link</i></a>Hero service <em>delete()</em> method</h3>\n<p>Add the hero service's <code>delete()</code> method, which uses the <code>delete()</code> HTTP method to remove the hero from the server:</p>\n<code-example path=\"toh-pt6/src/app/hero.service.ts\" region=\"delete\" title=\"src/app/hero.service.ts (delete)\">\ndelete(id: number): Promise&#x3C;void> {\n  const url = `${this.heroesUrl}/${id}`;\n  return this.http.delete(url, {headers: this.headers})\n    .toPromise()\n    .then(() => null)\n    .catch(this.handleError);\n}\n\n</code-example>\n<p>Refresh the browser and try the new delete functionality.</p>\n<h2 id=\"observables\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#observables\"><i class=\"material-icons\">link</i></a>Observables</h2>\n<p>Each <code><a href=\"api/http/Http\">Http</a></code> service method  returns an <code>Observable</code> of HTTP <code><a href=\"api/http/Response\">Response</a></code> objects.</p>\n<p>The <code>HeroService</code> converts that <code>Observable</code> into a <code>Promise</code> and returns the promise to the caller.\nThis section shows you how, when, and why to return the <code>Observable</code> directly.</p>\n<h3 id=\"background\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#background\"><i class=\"material-icons\">link</i></a>Background</h3>\n<p>An <em>Observable</em> is a stream of events that you can process with array-like operators.</p>\n<p>Angular core has basic support for observables.\nDevelopers augment that support with operators and extensions from the\n<a href=\"http://reactivex.io/rxjs\" target=\"_blank\" title=\"RxJS\">RxJS library</a>.\nYou'll see how shortly.</p>\n<p>Recall that the <code>HeroService</code> chained the <code>toPromise</code> operator to the <code>Observable</code> result of <code>http.get()</code>.\nThat operator converted the <code>Observable</code> into a <code>Promise</code> and you passed that promise back to the caller.</p>\n<p>Converting to a Promise is often a good choice. You typically ask <code>http.get()</code> to fetch a single chunk of data.\nWhen you receive the data, you're done.\nThe calling component can easily consume a single result in the form of a Promise.</p>\n<p>But requests aren't always done only once.\nYou may start one request,\ncancel it, and make a different request before the server has responded to the first request.</p>\n<p>A <em>request-cancel-new-request</em> sequence is difficult to implement with <code>Promise</code>s, but\neasy with <code>Observable</code>s.</p>\n<h3 id=\"add-the-ability-to-search-by-name\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#add-the-ability-to-search-by-name\"><i class=\"material-icons\">link</i></a>Add the ability to search by name</h3>\n<p>You're going to add a <em>hero search</em> feature to the Tour of Heroes.\nAs the user types a name into a search box, you'll make repeated HTTP requests for heroes filtered by that name.</p>\n<p>Start by creating <code>HeroSearchService</code> that sends search queries to the server's web API.</p>\n<code-example path=\"toh-pt6/src/app/hero-search.service.ts\" title=\"src/app/hero-search.service.ts\">\nimport { Injectable } from '@angular/core';\nimport { Http }       from '@angular/http';\n\nimport { Observable }     from 'rxjs/Observable';\nimport 'rxjs/add/operator/map';\n\nimport { Hero }           from './hero';\n\n@Injectable()\nexport class HeroSearchService {\n\n  constructor(private http: Http) {}\n\n  search(term: string): Observable&#x3C;Hero[]> {\n    return this.http\n               .get(`api/heroes/?name=${term}`)\n               .map(response => response.json().data as Hero[]);\n  }\n}\n\n\n</code-example>\n<p>The <code>http.get()</code> call in <code>HeroSearchService</code> is similar to the one\nin the <code>HeroService</code>, although the URL now has a query string.</p>\n<p>More importantly, you no longer call <code>toPromise()</code>.\nInstead you return the <em>Observable</em> from the the <code>http.get()</code>,\nafter chaining it to another RxJS operator, <code>map()</code>,\nto extract heroes from the response data.\nRxJS operator chaining makes response processing easy and readable.\nSee the <a href=\"tutorial/toh-pt6#rxjs-imports\">discussion below about operators</a>.</p>\n<h3 id=\"herosearchcomponent\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#herosearchcomponent\"><i class=\"material-icons\">link</i></a>HeroSearchComponent</h3>\n<p>Create a <code>HeroSearchComponent</code> that calls the new <code>HeroSearchService</code>.</p>\n<p>The component template is simple—just a text box and a list of matching search results.</p>\n<code-example path=\"toh-pt6/src/app/hero-search.component.html\" title=\"src/app/hero-search.component.html\">\n&#x3C;div id=\"search-component\">\n  &#x3C;h4>Hero Search&#x3C;/h4>\n  &#x3C;input #searchBox id=\"search-box\" (keyup)=\"search(searchBox.value)\" />\n  &#x3C;div>\n    &#x3C;div *ngFor=\"let hero of heroes | async\"\n         (click)=\"gotoDetail(hero)\" class=\"search-result\" >\n      {{hero.name}}\n    &#x3C;/div>\n  &#x3C;/div>\n&#x3C;/div>\n\n\n</code-example>\n<p>Also, add styles for the new component.</p>\n<code-example path=\"toh-pt6/src/app/hero-search.component.css\" title=\"src/app/hero-search.component.css\">\n.search-result{\n  border-bottom: 1px solid gray;\n  border-left: 1px solid gray;\n  border-right: 1px solid gray;\n  width:195px;\n  height: 16px;\n  padding: 5px;\n  background-color: white;\n  cursor: pointer;\n}\n\n.search-result:hover {\n  color: #eee;\n  background-color: #607D8B;\n}\n\n#search-box{\n  width: 200px;\n  height: 20px;\n}\n\n\n</code-example>\n<p>As the user types in the search box, a <em>keyup</em> event binding calls the component's <code>search()</code>\nmethod with the new search box value.</p>\n<p>As expected, the <code>*ngFor</code> repeats hero objects from the component's <code>heroes</code> property.</p>\n<p>But as you'll soon see, the <code>heroes</code> property is now an <em>Observable</em> of hero arrays, rather than just a hero array.\nThe <code>*ngFor</code> can't do anything with an <code>Observable</code> until you route it through the <code><a href=\"api/core/testing/async\">async</a></code> pipe (<code><a href=\"api/common/AsyncPipe\">AsyncPipe</a></code>).\nThe <code><a href=\"api/core/testing/async\">async</a></code> pipe subscribes to the <code>Observable</code> and produces the array of heroes to <code>*ngFor</code>.</p>\n<p>Create the <code>HeroSearchComponent</code> class and metadata.</p>\n<code-example path=\"toh-pt6/src/app/hero-search.component.ts\" title=\"src/app/hero-search.component.ts\">\nimport { Component, OnInit } from '@angular/core';\nimport { Router }            from '@angular/router';\n\nimport { Observable }        from 'rxjs/Observable';\nimport { Subject }           from 'rxjs/Subject';\n\n// Observable class extensions\nimport 'rxjs/add/observable/of';\n\n// Observable operators\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/operator/debounceTime';\nimport 'rxjs/add/operator/distinctUntilChanged';\n\nimport { HeroSearchService } from './hero-search.service';\nimport { Hero } from './hero';\n\n@Component({\n  selector: 'hero-search',\n  templateUrl: './hero-search.component.html',\n  styleUrls: [ './hero-search.component.css' ],\n  providers: [HeroSearchService]\n})\nexport class HeroSearchComponent implements OnInit {\n  heroes: Observable&#x3C;Hero[]>;\n  private searchTerms = new Subject&#x3C;string>();\n\n  constructor(\n    private heroSearchService: HeroSearchService,\n    private router: Router) {}\n\n  // Push a search term into the observable stream.\n  search(term: string): void {\n    this.searchTerms.next(term);\n  }\n\n  ngOnInit(): void {\n    this.heroes = this.searchTerms\n      .debounceTime(300)        // wait 300ms after each keystroke before considering the term\n      .distinctUntilChanged()   // ignore if next search term is same as previous\n      .switchMap(term => term   // switch to new observable each time the term changes\n        // return the http search observable\n        ? this.heroSearchService.search(term)\n        // or the observable of empty heroes if there was no search term\n        : Observable.of&#x3C;Hero[]>([]))\n      .catch(error => {\n        // TODO: add real error handling\n        console.log(error);\n        return Observable.of&#x3C;Hero[]>([]);\n      });\n  }\n\n  gotoDetail(hero: Hero): void {\n    let link = ['/detail', hero.id];\n    this.router.navigate(link);\n  }\n}\n\n\n</code-example>\n<h4 id=\"search-terms\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#search-terms\"><i class=\"material-icons\">link</i></a>Search terms</h4>\n<p>Focus on the <code>searchTerms</code>:</p>\n<code-example path=\"toh-pt6/src/app/hero-search.component.ts\" region=\"searchTerms\">\nprivate searchTerms = new Subject&#x3C;string>();\n\n// Push a search term into the observable stream.\nsearch(term: string): void {\n  this.searchTerms.next(term);\n}\n\n</code-example>\n<p>A <code>Subject</code> is a producer of an <em>observable</em> event stream;\n<code>searchTerms</code> produces an <code>Observable</code> of strings, the filter criteria for the name search.</p>\n<p>Each call to <code>search()</code> puts a new string into this subject's <em>observable</em> stream by calling <code>next()</code>.</p>\n<a id=\"ngoninit\"></a>\n<h4 id=\"initialize-the-heroes-property-ngoninit\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#initialize-the-heroes-property-ngoninit\"><i class=\"material-icons\">link</i></a>Initialize the <em>heroes</em> property (<em>ngOnInit</em>)</h4>\n<p>A <code>Subject</code> is also an <code>Observable</code>.\nYou can turn the stream\nof search terms into a stream of <code>Hero</code> arrays and assign the result to the <code>heroes</code> property.</p>\n<code-example path=\"toh-pt6/src/app/hero-search.component.ts\" region=\"search\">\nheroes: Observable&#x3C;Hero[]>;\n\nngOnInit(): void {\n  this.heroes = this.searchTerms\n    .debounceTime(300)        // wait 300ms after each keystroke before considering the term\n    .distinctUntilChanged()   // ignore if next search term is same as previous\n    .switchMap(term => term   // switch to new observable each time the term changes\n      // return the http search observable\n      ? this.heroSearchService.search(term)\n      // or the observable of empty heroes if there was no search term\n      : Observable.of&#x3C;Hero[]>([]))\n    .catch(error => {\n      // TODO: add real error handling\n      console.log(error);\n      return Observable.of&#x3C;Hero[]>([]);\n    });\n}\n\n</code-example>\n<p>Passing every user keystroke directly to the <code>HeroSearchService</code> would create an excessive amount of HTTP requests,\ntaxing server resources and burning through the cellular network data plan.</p>\n<p>Instead, you can chain <code>Observable</code> operators that reduce the request flow to the string <code>Observable</code>.\nYou'll make fewer calls to the <code>HeroSearchService</code> and still get timely results. Here's how:</p>\n<ul>\n<li><code>debounceTime(300)</code> waits until the flow of new string events pauses for 300 milliseconds\nbefore passing along the latest string. You'll never make requests more frequently than 300ms.</li>\n<li><code>distinctUntilChanged</code> ensures that a request is sent only if the filter text changed.</li>\n<li><code>switchMap()</code> calls the search service for each search term that makes it through <code>debounce</code> and <code>distinctUntilChanged</code>.\nIt cancels and discards previous search observables, returning only the latest search service observable.</li>\n</ul>\n<div class=\"l-sub-section\">\n<p>  With the <a href=\"http://www.learnrxjs.io/operators/transformation/switchmap.html\">switchMap operator</a>\n(formerly known as <code>flatMapLatest</code>),\nevery qualifying key event can trigger an <code>http()</code> method call.\nEven with a 300ms pause between requests, you could have multiple HTTP requests in flight\nand they may not return in the order sent.</p>\n<p>  <code>switchMap()</code> preserves the original request order while returning only the observable from the most recent <code>http</code> method call.\nResults from prior calls are canceled and discarded.</p>\n<p>  If the search text is empty, the <code>http()</code> method call is also short circuited\nand an observable containing an empty array is returned.</p>\n<p>  Note that until the service supports that feature, <em>canceling</em> the <code>HeroSearchService</code> Observable\ndoesn't actually abort a pending HTTP request.\nFor now, unwanted results are discarded.</p>\n</div>\n<ul>\n<li><code>catch</code> intercepts a failed observable.\nThe simple example prints the error to the console; a real life app would do better.\nThen to clear the search result, you return an observable containing an empty array.</li>\n</ul>\n<a id=\"rxjs-imports\"></a>\n<h3 id=\"import-rxjs-operators\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#import-rxjs-operators\"><i class=\"material-icons\">link</i></a>Import RxJS operators</h3>\n<p>Most RxJS operators are not included in Angular's base <code>Observable</code> implementation.\nThe base implementation includes only what Angular itself requires.</p>\n<p>When you need more RxJS features, extend  <code>Observable</code> by <em>importing</em> the libraries in which they are defined.\nHere are all the RxJS imports that <em>this</em> component needs:</p>\n<code-example path=\"toh-pt6/src/app/hero-search.component.ts\" region=\"rxjs-imports\" title=\"src/app/hero-search.component.ts (rxjs imports)\" linenums=\"false\">\nimport { Observable }        from 'rxjs/Observable';\nimport { Subject }           from 'rxjs/Subject';\n\n// Observable class extensions\nimport 'rxjs/add/observable/of';\n\n// Observable operators\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/operator/debounceTime';\nimport 'rxjs/add/operator/distinctUntilChanged';\n\n</code-example>\n<p>The <code>import 'rxjs/add/...'</code> syntax may be unfamiliar.\nIt's missing the usual list of symbols between the braces: <code>{...}</code>.</p>\n<p>You don't need the operator symbols themselves.\nIn each case, the mere act of importing the library\nloads and executes the library's script file which, in turn, adds the operator to the <code>Observable</code> class.</p>\n<h3 id=\"add-the-search-component-to-the-dashboard\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#add-the-search-component-to-the-dashboard\"><i class=\"material-icons\">link</i></a>Add the search component to the dashboard</h3>\n<p>Add the hero search HTML element to the bottom of the <code>DashboardComponent</code> template.</p>\n<code-example path=\"toh-pt6/src/app/dashboard.component.html\" title=\"src/app/dashboard.component.html\" linenums=\"false\">\n&#x3C;h3>Top Heroes&#x3C;/h3>\n&#x3C;div class=\"grid grid-pad\">\n  &#x3C;a *ngFor=\"let hero of heroes\"  [routerLink]=\"['/detail', hero.id]\"  class=\"col-1-4\">\n    &#x3C;div class=\"module hero\">\n      &#x3C;h4>{{hero.name}}&#x3C;/h4>\n    &#x3C;/div>\n  &#x3C;/a>\n&#x3C;/div>\n&#x3C;hero-search>&#x3C;/hero-search>\n\n\n</code-example>\n<p>Finally, import <code>HeroSearchComponent</code> from\n<code>hero-search.component.ts</code>\nand add it to the <code>declarations</code> array.</p>\n<code-example path=\"toh-pt6/src/app/app.module.ts\" region=\"search\" title=\"src/app/app.module.ts (search)\">\ndeclarations: [\n  AppComponent,\n  DashboardComponent,\n  HeroDetailComponent,\n  HeroesComponent,\n  HeroSearchComponent\n],\n\n</code-example>\n<p>Run the app again. In the Dashboard, enter some text in the search box.\nIf you enter characters that match any existing hero names, you'll see something like this.</p>\n<figure>\n  <img src=\"generated/images/guide/toh/toh-hero-search.png\" alt=\"Hero Search Component\" width=\"240\" height=\"224\">\n</figure>\n<h2 id=\"app-structure-and-code\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#app-structure-and-code\"><i class=\"material-icons\">link</i></a>App structure and code</h2>\n<p>Review the sample source code in the <live-example></live-example> for this page.\nVerify that you have the following structure:</p>\n<div class=\"filetree\">\n  <div class=\"file\">angular-tour-of-heroes</div>\n  <div class=\"children\">\n    <div class=\"file\">src</div>\n    <div class=\"children\">\n      <div class=\"file\">app</div>\n      <div class=\"children\">\n        <div class=\"file\">app.component.ts</div>\n        <div class=\"file\">app.component.css</div>\n        <div class=\"file\">app.module.ts</div>\n        <div class=\"file\">app-routing.module.ts</div>\n        <div class=\"file\">dashboard.component.css</div>\n        <div class=\"file\">dashboard.component.html</div>\n        <div class=\"file\">dashboard.component.ts</div>\n        <div class=\"file\">hero.ts</div>\n        <div class=\"file\">hero-detail.component.css</div>\n        <div class=\"file\">hero-detail.component.html</div>\n        <div class=\"file\">hero-detail.component.ts</div>\n        <div class=\"file\">hero-search.component.html (new)</div>\n        <div class=\"file\">hero-search.component.css (new)</div>\n        <div class=\"file\">hero-search.component.ts (new)</div>\n        <div class=\"file\">hero-search.service.ts (new)</div>\n        <div class=\"file\">hero.service.ts</div>\n        <div class=\"file\">heroes.component.css</div>\n        <div class=\"file\">heroes.component.html</div>\n        <div class=\"file\">heroes.component.ts</div>\n        <div class=\"file\">in-memory-data.service.ts (new)</div>\n      </div>\n      <div class=\"file\">main.ts</div>\n      <div class=\"file\">index.html</div>\n      <div class=\"file\">styles.css</div>\n      <div class=\"file\">systemjs.config.js</div>\n      <div class=\"file\">tsconfig.json</div>\n    </div>\n    <div class=\"file\">node_modules ...</div>\n    <div class=\"file\">package.json</div>\n  </div>\n</div>\n<h2 id=\"home-stretch\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#home-stretch\"><i class=\"material-icons\">link</i></a>Home Stretch</h2>\n<p>You're at the end of your journey, and you've accomplished a lot.</p>\n<ul>\n<li>You added the necessary dependencies to use HTTP in the app.</li>\n<li>You refactored <code>HeroService</code> to load heroes from a web API.</li>\n<li>You extended <code>HeroService</code> to support <code>post()</code>, <code>put()</code>, and <code>delete()</code> methods.</li>\n<li>You updated the components to allow adding, editing, and deleting of heroes.</li>\n<li>You configured an in-memory web API.</li>\n<li>You learned how to use Observables.</li>\n</ul>\n<p>Here are the files you added or changed in this page.</p>\n<code-tabs>\n  <code-pane title=\"app.comp...ts\" path=\"toh-pt6/src/app/app.component.ts\">\nimport { Component }          from '@angular/core';\n\n@Component({\n  selector: 'my-app',\n  template: `\n    &#x3C;h1>{{title}}&#x3C;/h1>\n    &#x3C;nav>\n      &#x3C;a routerLink=\"/dashboard\" routerLinkActive=\"active\">Dashboard&#x3C;/a>\n      &#x3C;a routerLink=\"/heroes\" routerLinkActive=\"active\">Heroes&#x3C;/a>\n    &#x3C;/nav>\n    &#x3C;router-outlet>&#x3C;/router-outlet>\n  `,\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Tour of Heroes';\n}\n\n\n</code-pane>\n  <code-pane title=\"app.mod...ts\" path=\"toh-pt6/src/app/app.module.ts\">\nimport { NgModule }      from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule }   from '@angular/forms';\nimport { HttpModule }    from '@angular/http';\n\nimport { AppRoutingModule } from './app-routing.module';\n\n// Imports for loading &#x26; configuring the in-memory web api\nimport { InMemoryWebApiModule } from 'angular-in-memory-web-api';\nimport { InMemoryDataService }  from './in-memory-data.service';\n\nimport { AppComponent }         from './app.component';\nimport { DashboardComponent }   from './dashboard.component';\nimport { HeroesComponent }      from './heroes.component';\nimport { HeroDetailComponent }  from './hero-detail.component';\nimport { HeroService }          from './hero.service';\nimport { HeroSearchComponent }  from './hero-search.component';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpModule,\n    InMemoryWebApiModule.forRoot(InMemoryDataService),\n    AppRoutingModule\n  ],\n  declarations: [\n    AppComponent,\n    DashboardComponent,\n    HeroDetailComponent,\n    HeroesComponent,\n    HeroSearchComponent\n  ],\n  providers: [ HeroService ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n\n\n</code-pane>\n  <code-pane title=\"heroes.comp...ts\" path=\"toh-pt6/src/app/heroes.component.ts\">\nimport { Component, OnInit } from '@angular/core';\nimport { Router }            from '@angular/router';\n\nimport { Hero }                from './hero';\nimport { HeroService }         from './hero.service';\n\n@Component({\n  selector: 'my-heroes',\n  templateUrl: './heroes.component.html',\n  styleUrls: [ './heroes.component.css' ]\n})\nexport class HeroesComponent implements OnInit {\n  heroes: Hero[];\n  selectedHero: Hero;\n\n  constructor(\n    private heroService: HeroService,\n    private router: Router) { }\n\n  getHeroes(): void {\n    this.heroService\n        .getHeroes()\n        .then(heroes => this.heroes = heroes);\n  }\n\n  add(name: string): void {\n    name = name.trim();\n    if (!name) { return; }\n    this.heroService.create(name)\n      .then(hero => {\n        this.heroes.push(hero);\n        this.selectedHero = null;\n      });\n  }\n\n  delete(hero: Hero): void {\n    this.heroService\n        .delete(hero.id)\n        .then(() => {\n          this.heroes = this.heroes.filter(h => h !== hero);\n          if (this.selectedHero === hero) { this.selectedHero = null; }\n        });\n  }\n\n  ngOnInit(): void {\n    this.getHeroes();\n  }\n\n  onSelect(hero: Hero): void {\n    this.selectedHero = hero;\n  }\n\n  gotoDetail(): void {\n    this.router.navigate(['/detail', this.selectedHero.id]);\n  }\n}\n\n\n</code-pane>\n  <code-pane title=\"heroes.comp...html\" path=\"toh-pt6/src/app/heroes.component.html\">\n&#x3C;h2>My Heroes&#x3C;/h2>\n&#x3C;div>\n  &#x3C;label>Hero name:&#x3C;/label> &#x3C;input #heroName />\n  &#x3C;button (click)=\"add(heroName.value); heroName.value=''\">\n    Add\n  &#x3C;/button>\n&#x3C;/div>\n&#x3C;ul class=\"heroes\">\n  &#x3C;li *ngFor=\"let hero of heroes\" (click)=\"onSelect(hero)\"\n      [class.selected]=\"hero === selectedHero\">\n    &#x3C;span class=\"badge\">{{hero.id}}&#x3C;/span>\n    &#x3C;span>{{hero.name}}&#x3C;/span>\n    &#x3C;button class=\"delete\"\n      (click)=\"delete(hero); $event.stopPropagation()\">x&#x3C;/button>\n  &#x3C;/li>\n&#x3C;/ul>\n&#x3C;div *ngIf=\"selectedHero\">\n  &#x3C;h2>\n    {{selectedHero.name | uppercase}} is my hero\n  &#x3C;/h2>\n  &#x3C;button (click)=\"gotoDetail()\">View Details&#x3C;/button>\n&#x3C;/div>\n\n\n</code-pane>\n  <code-pane title=\"heroes.comp...css\" path=\"toh-pt6/src/app/heroes.component.css\">\n.selected {\n  background-color: #CFD8DC !important;\n  color: white;\n}\n.heroes {\n  margin: 0 0 2em 0;\n  list-style-type: none;\n  padding: 0;\n  width: 15em;\n}\n.heroes li {\n  cursor: pointer;\n  position: relative;\n  left: 0;\n  background-color: #EEE;\n  margin: .5em;\n  padding: .3em 0;\n  height: 1.6em;\n  border-radius: 4px;\n}\n.heroes li:hover {\n  color: #607D8B;\n  background-color: #DDD;\n  left: .1em;\n}\n.heroes li.selected:hover {\n  background-color: #BBD8DC !important;\n  color: white;\n}\n.heroes .text {\n  position: relative;\n  top: -3px;\n}\n.heroes .badge {\n  display: inline-block;\n  font-size: small;\n  color: white;\n  padding: 0.8em 0.7em 0 0.7em;\n  background-color: #607D8B;\n  line-height: 1em;\n  position: relative;\n  left: -1px;\n  top: -4px;\n  height: 1.8em;\n  margin-right: .8em;\n  border-radius: 4px 0 0 4px;\n}\nbutton {\n  font-family: Arial;\n  background-color: #eee;\n  border: none;\n  padding: 5px 10px;\n  border-radius: 4px;\n  cursor: pointer;\n  cursor: hand;\n}\nbutton:hover {\n  background-color: #cfd8dc;\n}\nbutton.delete {\n  float:right;\n  margin-top: 2px;\n  margin-right: .8em;\n  background-color: gray !important;\n  color:white;\n}\n\n\n</code-pane>\n  <code-pane title=\"hero-detail.comp...ts\" path=\"toh-pt6/src/app/hero-detail.component.ts\">\nimport 'rxjs/add/operator/switchMap';\nimport { Component, OnInit }        from '@angular/core';\nimport { ActivatedRoute, ParamMap } from '@angular/router';\nimport { Location }                 from '@angular/common';\n\nimport { Hero }        from './hero';\nimport { HeroService } from './hero.service';\n\n@Component({\n  selector: 'hero-detail',\n  templateUrl: './hero-detail.component.html',\n  styleUrls: [ './hero-detail.component.css' ]\n})\nexport class HeroDetailComponent implements OnInit {\n  hero: Hero;\n\n  constructor(\n    private heroService: HeroService,\n    private route: ActivatedRoute,\n    private location: Location\n  ) {}\n\n  ngOnInit(): void {\n    this.route.paramMap\n      .switchMap((params: ParamMap) => this.heroService.getHero(+params.get('id')))\n      .subscribe(hero => this.hero = hero);\n  }\n\n  save(): void {\n    this.heroService.update(this.hero)\n      .then(() => this.goBack());\n  }\n\n  goBack(): void {\n    this.location.back();\n  }\n}\n\n\n</code-pane>\n  <code-pane title=\"hero-detail.comp...html\" path=\"toh-pt6/src/app/hero-detail.component.html\">\n&#x3C;div *ngIf=\"hero\">\n  &#x3C;h2>{{hero.name}} details!&#x3C;/h2>\n  &#x3C;div>\n    &#x3C;label>id: &#x3C;/label>{{hero.id}}&#x3C;/div>\n  &#x3C;div>\n    &#x3C;label>name: &#x3C;/label>\n    &#x3C;input [(ngModel)]=\"hero.name\" placeholder=\"name\" />\n   &#x3C;/div>\n  &#x3C;button (click)=\"goBack()\">Back&#x3C;/button>\n  &#x3C;button (click)=\"save()\">Save&#x3C;/button>\n&#x3C;/div>\n\n\n</code-pane>\n  <code-pane title=\"hero.service.ts\" path=\"toh-pt6/src/app/hero.service.ts\">\nimport { Injectable }    from '@angular/core';\nimport { Headers, Http } from '@angular/http';\n\nimport 'rxjs/add/operator/toPromise';\n\nimport { Hero } from './hero';\n\n@Injectable()\nexport class HeroService {\n\n  private headers = new Headers({'Content-Type': 'application/json'});\n  private heroesUrl = 'api/heroes';  // URL to web api\n\n  constructor(private http: Http) { }\n\n  getHeroes(): Promise&#x3C;Hero[]> {\n    return this.http.get(this.heroesUrl)\n               .toPromise()\n               .then(response => response.json().data as Hero[])\n               .catch(this.handleError);\n  }\n\n\n  getHero(id: number): Promise&#x3C;Hero> {\n    const url = `${this.heroesUrl}/${id}`;\n    return this.http.get(url)\n      .toPromise()\n      .then(response => response.json().data as Hero)\n      .catch(this.handleError);\n  }\n\n  delete(id: number): Promise&#x3C;void> {\n    const url = `${this.heroesUrl}/${id}`;\n    return this.http.delete(url, {headers: this.headers})\n      .toPromise()\n      .then(() => null)\n      .catch(this.handleError);\n  }\n\n  create(name: string): Promise&#x3C;Hero> {\n    return this.http\n      .post(this.heroesUrl, JSON.stringify({name: name}), {headers: this.headers})\n      .toPromise()\n      .then(res => res.json().data as Hero)\n      .catch(this.handleError);\n  }\n\n  update(hero: Hero): Promise&#x3C;Hero> {\n    const url = `${this.heroesUrl}/${hero.id}`;\n    return this.http\n      .put(url, JSON.stringify(hero), {headers: this.headers})\n      .toPromise()\n      .then(() => hero)\n      .catch(this.handleError);\n  }\n\n  private handleError(error: any): Promise&#x3C;any> {\n    console.error('An error occurred', error); // for demo purposes only\n    return Promise.reject(error.message || error);\n  }\n}\n\n\n\n</code-pane>\n  <code-pane title=\"in-memory-data.service.ts\" path=\"toh-pt6/src/app/in-memory-data.service.ts\">\nimport { InMemoryDbService } from 'angular-in-memory-web-api';\nexport class InMemoryDataService implements InMemoryDbService {\n  createDb() {\n    const heroes = [\n      { id: 0,  name: 'Zero' },\n      { id: 11, name: 'Mr. Nice' },\n      { id: 12, name: 'Narco' },\n      { id: 13, name: 'Bombasto' },\n      { id: 14, name: 'Celeritas' },\n      { id: 15, name: 'Magneta' },\n      { id: 16, name: 'RubberMan' },\n      { id: 17, name: 'Dynama' },\n      { id: 18, name: 'Dr IQ' },\n      { id: 19, name: 'Magma' },\n      { id: 20, name: 'Tornado' }\n    ];\n    return {heroes};\n  }\n}\n\n\n</code-pane>\n</code-tabs>\n<code-tabs>\n  <code-pane title=\"hero-search.service.ts\" path=\"toh-pt6/src/app/hero-search.service.ts\">\nimport { Injectable } from '@angular/core';\nimport { Http }       from '@angular/http';\n\nimport { Observable }     from 'rxjs/Observable';\nimport 'rxjs/add/operator/map';\n\nimport { Hero }           from './hero';\n\n@Injectable()\nexport class HeroSearchService {\n\n  constructor(private http: Http) {}\n\n  search(term: string): Observable&#x3C;Hero[]> {\n    return this.http\n               .get(`api/heroes/?name=${term}`)\n               .map(response => response.json().data as Hero[]);\n  }\n}\n\n\n</code-pane>\n  <code-pane title=\"hero-search.component.ts\" path=\"toh-pt6/src/app/hero-search.component.ts\">\nimport { Component, OnInit } from '@angular/core';\nimport { Router }            from '@angular/router';\n\nimport { Observable }        from 'rxjs/Observable';\nimport { Subject }           from 'rxjs/Subject';\n\n// Observable class extensions\nimport 'rxjs/add/observable/of';\n\n// Observable operators\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/operator/debounceTime';\nimport 'rxjs/add/operator/distinctUntilChanged';\n\nimport { HeroSearchService } from './hero-search.service';\nimport { Hero } from './hero';\n\n@Component({\n  selector: 'hero-search',\n  templateUrl: './hero-search.component.html',\n  styleUrls: [ './hero-search.component.css' ],\n  providers: [HeroSearchService]\n})\nexport class HeroSearchComponent implements OnInit {\n  heroes: Observable&#x3C;Hero[]>;\n  private searchTerms = new Subject&#x3C;string>();\n\n  constructor(\n    private heroSearchService: HeroSearchService,\n    private router: Router) {}\n\n  // Push a search term into the observable stream.\n  search(term: string): void {\n    this.searchTerms.next(term);\n  }\n\n  ngOnInit(): void {\n    this.heroes = this.searchTerms\n      .debounceTime(300)        // wait 300ms after each keystroke before considering the term\n      .distinctUntilChanged()   // ignore if next search term is same as previous\n      .switchMap(term => term   // switch to new observable each time the term changes\n        // return the http search observable\n        ? this.heroSearchService.search(term)\n        // or the observable of empty heroes if there was no search term\n        : Observable.of&#x3C;Hero[]>([]))\n      .catch(error => {\n        // TODO: add real error handling\n        console.log(error);\n        return Observable.of&#x3C;Hero[]>([]);\n      });\n  }\n\n  gotoDetail(hero: Hero): void {\n    let link = ['/detail', hero.id];\n    this.router.navigate(link);\n  }\n}\n\n\n</code-pane>\n  <code-pane title=\"hero-search.component.html\" path=\"toh-pt6/src/app/hero-search.component.html\">\n&#x3C;div id=\"search-component\">\n  &#x3C;h4>Hero Search&#x3C;/h4>\n  &#x3C;input #searchBox id=\"search-box\" (keyup)=\"search(searchBox.value)\" />\n  &#x3C;div>\n    &#x3C;div *ngFor=\"let hero of heroes | async\"\n         (click)=\"gotoDetail(hero)\" class=\"search-result\" >\n      {{hero.name}}\n    &#x3C;/div>\n  &#x3C;/div>\n&#x3C;/div>\n\n\n</code-pane>\n  <code-pane title=\"hero-search.component.css\" path=\"toh-pt6/src/app/hero-search.component.css\">\n.search-result{\n  border-bottom: 1px solid gray;\n  border-left: 1px solid gray;\n  border-right: 1px solid gray;\n  width:195px;\n  height: 16px;\n  padding: 5px;\n  background-color: white;\n  cursor: pointer;\n}\n\n.search-result:hover {\n  color: #eee;\n  background-color: #607D8B;\n}\n\n#search-box{\n  width: 200px;\n  height: 20px;\n}\n\n\n</code-pane>\n</code-tabs>\n<h2 id=\"next-step\"><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"tutorial/toh-pt6#next-step\"><i class=\"material-icons\">link</i></a>Next step</h2>\n<p>That concludes the \"Tour of Heroes\" tutorial.\nYou're ready to learn more about Angular development in the fundamentals section,\nstarting with the <a href=\"guide/architecture\" title=\"Architecture\">Architecture</a> guide.</p>\n\n</div>"
}